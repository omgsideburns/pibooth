diff -ruN ../pibooth_local_copy/.git/HEAD ./.git/HEAD
--- ../pibooth_local_copy/.git/HEAD	1969-12-31 19:00:00
+++ ./.git/HEAD	2025-05-16 14:02:41
@@ -0,0 +1 @@
+ref: refs/heads/master
diff -ruN ../pibooth_local_copy/.git/config ./.git/config
--- ../pibooth_local_copy/.git/config	1969-12-31 19:00:00
+++ ./.git/config	2025-05-16 14:02:41
@@ -0,0 +1,13 @@
+[core]
+	repositoryformatversion = 0
+	filemode = true
+	bare = false
+	logallrefupdates = true
+	ignorecase = true
+	precomposeunicode = true
+[remote "origin"]
+	url = https://github.com/pibooth/pibooth.git
+	fetch = +refs/heads/*:refs/remotes/origin/*
+[branch "master"]
+	remote = origin
+	merge = refs/heads/master
diff -ruN ../pibooth_local_copy/.git/description ./.git/description
--- ../pibooth_local_copy/.git/description	1969-12-31 19:00:00
+++ ./.git/description	2025-05-16 14:02:33
@@ -0,0 +1 @@
+Unnamed repository; edit this file 'description' to name the repository.
diff -ruN ../pibooth_local_copy/.git/hooks/applypatch-msg.sample ./.git/hooks/applypatch-msg.sample
--- ../pibooth_local_copy/.git/hooks/applypatch-msg.sample	1969-12-31 19:00:00
+++ ./.git/hooks/applypatch-msg.sample	2025-05-16 14:02:33
@@ -0,0 +1,15 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message taken by
+# applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.  The hook is
+# allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "applypatch-msg".
+
+. git-sh-setup
+commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
+test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
+:
diff -ruN ../pibooth_local_copy/.git/hooks/commit-msg.sample ./.git/hooks/commit-msg.sample
--- ../pibooth_local_copy/.git/hooks/commit-msg.sample	1969-12-31 19:00:00
+++ ./.git/hooks/commit-msg.sample	2025-05-16 14:02:33
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to check the commit log message.
+# Called by "git commit" with one argument, the name of the file
+# that has the commit message.  The hook should exit with non-zero
+# status after issuing an appropriate message if it wants to stop the
+# commit.  The hook is allowed to edit the commit message file.
+#
+# To enable this hook, rename this file to "commit-msg".
+
+# Uncomment the below to add a Signed-off-by line to the message.
+# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
+# hook is more suited to it.
+#
+# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
+
+# This example catches duplicate Signed-off-by lines.
+
+test "" = "$(grep '^Signed-off-by: ' "$1" |
+	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
+	echo >&2 Duplicate Signed-off-by lines.
+	exit 1
+}
diff -ruN ../pibooth_local_copy/.git/hooks/fsmonitor-watchman.sample ./.git/hooks/fsmonitor-watchman.sample
--- ../pibooth_local_copy/.git/hooks/fsmonitor-watchman.sample	1969-12-31 19:00:00
+++ ./.git/hooks/fsmonitor-watchman.sample	2025-05-16 14:02:33
@@ -0,0 +1,174 @@
+#!/usr/bin/perl
+
+use strict;
+use warnings;
+use IPC::Open2;
+
+# An example hook script to integrate Watchman
+# (https://facebook.github.io/watchman/) with git to speed up detecting
+# new and modified files.
+#
+# The hook is passed a version (currently 2) and last update token
+# formatted as a string and outputs to stdout a new update token and
+# all files that have been modified since the update token. Paths must
+# be relative to the root of the working tree and separated by a single NUL.
+#
+# To enable this hook, rename this file to "query-watchman" and set
+# 'git config core.fsmonitor .git/hooks/query-watchman'
+#
+my ($version, $last_update_token) = @ARGV;
+
+# Uncomment for debugging
+# print STDERR "$0 $version $last_update_token\n";
+
+# Check the hook interface version
+if ($version ne 2) {
+	die "Unsupported query-fsmonitor hook version '$version'.\n" .
+	    "Falling back to scanning...\n";
+}
+
+my $git_work_tree = get_working_dir();
+
+my $retry = 1;
+
+my $json_pkg;
+eval {
+	require JSON::XS;
+	$json_pkg = "JSON::XS";
+	1;
+} or do {
+	require JSON::PP;
+	$json_pkg = "JSON::PP";
+};
+
+launch_watchman();
+
+sub launch_watchman {
+	my $o = watchman_query();
+	if (is_work_tree_watched($o)) {
+		output_result($o->{clock}, @{$o->{files}});
+	}
+}
+
+sub output_result {
+	my ($clockid, @files) = @_;
+
+	# Uncomment for debugging watchman output
+	# open (my $fh, ">", ".git/watchman-output.out");
+	# binmode $fh, ":utf8";
+	# print $fh "$clockid\n@files\n";
+	# close $fh;
+
+	binmode STDOUT, ":utf8";
+	print $clockid;
+	print "\0";
+	local $, = "\0";
+	print @files;
+}
+
+sub watchman_clock {
+	my $response = qx/watchman clock "$git_work_tree"/;
+	die "Failed to get clock id on '$git_work_tree'.\n" .
+		"Falling back to scanning...\n" if $? != 0;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub watchman_query {
+	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
+	or die "open2() failed: $!\n" .
+	"Falling back to scanning...\n";
+
+	# In the query expression below we're asking for names of files that
+	# changed since $last_update_token but not from the .git folder.
+	#
+	# To accomplish this, we're using the "since" generator to use the
+	# recency index to select candidate nodes and "fields" to limit the
+	# output to file names only. Then we're using the "expression" term to
+	# further constrain the results.
+	my $last_update_line = "";
+	if (substr($last_update_token, 0, 1) eq "c") {
+		$last_update_token = "\"$last_update_token\"";
+		$last_update_line = qq[\n"since": $last_update_token,];
+	}
+	my $query = <<"	END";
+		["query", "$git_work_tree", {$last_update_line
+			"fields": ["name"],
+			"expression": ["not", ["dirname", ".git"]]
+		}]
+	END
+
+	# Uncomment for debugging the watchman query
+	# open (my $fh, ">", ".git/watchman-query.json");
+	# print $fh $query;
+	# close $fh;
+
+	print CHLD_IN $query;
+	close CHLD_IN;
+	my $response = do {local $/; <CHLD_OUT>};
+
+	# Uncomment for debugging the watch response
+	# open ($fh, ">", ".git/watchman-response.json");
+	# print $fh $response;
+	# close $fh;
+
+	die "Watchman: command returned no output.\n" .
+	"Falling back to scanning...\n" if $response eq "";
+	die "Watchman: command returned invalid output: $response\n" .
+	"Falling back to scanning...\n" unless $response =~ /^\{/;
+
+	return $json_pkg->new->utf8->decode($response);
+}
+
+sub is_work_tree_watched {
+	my ($output) = @_;
+	my $error = $output->{error};
+	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
+		$retry--;
+		my $response = qx/watchman watch "$git_work_tree"/;
+		die "Failed to make watchman watch '$git_work_tree'.\n" .
+		    "Falling back to scanning...\n" if $? != 0;
+		$output = $json_pkg->new->utf8->decode($response);
+		$error = $output->{error};
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		# Uncomment for debugging watchman output
+		# open (my $fh, ">", ".git/watchman-output.out");
+		# close $fh;
+
+		# Watchman will always return all files on the first query so
+		# return the fast "everything is dirty" flag to git and do the
+		# Watchman query just to get it over with now so we won't pay
+		# the cost in git to look up each individual file.
+		my $o = watchman_clock();
+		$error = $output->{error};
+
+		die "Watchman: $error.\n" .
+		"Falling back to scanning...\n" if $error;
+
+		output_result($o->{clock}, ("/"));
+		$last_update_token = $o->{clock};
+
+		eval { launch_watchman() };
+		return 0;
+	}
+
+	die "Watchman: $error.\n" .
+	"Falling back to scanning...\n" if $error;
+
+	return 1;
+}
+
+sub get_working_dir {
+	my $working_dir;
+	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
+		$working_dir = Win32::GetCwd();
+		$working_dir =~ tr/\\/\//;
+	} else {
+		require Cwd;
+		$working_dir = Cwd::cwd();
+	}
+
+	return $working_dir;
+}
diff -ruN ../pibooth_local_copy/.git/hooks/post-update.sample ./.git/hooks/post-update.sample
--- ../pibooth_local_copy/.git/hooks/post-update.sample	1969-12-31 19:00:00
+++ ./.git/hooks/post-update.sample	2025-05-16 14:02:33
@@ -0,0 +1,8 @@
+#!/bin/sh
+#
+# An example hook script to prepare a packed repository for use over
+# dumb transports.
+#
+# To enable this hook, rename this file to "post-update".
+
+exec git update-server-info
diff -ruN ../pibooth_local_copy/.git/hooks/pre-applypatch.sample ./.git/hooks/pre-applypatch.sample
--- ../pibooth_local_copy/.git/hooks/pre-applypatch.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-applypatch.sample	2025-05-16 14:02:33
@@ -0,0 +1,14 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed
+# by applypatch from an e-mail message.
+#
+# The hook should exit with non-zero status after issuing an
+# appropriate message if it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-applypatch".
+
+. git-sh-setup
+precommit="$(git rev-parse --git-path hooks/pre-commit)"
+test -x "$precommit" && exec "$precommit" ${1+"$@"}
+:
diff -ruN ../pibooth_local_copy/.git/hooks/pre-commit.sample ./.git/hooks/pre-commit.sample
--- ../pibooth_local_copy/.git/hooks/pre-commit.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-commit.sample	2025-05-16 14:02:33
@@ -0,0 +1,49 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git commit" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message if
+# it wants to stop the commit.
+#
+# To enable this hook, rename this file to "pre-commit".
+
+if git rev-parse --verify HEAD >/dev/null 2>&1
+then
+	against=HEAD
+else
+	# Initial commit: diff against an empty tree object
+	against=$(git hash-object -t tree /dev/null)
+fi
+
+# If you want to allow non-ASCII filenames set this variable to true.
+allownonascii=$(git config --type=bool hooks.allownonascii)
+
+# Redirect output to stderr.
+exec 1>&2
+
+# Cross platform projects tend to avoid non-ASCII filenames; prevent
+# them from being added to the repository. We exploit the fact that the
+# printable range starts at the space character and ends with tilde.
+if [ "$allownonascii" != "true" ] &&
+	# Note that the use of brackets around a tr range is ok here, (it's
+	# even required, for portability to Solaris 10's /usr/bin/tr), since
+	# the square bracket bytes happen to fall in the designated range.
+	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
+	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
+then
+	cat <<\EOF
+Error: Attempt to add a non-ASCII file name.
+
+This can cause problems if you want to work with people on other platforms.
+
+To be portable it is advisable to rename the file.
+
+If you know what you are doing you can disable this check using:
+
+  git config hooks.allownonascii true
+EOF
+	exit 1
+fi
+
+# If there are whitespace errors, print the offending file names and fail.
+exec git diff-index --check --cached $against --
diff -ruN ../pibooth_local_copy/.git/hooks/pre-merge-commit.sample ./.git/hooks/pre-merge-commit.sample
--- ../pibooth_local_copy/.git/hooks/pre-merge-commit.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-merge-commit.sample	2025-05-16 14:02:33
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
diff -ruN ../pibooth_local_copy/.git/hooks/pre-push.sample ./.git/hooks/pre-push.sample
--- ../pibooth_local_copy/.git/hooks/pre-push.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-push.sample	2025-05-16 14:02:33
@@ -0,0 +1,53 @@
+#!/bin/sh
+
+# An example hook script to verify what is about to be pushed.  Called by "git
+# push" after it has checked the remote status, but before anything has been
+# pushed.  If this script exits with a non-zero status nothing will be pushed.
+#
+# This hook is called with the following parameters:
+#
+# $1 -- Name of the remote to which the push is being done
+# $2 -- URL to which the push is being done
+#
+# If pushing without using a named remote those arguments will be equal.
+#
+# Information about the commits which are being pushed is supplied as lines to
+# the standard input in the form:
+#
+#   <local ref> <local oid> <remote ref> <remote oid>
+#
+# This sample shows how to prevent push of commits where the log message starts
+# with "WIP" (work in progress).
+
+remote="$1"
+url="$2"
+
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+
+while read local_ref local_oid remote_ref remote_oid
+do
+	if test "$local_oid" = "$zero"
+	then
+		# Handle delete
+		:
+	else
+		if test "$remote_oid" = "$zero"
+		then
+			# New branch, examine all commits
+			range="$local_oid"
+		else
+			# Update to existing branch, examine new commits
+			range="$remote_oid..$local_oid"
+		fi
+
+		# Check for WIP commit
+		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
+		if test -n "$commit"
+		then
+			echo >&2 "Found WIP commit in $local_ref, not pushing"
+			exit 1
+		fi
+	fi
+done
+
+exit 0
diff -ruN ../pibooth_local_copy/.git/hooks/pre-rebase.sample ./.git/hooks/pre-rebase.sample
--- ../pibooth_local_copy/.git/hooks/pre-rebase.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-rebase.sample	2025-05-16 14:02:33
@@ -0,0 +1,169 @@
+#!/bin/sh
+#
+# Copyright (c) 2006, 2008 Junio C Hamano
+#
+# The "pre-rebase" hook is run just before "git rebase" starts doing
+# its job, and can prevent the command from running by exiting with
+# non-zero status.
+#
+# The hook is called with the following parameters:
+#
+# $1 -- the upstream the series was forked from.
+# $2 -- the branch being rebased (or empty when rebasing the current branch).
+#
+# This sample shows how to prevent topic branches that are already
+# merged to 'next' branch from getting rebased, because allowing it
+# would result in rebasing already published history.
+
+publish=next
+basebranch="$1"
+if test "$#" = 2
+then
+	topic="refs/heads/$2"
+else
+	topic=`git symbolic-ref HEAD` ||
+	exit 0 ;# we do not interrupt rebasing detached HEAD
+fi
+
+case "$topic" in
+refs/heads/??/*)
+	;;
+*)
+	exit 0 ;# we do not interrupt others.
+	;;
+esac
+
+# Now we are dealing with a topic branch being rebased
+# on top of master.  Is it OK to rebase it?
+
+# Does the topic really exist?
+git show-ref -q "$topic" || {
+	echo >&2 "No such branch $topic"
+	exit 1
+}
+
+# Is topic fully merged to master?
+not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
+if test -z "$not_in_master"
+then
+	echo >&2 "$topic is fully merged to master; better remove it."
+	exit 1 ;# we could allow it, but there is no point.
+fi
+
+# Is topic ever merged to next?  If so you should not be rebasing it.
+only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
+only_next_2=`git rev-list ^master           ${publish} | sort`
+if test "$only_next_1" = "$only_next_2"
+then
+	not_in_topic=`git rev-list "^$topic" master`
+	if test -z "$not_in_topic"
+	then
+		echo >&2 "$topic is already up to date with master"
+		exit 1 ;# we could allow it, but there is no point.
+	else
+		exit 0
+	fi
+else
+	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
+	/usr/bin/perl -e '
+		my $topic = $ARGV[0];
+		my $msg = "* $topic has commits already merged to public branch:\n";
+		my (%not_in_next) = map {
+			/^([0-9a-f]+) /;
+			($1 => 1);
+		} split(/\n/, $ARGV[1]);
+		for my $elem (map {
+				/^([0-9a-f]+) (.*)$/;
+				[$1 => $2];
+			} split(/\n/, $ARGV[2])) {
+			if (!exists $not_in_next{$elem->[0]}) {
+				if ($msg) {
+					print STDERR $msg;
+					undef $msg;
+				}
+				print STDERR " $elem->[1]\n";
+			}
+		}
+	' "$topic" "$not_in_next" "$not_in_master"
+	exit 1
+fi
+
+<<\DOC_END
+
+This sample hook safeguards topic branches that have been
+published from being rewound.
+
+The workflow assumed here is:
+
+ * Once a topic branch forks from "master", "master" is never
+   merged into it again (either directly or indirectly).
+
+ * Once a topic branch is fully cooked and merged into "master",
+   it is deleted.  If you need to build on top of it to correct
+   earlier mistakes, a new topic branch is created by forking at
+   the tip of the "master".  This is not strictly necessary, but
+   it makes it easier to keep your history simple.
+
+ * Whenever you need to test or publish your changes to topic
+   branches, merge them into "next" branch.
+
+The script, being an example, hardcodes the publish branch name
+to be "next", but it is trivial to make it configurable via
+$GIT_DIR/config mechanism.
+
+With this workflow, you would want to know:
+
+(1) ... if a topic branch has ever been merged to "next".  Young
+    topic branches can have stupid mistakes you would rather
+    clean up before publishing, and things that have not been
+    merged into other branches can be easily rebased without
+    affecting other people.  But once it is published, you would
+    not want to rewind it.
+
+(2) ... if a topic branch has been fully merged to "master".
+    Then you can delete it.  More importantly, you should not
+    build on top of it -- other people may already want to
+    change things related to the topic as patches against your
+    "master", so if you need further changes, it is better to
+    fork the topic (perhaps with the same name) afresh from the
+    tip of "master".
+
+Let's look at this example:
+
+		   o---o---o---o---o---o---o---o---o---o "next"
+		  /       /           /           /
+		 /   a---a---b A     /           /
+		/   /               /           /
+	       /   /   c---c---c---c B         /
+	      /   /   /             \         /
+	     /   /   /   b---b C     \       /
+	    /   /   /   /             \     /
+    ---o---o---o---o---o---o---o---o---o---o---o "master"
+
+
+A, B and C are topic branches.
+
+ * A has one fix since it was merged up to "next".
+
+ * B has finished.  It has been fully merged up to "master" and "next",
+   and is ready to be deleted.
+
+ * C has not merged to "next" at all.
+
+We would want to allow C to be rebased, refuse A, and encourage
+B to be deleted.
+
+To compute (1):
+
+	git rev-list ^master ^topic next
+	git rev-list ^master        next
+
+	if these match, topic has not merged in next at all.
+
+To compute (2):
+
+	git rev-list master..topic
+
+	if this is empty, it is fully merged to "master".
+
+DOC_END
diff -ruN ../pibooth_local_copy/.git/hooks/pre-receive.sample ./.git/hooks/pre-receive.sample
--- ../pibooth_local_copy/.git/hooks/pre-receive.sample	1969-12-31 19:00:00
+++ ./.git/hooks/pre-receive.sample	2025-05-16 14:02:33
@@ -0,0 +1,24 @@
+#!/bin/sh
+#
+# An example hook script to make use of push options.
+# The example simply echoes all push options that start with 'echoback='
+# and rejects all pushes when the "reject" push option is used.
+#
+# To enable this hook, rename this file to "pre-receive".
+
+if test -n "$GIT_PUSH_OPTION_COUNT"
+then
+	i=0
+	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
+	do
+		eval "value=\$GIT_PUSH_OPTION_$i"
+		case "$value" in
+		echoback=*)
+			echo "echo from the pre-receive-hook: ${value#*=}" >&2
+			;;
+		reject)
+			exit 1
+		esac
+		i=$((i + 1))
+	done
+fi
diff -ruN ../pibooth_local_copy/.git/hooks/prepare-commit-msg.sample ./.git/hooks/prepare-commit-msg.sample
--- ../pibooth_local_copy/.git/hooks/prepare-commit-msg.sample	1969-12-31 19:00:00
+++ ./.git/hooks/prepare-commit-msg.sample	2025-05-16 14:02:33
@@ -0,0 +1,42 @@
+#!/bin/sh
+#
+# An example hook script to prepare the commit log message.
+# Called by "git commit" with the name of the file that has the
+# commit message, followed by the description of the commit
+# message's source.  The hook's purpose is to edit the commit
+# message file.  If the hook fails with a non-zero status,
+# the commit is aborted.
+#
+# To enable this hook, rename this file to "prepare-commit-msg".
+
+# This hook includes three examples. The first one removes the
+# "# Please enter the commit message..." help message.
+#
+# The second includes the output of "git diff --name-status -r"
+# into the message, just before the "git status" output.  It is
+# commented because it doesn't cope with --amend or with squashed
+# commits.
+#
+# The third example adds a Signed-off-by line to the message, that can
+# still be edited.  This is rarely a good idea.
+
+COMMIT_MSG_FILE=$1
+COMMIT_SOURCE=$2
+SHA1=$3
+
+/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
+
+# case "$COMMIT_SOURCE,$SHA1" in
+#  ,|template,)
+#    /usr/bin/perl -i.bak -pe '
+#       print "\n" . `git diff --cached --name-status -r`
+# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
+#  *) ;;
+# esac
+
+# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
+# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
+# if test -z "$COMMIT_SOURCE"
+# then
+#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
+# fi
diff -ruN ../pibooth_local_copy/.git/hooks/push-to-checkout.sample ./.git/hooks/push-to-checkout.sample
--- ../pibooth_local_copy/.git/hooks/push-to-checkout.sample	1969-12-31 19:00:00
+++ ./.git/hooks/push-to-checkout.sample	2025-05-16 14:02:33
@@ -0,0 +1,78 @@
+#!/bin/sh
+
+# An example hook script to update a checked-out tree on a git push.
+#
+# This hook is invoked by git-receive-pack(1) when it reacts to git
+# push and updates reference(s) in its repository, and when the push
+# tries to update the branch that is currently checked out and the
+# receive.denyCurrentBranch configuration variable is set to
+# updateInstead.
+#
+# By default, such a push is refused if the working tree and the index
+# of the remote repository has any difference from the currently
+# checked out commit; when both the working tree and the index match
+# the current commit, they are updated to match the newly pushed tip
+# of the branch. This hook is to be used to override the default
+# behaviour; however the code below reimplements the default behaviour
+# as a starting point for convenient modification.
+#
+# The hook receives the commit with which the tip of the current
+# branch is going to be updated:
+commit=$1
+
+# It can exit with a non-zero status to refuse the push (when it does
+# so, it must not modify the index or the working tree).
+die () {
+	echo >&2 "$*"
+	exit 1
+}
+
+# Or it can make any necessary changes to the working tree and to the
+# index to bring them to the desired state when the tip of the current
+# branch is updated to the new commit, and exit with a zero status.
+#
+# For example, the hook can simply run git read-tree -u -m HEAD "$1"
+# in order to emulate git fetch that is run in the reverse direction
+# with git push, as the two-tree form of git read-tree -u -m is
+# essentially the same as git switch or git checkout that switches
+# branches while keeping the local changes in the working tree that do
+# not interfere with the difference between the branches.
+
+# The below is a more-or-less exact translation to shell of the C code
+# for the default behaviour for git's push-to-checkout hook defined in
+# the push_to_deploy() function in builtin/receive-pack.c.
+#
+# Note that the hook will be executed from the repository directory,
+# not from the working tree, so if you want to perform operations on
+# the working tree, you will have to adapt your code accordingly, e.g.
+# by adding "cd .." or using relative paths.
+
+if ! git update-index -q --ignore-submodules --refresh
+then
+	die "Up-to-date check failed"
+fi
+
+if ! git diff-files --quiet --ignore-submodules --
+then
+	die "Working directory has unstaged changes"
+fi
+
+# This is a rough translation of:
+#
+#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
+if git cat-file -e HEAD 2>/dev/null
+then
+	head=HEAD
+else
+	head=$(git hash-object -t tree --stdin </dev/null)
+fi
+
+if ! git diff-index --quiet --cached --ignore-submodules $head --
+then
+	die "Working directory has staged changes"
+fi
+
+if ! git read-tree -u -m "$commit"
+then
+	die "Could not update working tree to new HEAD"
+fi
diff -ruN ../pibooth_local_copy/.git/hooks/sendemail-validate.sample ./.git/hooks/sendemail-validate.sample
--- ../pibooth_local_copy/.git/hooks/sendemail-validate.sample	1969-12-31 19:00:00
+++ ./.git/hooks/sendemail-validate.sample	2025-05-16 14:02:33
@@ -0,0 +1,77 @@
+#!/bin/sh
+
+# An example hook script to validate a patch (and/or patch series) before
+# sending it via email.
+#
+# The hook should exit with non-zero status after issuing an appropriate
+# message if it wants to prevent the email(s) from being sent.
+#
+# To enable this hook, rename this file to "sendemail-validate".
+#
+# By default, it will only check that the patch(es) can be applied on top of
+# the default upstream branch without conflicts in a secondary worktree. After
+# validation (successful or not) of the last patch of a series, the worktree
+# will be deleted.
+#
+# The following config variables can be set to change the default remote and
+# remote ref that are used to apply the patches against:
+#
+#   sendemail.validateRemote (default: origin)
+#   sendemail.validateRemoteRef (default: HEAD)
+#
+# Replace the TODO placeholders with appropriate checks according to your
+# needs.
+
+validate_cover_letter () {
+	file="$1"
+	# TODO: Replace with appropriate checks (e.g. spell checking).
+	true
+}
+
+validate_patch () {
+	file="$1"
+	# Ensure that the patch applies without conflicts.
+	git am -3 "$file" || return
+	# TODO: Replace with appropriate checks for this patch
+	# (e.g. checkpatch.pl).
+	true
+}
+
+validate_series () {
+	# TODO: Replace with appropriate checks for the whole series
+	# (e.g. quick build, coding style checks, etc.).
+	true
+}
+
+# main -------------------------------------------------------------------------
+
+if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
+then
+	remote=$(git config --default origin --get sendemail.validateRemote) &&
+	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
+	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
+	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
+	git config --replace-all sendemail.validateWorktree "$worktree"
+else
+	worktree=$(git config --get sendemail.validateWorktree)
+fi || {
+	echo "sendemail-validate: error: failed to prepare worktree" >&2
+	exit 1
+}
+
+unset GIT_DIR GIT_WORK_TREE
+cd "$worktree" &&
+
+if grep -q "^diff --git " "$1"
+then
+	validate_patch "$1"
+else
+	validate_cover_letter "$1"
+fi &&
+
+if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
+then
+	git config --unset-all sendemail.validateWorktree &&
+	trap 'git worktree remove -ff "$worktree"' EXIT &&
+	validate_series
+fi
diff -ruN ../pibooth_local_copy/.git/hooks/update.sample ./.git/hooks/update.sample
--- ../pibooth_local_copy/.git/hooks/update.sample	1969-12-31 19:00:00
+++ ./.git/hooks/update.sample	2025-05-16 14:02:33
@@ -0,0 +1,128 @@
+#!/bin/sh
+#
+# An example hook script to block unannotated tags from entering.
+# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
+#
+# To enable this hook, rename this file to "update".
+#
+# Config
+# ------
+# hooks.allowunannotated
+#   This boolean sets whether unannotated tags will be allowed into the
+#   repository.  By default they won't be.
+# hooks.allowdeletetag
+#   This boolean sets whether deleting tags will be allowed in the
+#   repository.  By default they won't be.
+# hooks.allowmodifytag
+#   This boolean sets whether a tag may be modified after creation. By default
+#   it won't be.
+# hooks.allowdeletebranch
+#   This boolean sets whether deleting branches will be allowed in the
+#   repository.  By default they won't be.
+# hooks.denycreatebranch
+#   This boolean sets whether remotely creating branches will be denied
+#   in the repository.  By default this is allowed.
+#
+
+# --- Command line
+refname="$1"
+oldrev="$2"
+newrev="$3"
+
+# --- Safety check
+if [ -z "$GIT_DIR" ]; then
+	echo "Don't run this script from the command line." >&2
+	echo " (if you want, you could supply GIT_DIR then run" >&2
+	echo "  $0 <ref> <oldrev> <newrev>)" >&2
+	exit 1
+fi
+
+if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
+	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
+	exit 1
+fi
+
+# --- Config
+allowunannotated=$(git config --type=bool hooks.allowunannotated)
+allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
+denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
+allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
+allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
+
+# check for no description
+projectdesc=$(sed -e '1q' "$GIT_DIR/description")
+case "$projectdesc" in
+"Unnamed repository"* | "")
+	echo "*** Project description file hasn't been set" >&2
+	exit 1
+	;;
+esac
+
+# --- Check types
+# if $newrev is 0000...0000, it's a commit to delete a ref.
+zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
+if [ "$newrev" = "$zero" ]; then
+	newrev_type=delete
+else
+	newrev_type=$(git cat-file -t $newrev)
+fi
+
+case "$refname","$newrev_type" in
+	refs/tags/*,commit)
+		# un-annotated tag
+		short_refname=${refname##refs/tags/}
+		if [ "$allowunannotated" != "true" ]; then
+			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
+			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,delete)
+		# delete tag
+		if [ "$allowdeletetag" != "true" ]; then
+			echo "*** Deleting a tag is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/tags/*,tag)
+		# annotated tag
+		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
+		then
+			echo "*** Tag '$refname' already exists." >&2
+			echo "*** Modifying a tag is not allowed in this repository." >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,commit)
+		# branch
+		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
+			echo "*** Creating a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/heads/*,delete)
+		# delete branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	refs/remotes/*,commit)
+		# tracking branch
+		;;
+	refs/remotes/*,delete)
+		# delete tracking branch
+		if [ "$allowdeletebranch" != "true" ]; then
+			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
+			exit 1
+		fi
+		;;
+	*)
+		# Anything else (is there anything else?)
+		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
+		exit 1
+		;;
+esac
+
+# --- Finished
+exit 0
Binary files ../pibooth_local_copy/.git/index and ./.git/index differ
diff -ruN ../pibooth_local_copy/.git/info/exclude ./.git/info/exclude
--- ../pibooth_local_copy/.git/info/exclude	1969-12-31 19:00:00
+++ ./.git/info/exclude	2025-05-16 14:02:33
@@ -0,0 +1,6 @@
+# git ls-files --others --exclude-from=.git/info/exclude
+# Lines that start with '#' are comments.
+# For a project mostly in C, the following would be a good set of
+# exclude patterns (uncomment them if you want to use them):
+# *.[oa]
+# *~
diff -ruN ../pibooth_local_copy/.git/logs/HEAD ./.git/logs/HEAD
--- ../pibooth_local_copy/.git/logs/HEAD	1969-12-31 19:00:00
+++ ./.git/logs/HEAD	2025-05-16 14:02:41
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
diff -ruN ../pibooth_local_copy/.git/logs/refs/heads/master ./.git/logs/refs/heads/master
--- ../pibooth_local_copy/.git/logs/refs/heads/master	1969-12-31 19:00:00
+++ ./.git/logs/refs/heads/master	2025-05-16 14:02:41
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
diff -ruN ../pibooth_local_copy/.git/logs/refs/remotes/origin/HEAD ./.git/logs/refs/remotes/origin/HEAD
--- ../pibooth_local_copy/.git/logs/refs/remotes/origin/HEAD	1969-12-31 19:00:00
+++ ./.git/logs/refs/remotes/origin/HEAD	2025-05-16 14:02:41
@@ -0,0 +1 @@
+0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.idx and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.idx differ
Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.pack and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.pack differ
Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.rev and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.rev differ
diff -ruN ../pibooth_local_copy/.git/packed-refs ./.git/packed-refs
--- ../pibooth_local_copy/.git/packed-refs	1969-12-31 19:00:00
+++ ./.git/packed-refs	2025-05-16 14:02:41
@@ -0,0 +1,37 @@
+# pack-refs with: peeled fully-peeled sorted 
+6d86f2059b90e61e49a4ae97d4df63f5f46fc4a9 refs/remotes/origin/3.x
+978d9137d29749009a0713e64fb2064b87b190f6 refs/remotes/origin/color_layout
+682a87ee4bd4da042ebb4568c2d11a1e02c232b2 refs/remotes/origin/dependabot/pip/pillow-10.3.0
+9b71b1d7a19f80e61f0acfb21e0ed8625d698d80 refs/remotes/origin/libcamera_2.x
+b05f1ec53b092ef4bdf7b3600c92b41581ca9424 refs/remotes/origin/master
+fa5248e23249b28bf7fa4f31b0295b05f6457426 refs/remotes/origin/sony
+9405ea77dc23669f494ed08159bc3684e4592d63 refs/remotes/origin/test-camera
+c9d6f68232e163f24d936a4ede5838380a5dce26 refs/tags/0.0.1
+d69f9c062202d38f8431f0fb5b23e3b69b45c215 refs/tags/0.0.2
+8df742e1cd81ef6e94a3076ce7885cba8fb14228 refs/tags/0.0.3
+868588530a16849196139c015ef91368217882a5 refs/tags/0.0.4
+fe70e8979c29effe2a91260297945a3178cef26f refs/tags/0.0.5
+a107b84120fa53e3f8b3622876df767d562fd636 refs/tags/0.0.6
+968f34b682bd2b7fceff0786db71f76dc94a1279 refs/tags/0.0.7
+ff38d81abe83d9ba743ecc58d37d1fdfd255bbc4 refs/tags/0.0.8
+ee8c047ebb7bf5900d9519071cb96117337efe61 refs/tags/0.0.9
+360d41ac739210a28216b2fc5d592826e883f662 refs/tags/1.0.0
+43c7867017b8b954a33f0c462b861f50c58a4800 refs/tags/1.0.1
+de65b1e43bc227c81f95eb953190d79e49449d7c refs/tags/1.0.2
+1e780c1c0ca9b24c46c2356435647d020c199476 refs/tags/1.0.3
+cc271a15d16effac97c8f391a32b7fe41624d94d refs/tags/1.0.4
+640aafbd1d56c20da167c5977feefa4e773bc951 refs/tags/1.1.0
+111791f0135261c793823bc8199a8e511de83761 refs/tags/1.1.1
+d6895a85f4a8d11cef2f986ffbf3fb14c83fb06d refs/tags/1.1.2
+970f96c22e603aae5bd643641f1454d74fe221a1 refs/tags/1.1.3
+a28c020b075e9814e369ce79b492b970238e577b refs/tags/1.1.4
+7199850c2d657c7d03d38a97b7cd2cd5dd2c1f07 refs/tags/1.2.0
+79c9fc9d6eddd4be0f50287e38b4c644fa52519a refs/tags/2.0.0
+9cdef9ba1480715f682ffbde350e499a69932d6d refs/tags/2.0.1
+c50b5b13aa65768343a0167269cd0d7d41ce3787 refs/tags/2.0.2
+0ae3ca0e82fcb6ebd6cb72169d22ab389a567a09 refs/tags/2.0.3
+f68dc3a39ec4c8c9371d228dbe51e838a6ade8f2 refs/tags/2.0.4
+cfb01762138717d6584a1a0b299dc0481840727a refs/tags/2.0.5
+718060753f1953cfa3b99dc301908fce69278cd0 refs/tags/2.0.6
+19851a161af6a09f8e5554d8ec2eb7194c980972 refs/tags/2.0.7
+126bafce9ba9cd1f5f09151943f98d5f79a059ba refs/tags/2.0.8
diff -ruN ../pibooth_local_copy/.git/refs/heads/master ./.git/refs/heads/master
--- ../pibooth_local_copy/.git/refs/heads/master	1969-12-31 19:00:00
+++ ./.git/refs/heads/master	2025-05-16 14:02:41
@@ -0,0 +1 @@
+b05f1ec53b092ef4bdf7b3600c92b41581ca9424
diff -ruN ../pibooth_local_copy/.git/refs/remotes/origin/HEAD ./.git/refs/remotes/origin/HEAD
--- ../pibooth_local_copy/.git/refs/remotes/origin/HEAD	1969-12-31 19:00:00
+++ ./.git/refs/remotes/origin/HEAD	2025-05-16 14:02:41
@@ -0,0 +1 @@
+ref: refs/remotes/origin/master
diff -ruN ../pibooth_local_copy/.github/FUNDING.yml ./.github/FUNDING.yml
--- ../pibooth_local_copy/.github/FUNDING.yml	1969-12-31 19:00:00
+++ ./.github/FUNDING.yml	2025-05-16 14:02:41
@@ -0,0 +1 @@
+github: PIBOOTH
diff -ruN ../pibooth_local_copy/.github/ISSUE_TEMPLATE/bug_report.md ./.github/ISSUE_TEMPLATE/bug_report.md
--- ../pibooth_local_copy/.github/ISSUE_TEMPLATE/bug_report.md	1969-12-31 19:00:00
+++ ./.github/ISSUE_TEMPLATE/bug_report.md	2025-05-16 14:02:41
@@ -0,0 +1,28 @@
+---
+name: Bug report
+about: Create a report to help us improve
+title: ''
+labels: bug
+assignees: ''
+
+---
+
+**Describe the bug**
+Give a clear and concise description of what the bug is.
+
+**Steps to reproduce the bug**
+1. Go to '...'
+2. Click on '....'
+3. Scroll down to '....'
+4. See error.
+
+**Logs**
+1. Set the `debug` mode in the config
+2. Post your config file
+3. Copy-paste all the logs from the console
+4. Post the `diagnostic.log` file if you are using a DSLR camera (generated by running the command `pibooth-diag`)
+
+**Environment**
+ - OS [e.g. Raspbian Buster]
+ - Camera [e.g. Rpi camera + Nikon D90]
+ - Pibooth version [e.g. 1.1.2]
diff -ruN ../pibooth_local_copy/.github/ISSUE_TEMPLATE/feature_request.md ./.github/ISSUE_TEMPLATE/feature_request.md
--- ../pibooth_local_copy/.github/ISSUE_TEMPLATE/feature_request.md	1969-12-31 19:00:00
+++ ./.github/ISSUE_TEMPLATE/feature_request.md	2025-05-16 14:02:41
@@ -0,0 +1,17 @@
+---
+name: Feature request
+about: Suggest an idea for this project
+title: ''
+labels: enhancement
+assignees: ''
+
+---
+
+**Is your feature request related to a problem? Please describe.**
+A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
+
+**Describe the solution you'd like**
+A clear and concise description of what you want to happen.
+
+**Describe alternatives you've considered**
+A clear and concise description of any alternative solutions or features you've considered.
diff -ruN ../pibooth_local_copy/.github/workflows/tests.yml ./.github/workflows/tests.yml
--- ../pibooth_local_copy/.github/workflows/tests.yml	1969-12-31 19:00:00
+++ ./.github/workflows/tests.yml	2025-05-16 14:02:41
@@ -0,0 +1,49 @@
+# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
+# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
+
+name: tests
+
+on:
+  push:
+    branches: [ "master", "3.x" ]
+  pull_request:
+    branches: [ "master", "3.x" ]
+
+jobs:
+  build:
+
+    runs-on: ubuntu-latest
+    strategy:
+      fail-fast: false
+      matrix:
+        python-version: ["3.8", "3.9", "3.10"]
+
+    steps:
+    - uses: actions/checkout@v3
+    - name: Set up Python ${{ matrix.python-version }}
+      uses: actions/setup-python@v3
+      with:
+        python-version: ${{ matrix.python-version }}
+    - name: Install dependencies
+      run: |
+        python -m pip install --upgrade pip
+        python -m pip install flake8 pytest pylint pytest-cov
+        python -m pip install opencv-python
+        python -m pip install -e .
+    - name: Lint with flake8
+      run: |
+        # stop the build if there are Python syntax errors or undefined names
+        flake8 pibooth --count --select=E9,F63,F7,F82 --show-source --statistics
+        # exit-zero treats all errors as warnings.
+        flake8 pibooth --count --exit-zero --max-complexity=10 --max-line-length=160 --statistics
+    - name: Lint with pylint
+      run: |
+        pylint $(git ls-files '*.py') || echo "pylint exited with $?"
+    - name: Test with pytest
+      env:
+        SDL_VIDEODRIVER: dummy
+        CAM_VIDEODRIVER: dummy
+      run: |
+        pytest --cov pibooth
+    - name: Upload coverage to Codecov
+      uses: codecov/codecov-action@v3
diff -ruN ../pibooth_local_copy/.gitignore ./.gitignore
--- ../pibooth_local_copy/.gitignore	1969-12-31 19:00:00
+++ ./.gitignore	2025-05-16 14:02:41
@@ -0,0 +1,77 @@
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+*.egg-info/
+.installed.cfg
+*.egg
+
+#IDE 
+.idea
+.project
+.pydevproject
+.settings/
+settings.json
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*,cover
+.hypothesis/
+.pytest_cache/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+
+# Flask instance folder
+instance/
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+target/
+
+# IPython Notebook
+.ipynb_checkpoints
+
+# pyenv
+.python-version
+
diff -ruN ../pibooth_local_copy/LICENSE ./LICENSE
--- ../pibooth_local_copy/LICENSE	1969-12-31 19:00:00
+++ ./LICENSE	2025-05-16 14:02:41
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) 2017 Vincent Verdeil and Antoine Rousseaux
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+of the Software, and to permit persons to whom the Software is furnished to do
+so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff -ruN ../pibooth_local_copy/README.rst ./README.rst
--- ../pibooth_local_copy/README.rst	1969-12-31 19:00:00
+++ ./README.rst	2025-05-16 14:02:41
@@ -0,0 +1,106 @@
+|Pibooth|
+
+|PythonVersions| |PypiPackage| |Downloads| |Tests| |Codecov|
+
+The ``pibooth`` project provides a photobooth application *out-of-the-box* in pure Python
+for Raspberry Pi. Have a look to the `wiki <https://github.com/pibooth/pibooth/wiki>`_
+to discover some realizations from GitHub users, and don't hesitate to send us
+photos of your version.
+
+.. image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/images/background_samples.png
+   :align: center
+   :alt: Settings
+
+Features
+--------
+
+* Interface available in Danish, Dutch, English, French, German, Hungarian, Norwegian, Portuguese (Portugal and Brazil), Spanish and Swedish (customizable)
+* Capture from 1 to 4 photos and concatenate them in a final picture
+* Support all cameras compatible with gPhoto2, OpenCV and Raspberry Pi
+* Support for hardware buttons and lamps on Raspberry Pi GPIO
+* Fully driven from hardware buttons / keyboard / mouse / touchscreen
+* Auto-start at the Raspberry Pi startup
+* Animate captures from the last sequence during idle time
+* Store final pictures and the individual captures
+* Printing final pictures using CUPS server (printing queue indication)
+* Custom texts can be added on the final picture (customizable fonts, colors, alignments)
+* Custom background(s) and overlay(s) can be added on the final picture
+* All settings available in a configuration file (most common options in a graphical interface)
+* Highly customizable thanks to its plugin system, you can install
+  `plugins developed by the community from PyPI  <https://pypi.org/search/?q=pibooth>`_
+  or develop your own plugin.
+
+Documentation
+-------------
+
+.. image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/images/documentation.png
+   :align: center
+   :alt: Documentation
+   :target: https://pibooth.readthedocs.io/en/stable
+   :height: 200px
+
+Plugins
+-------
+
+Here is a list of known plugins compatible with Pibooth
+
+Pibooth organisation's plugin
+=============================
+
+- `pibooth-picture-template <https://github.com/pibooth/pibooth-picture-template>`_
+- `pibooth-google-photo <https://github.com/pibooth/pibooth-google-photo>`_
+- `pibooth-sound-effects <https://github.com/pibooth/pibooth-sound-effects>`_
+- `pibooth_dropbox <https://github.com/pibooth/pibooth-dropbox>`_
+- `pibooth-qrcode <https://github.com/pibooth/pibooth-qrcode>`_
+- `pibooth-extra-lights <https://github.com/pibooth/pibooth-extra-lights>`_
+
+Third-party plugins
+===================
+
+Third-party plugins can be found on GitHub or on `plugins on PyPI  <https://pypi.org/search/?q=pibooth>`_.
+Here is a short list:
+
+- `pibooth-lcd-display <https://pypi.org/project/pibooth-lcd-display>`_
+- `pibooth-oled-display <https://pypi.org/project/pibooth-oled-display>`_
+- `pibooth-neopixel_spi <https://github.com/peteoheat/pibooth-neopixel_spi>`_
+- `pibooth-telegram-upload <https://pypi.org/project/pibooth-telegram-upload>`_
+- `pibooth-s3-upload <https://pypi.org/project/pibooth-s3-upload>`_
+
+Sponsors
+--------
+
+An enormous thanks to our sponsors:
+
+- `@andhey <https://github.com/andhey>`_
+- `@vo55 <https://github.com/vo55>`_
+- `@laurammiller <https://github.com/laurammiller>`_
+- `@neilrenfrey <https://github.com/neilrenfrey>`_
+- `@agrovista <https://github.com/agrovista>`_ 
+- `@mozdi <https://github.com/mozdi>`_
+- `@MikkeBoomBoom <https://github.com/MikkeBoomBoom>`_
+- `@fatgeek <https://github.com/fatgeek>`_
+
+It means a lot to us!
+
+.. |Pibooth| image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/pibooth.png
+   :align: middle
+
+.. |PythonVersions| image:: https://img.shields.io/badge/python-3.6+-red.svg
+   :target: https://www.python.org/downloads
+   :alt: Python 3.6+
+
+.. |PypiPackage| image:: https://badge.fury.io/py/pibooth.svg
+   :target: https://pypi.org/project/pibooth
+   :alt: PyPi package
+
+.. |Downloads| image:: https://img.shields.io/pypi/dm/pibooth?color=purple
+   :target: https://pypi.org/project/pibooth
+   :alt: PyPi downloads
+
+.. |Tests| image:: https://github.com/pibooth/pibooth/actions/workflows/tests.yml/badge.svg?branch=master
+   :target: https://github.com/pibooth/pibooth/actions/workflows/tests.yml?query=branch%3Amaster
+   :alt: Tests
+
+.. |Codecov| image:: https://codecov.io/gh/pibooth/pibooth/branch/master/graph/badge.svg
+    :target: https://codecov.io/gh/pibooth/pibooth
+    :alt: Codecov
diff -ruN ../pibooth_local_copy/__init__.py ./__init__.py
--- ../pibooth_local_copy/__init__.py	2025-05-16 13:26:44
+++ ./__init__.py	1969-12-31 19:00:00
@@ -1,15 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""A photo booth application in pure Python for the Raspberry Pi."""
-
-__version__ = "2.0.8"
-
-try:
-
-    import pluggy
-
-    # Marker to be imported and used in plugins (and for own implementations)
-    hookimpl = pluggy.HookimplMarker('pibooth')
-
-except ImportError:
-    pass  # When running the setup.py, pluggy is not yet installed
Binary files ../pibooth_local_copy/__pycache__/__init__.cpython-37.pyc and ./__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/booth.cpython-37.pyc and ./__pycache__/booth.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/counters.cpython-37.pyc and ./__pycache__/counters.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/language.cpython-37.pyc and ./__pycache__/language.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/printer.cpython-37.pyc and ./__pycache__/printer.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/states.cpython-37.pyc and ./__pycache__/states.cpython-37.pyc differ
Binary files ../pibooth_local_copy/__pycache__/utils.cpython-37.pyc and ./__pycache__/utils.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/booth.py ./booth.py
--- ../pibooth_local_copy/booth.py	2025-05-16 13:26:44
+++ ./booth.py	1969-12-31 19:00:00
@@ -1,495 +0,0 @@
-#!/usr/bin/env python3
-# -*- coding: utf-8 -*-
-
-"""Pibooth main module.
-"""
-
-import os
-import os.path as osp
-import tempfile
-import shutil
-import logging
-import argparse
-import multiprocessing
-from warnings import filterwarnings
-
-import pygame
-from gpiozero import Device, ButtonBoard, LEDBoard, pi_info
-from gpiozero.exc import BadPinFactory, PinFactoryFallback
-
-import pibooth
-from pibooth import fonts
-from pibooth import language
-from pibooth.counters import Counters
-from pibooth.utils import (LOGGER, PoolingTimer, configure_logging, get_crash_message,
-                           set_logging_level, get_event_pos)
-from pibooth.states import StateMachine
-from pibooth.plugins import create_plugin_manager
-from pibooth.view import PiWindow
-from pibooth.config import PiConfigParser, PiConfigMenu
-from pibooth.printer import PRINTER_TASKS_UPDATED, Printer
-
-
-# Set the default pin factory to a mock factory if pibooth is not started a Raspberry Pi
-try:
-    filterwarnings("ignore", category=PinFactoryFallback)
-    GPIO_INFO = "on Raspberry pi {0}".format(pi_info().model)
-except BadPinFactory:
-    from gpiozero.pins.mock import MockFactory
-    Device.pin_factory = MockFactory()
-    GPIO_INFO = "without physical GPIO, fallback to GPIO mock"
-
-
-BUTTONDOWN = pygame.USEREVENT + 1
-
-
-class PiApplication(object):
-
-    """Main class representing the ``pibooth`` software.
-    The following attributes are available for use in plugins:
-
-    :attr capture_nbr: number of capture to be done in the current sequence
-    :type capture_nbr: int
-    :attr capture_date: date (%Y-%m-%d-%H-%M-%S) of the first capture of the current sequence
-    :type capture_date: str
-    :attr capture_choices: possible choices of captures numbers.
-    :type capture_choices: tuple
-    :attr previous_picture: picture generated during last sequence
-    :type previous_picture: :py:class:`PIL.Image`
-    :attr previous_animated: infinite list of picture to display during animation
-    :type previous_animated: :py:func:`itertools.cycle`
-    :attr previous_picture_file: file name of the picture generated during last sequence
-    :type previous_picture_file: str
-    :attr count: holder for counter values
-    :type count: :py:class:`pibooth.counters.Counters`
-    :attr camera: camera used
-    :type camera: :py:class:`pibooth.camera.base.BaseCamera`
-    :attr buttons: access to hardware buttons ``capture`` and ``printer``
-    :type buttons: :py:class:`gpiozero.ButtonBoard`
-    :attr leds: access to hardware LED ``capture`` and ``printer``
-    :attr leds: :py:class:`gpiozero.LEDBoard`
-    :attr printer: printer used
-    :type printer: :py:class:`pibooth.printer.Printer`
-    """
-
-    def __init__(self, config, plugin_manager):
-        self._pm = plugin_manager
-        self._config = config
-
-        # Create directories where pictures are saved
-        for savedir in config.gettuple('GENERAL', 'directory', 'path'):
-            if osp.isdir(savedir) and config.getboolean('GENERAL', 'debug'):
-                shutil.rmtree(savedir)
-            if not osp.isdir(savedir):
-                os.makedirs(savedir)
-
-        # Create window of (width, height)
-        init_size = self._config.gettyped('WINDOW', 'size')
-        init_debug = self._config.getboolean('GENERAL', 'debug')
-        init_color = self._config.gettyped('WINDOW', 'background')
-        init_text_color = self._config.gettyped('WINDOW', 'text_color')
-        if not isinstance(init_color, (tuple, list)):
-            init_color = self._config.getpath('WINDOW', 'background')
-
-        title = 'Pibooth v{}'.format(pibooth.__version__)
-        if not isinstance(init_size, str):
-            self._window = PiWindow(title, init_size, color=init_color,
-                                    text_color=init_text_color, debug=init_debug)
-        else:
-            self._window = PiWindow(title, color=init_color,
-                                    text_color=init_text_color, debug=init_debug)
-
-        self._menu = None
-        self._multipress_timer = PoolingTimer(config.getfloat('CONTROLS', 'multi_press_delay'), False)
-        self._fingerdown_events = []
-
-        # Define states of the application
-        self._machine = StateMachine(self._pm, self._config, self, self._window)
-        self._machine.add_state('wait')
-        self._machine.add_state('choose')
-        self._machine.add_state('chosen')
-        self._machine.add_state('preview')
-        self._machine.add_state('capture')
-        self._machine.add_state('processing')
-        self._machine.add_state('print')
-        self._machine.add_state('finish')
-
-        # ---------------------------------------------------------------------
-        # Variables shared with plugins
-        # Change them may break plugins compatibility
-        self.capture_nbr = None
-        self.capture_date = None
-        self.capture_choices = (4, 1)
-        self.previous_picture = None
-        self.previous_animated = None
-        self.previous_picture_file = None
-
-        self.count = Counters(self._config.join_path("counters.pickle"),
-                              taken=0, printed=0, forgotten=0,
-                              remaining_duplicates=self._config.getint('PRINTER', 'max_duplicates'))
-
-        self.camera = self._pm.hook.pibooth_setup_camera(cfg=self._config)
-
-        self.buttons = ButtonBoard(capture="BOARD" + config.get('CONTROLS', 'picture_btn_pin'),
-                                   printer="BOARD" + config.get('CONTROLS', 'print_btn_pin'),
-                                   hold_time=config.getfloat('CONTROLS', 'debounce_delay'),
-                                   pull_up=True)
-        self.buttons.capture.when_held = self._on_button_capture_held
-        self.buttons.printer.when_held = self._on_button_printer_held
-
-        self.leds = LEDBoard(capture="BOARD" + config.get('CONTROLS', 'picture_led_pin'),
-                             printer="BOARD" + config.get('CONTROLS', 'print_led_pin'))
-
-        self.printer = Printer(config.get('PRINTER', 'printer_name'),
-                               config.getint('PRINTER', 'max_pages'),
-                               config.gettyped('PRINTER', 'printer_options'),
-                               self.count)
-        # ---------------------------------------------------------------------
-
-    def _initialize(self):
-        """Restore the application with initial parameters defined in the
-        configuration file.
-        Only parameters that can be changed at runtime are restored.
-        """
-        # Handle the language configuration
-        language.CURRENT = self._config.get('GENERAL', 'language')
-        fonts.CURRENT = fonts.get_filename(self._config.get('WINDOW', 'font'))
-
-        # Set the captures choices
-        choices = self._config.gettuple('PICTURE', 'captures', int)
-        for chx in choices:
-            if chx not in [1, 2, 3, 4]:
-                LOGGER.warning("Invalid captures number '%s' in config, fallback to '%s'",
-                               chx, self.capture_choices)
-                choices = self.capture_choices
-                break
-        self.capture_choices = choices
-
-        # Handle autostart of the application
-        self._config.handle_autostart()
-
-        self._window.arrow_location = self._config.get('WINDOW', 'arrows')
-        self._window.arrow_offset = self._config.getint('WINDOW', 'arrows_x_offset')
-        self._window.text_color = self._config.gettyped('WINDOW', 'text_color')
-        self._window.drop_cache()
-
-        # Handle window size
-        size = self._config.gettyped('WINDOW', 'size')
-        if isinstance(size, str) and size.lower() == 'fullscreen':
-            if not self._window.is_fullscreen:
-                self._window.toggle_fullscreen()
-        else:
-            if self._window.is_fullscreen:
-                self._window.toggle_fullscreen()
-        self._window.debug = self._config.getboolean('GENERAL', 'debug')
-
-        # Handle debug mode
-        if not self._config.getboolean('GENERAL', 'debug'):
-            set_logging_level()  # Restore default level
-            self._machine.add_failsafe_state('failsafe')
-        else:
-            set_logging_level(logging.DEBUG)
-            self._machine.remove_state('failsafe')
-
-        # Reset the print counter (in case of max_pages is reached)
-        self.printer.max_pages = self._config.getint('PRINTER', 'max_pages')
-
-    def _on_button_capture_held(self):
-        """Called when the capture button is pressed.
-        """
-        if all(self.buttons.value):
-            self.buttons.capture.hold_repeat = True
-            if self._multipress_timer.elapsed() == 0:
-                self._multipress_timer.start()
-            if self._multipress_timer.is_timeout():
-                # Capture was held while printer was pressed
-                if self._menu and self._menu.is_shown():
-                    # Convert HW button events to keyboard events for menu
-                    event = self._menu.create_back_event()
-                    LOGGER.debug("BUTTONDOWN: generate MENU-ESC event")
-                else:
-                    event = pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
-                                               button=self.buttons)
-                    LOGGER.debug("BUTTONDOWN: generate DOUBLE buttons event")
-                self.buttons.capture.hold_repeat = False
-                self._multipress_timer.reset()
-                pygame.event.post(event)
-        else:
-            # Capture was held but printer not pressed
-            if self._menu and self._menu.is_shown():
-                # Convert HW button events to keyboard events for menu
-                event = self._menu.create_next_event()
-                LOGGER.debug("BUTTONDOWN: generate MENU-NEXT event")
-            else:
-                event = pygame.event.Event(BUTTONDOWN, capture=1, printer=0,
-                                           button=self.buttons.capture)
-                LOGGER.debug("BUTTONDOWN: generate CAPTURE button event")
-            self.buttons.capture.hold_repeat = False
-            self._multipress_timer.reset()
-            pygame.event.post(event)
-
-    def _on_button_printer_held(self):
-        """Called when the printer button is pressed.
-        """
-        if all(self.buttons.value):
-            # Printer was held while capture was pressed
-            # but don't do anything here, let capture_held handle it instead
-            pass
-        else:
-            # Printer was held but capture not pressed
-            if self._menu and self._menu.is_shown():
-                # Convert HW button events to keyboard events for menu
-                event = self._menu.create_click_event()
-                LOGGER.debug("BUTTONDOWN: generate MENU-APPLY event")
-            else:
-                event = pygame.event.Event(BUTTONDOWN, capture=0, printer=1,
-                                           button=self.buttons.printer)
-                LOGGER.debug("BUTTONDOWN: generate PRINTER event")
-            pygame.event.post(event)
-
-    @property
-    def picture_filename(self):
-        """Return the final picture file name.
-        """
-        if not self.capture_date:
-            raise EnvironmentError("The 'capture_date' attribute is not set yet")
-        return "{}_pibooth.jpg".format(self.capture_date)
-
-    def find_quit_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.QUIT:
-                return event
-        return None
-
-    def find_settings_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
-                return event
-            if event.type == BUTTONDOWN and event.capture and event.printer:
-                return event
-            if event.type == pygame.FINGERDOWN:
-                # Press but not release
-                self._fingerdown_events.append(event)
-            if event.type == pygame.FINGERUP:
-                # Resetting touch_events
-                self._fingerdown_events = []
-            if len(self._fingerdown_events) > 3:
-                # 4 fingers on the screen trigger the menu
-                self._fingerdown_events = []
-                return pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
-                                          button=self.buttons)
-        return None
-
-    def find_fullscreen_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.KEYDOWN and \
-                    event.key == pygame.K_f and pygame.key.get_mods() & pygame.KMOD_CTRL:
-                return event
-        return None
-
-    def find_resize_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.VIDEORESIZE:
-                return event
-        return None
-
-    def find_capture_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.KEYDOWN and event.key == pygame.K_p:
-                return event
-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
-                pos = get_event_pos(self._window.display_size, event)
-                rect = self._window.get_rect()
-                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
-                    return event
-            if event.type == BUTTONDOWN and event.capture:
-                return event
-        return None
-
-    def find_print_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.KEYDOWN and event.key == pygame.K_e\
-                    and pygame.key.get_mods() & pygame.KMOD_CTRL:
-                return event
-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
-                pos = get_event_pos(self._window.display_size, event)
-                rect = self._window.get_rect()
-                if pygame.Rect(rect.width // 2, 0, rect.width // 2, rect.height).collidepoint(pos):
-                    return event
-            if event.type == BUTTONDOWN and event.printer:
-                return event
-        return None
-
-    def find_print_status_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == PRINTER_TASKS_UPDATED:
-                return event
-        return None
-
-    def find_choice_event(self, events):
-        """Return the first found event if found in the list.
-        """
-        for event in events:
-            if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
-                return event
-            if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
-                return event
-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
-                pos = get_event_pos(self._window.display_size, event)
-                rect = self._window.get_rect()
-                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
-                    event.key = pygame.K_LEFT
-                else:
-                    event.key = pygame.K_RIGHT
-                return event
-            if event.type == BUTTONDOWN:
-                if event.capture:
-                    event.key = pygame.K_LEFT
-                else:
-                    event.key = pygame.K_RIGHT
-                return event
-        return None
-
-    def main_loop(self):
-        try:
-            fps = 40
-            clock = pygame.time.Clock()
-            self._initialize()
-            self._pm.hook.pibooth_startup(cfg=self._config, app=self)
-            self._machine.set_state('wait')
-
-            while True:
-                events = list(pygame.event.get())
-
-                if self.find_quit_event(events):
-                    break
-
-                if self.find_fullscreen_event(events):
-                    self._window.toggle_fullscreen()
-
-                event = self.find_resize_event(events)
-                if event:
-                    self._window.resize(event.size)
-
-                if not self._menu and self.find_settings_event(events):
-                    self.camera.stop_preview()
-                    self.leds.off()
-                    self._menu = PiConfigMenu(self._pm, self._config, self, self._window)
-                    self._menu.show()
-                    self.leds.blink(on_time=0.1, off_time=1)
-                elif self._menu and self._menu.is_shown():
-                    self._menu.process(events)
-                elif self._menu and not self._menu.is_shown():
-                    self.leds.off()
-                    self._initialize()
-                    self._machine.set_state('wait')
-                    self._menu = None
-                else:
-                    self._machine.process(events)
-
-                pygame.display.update()
-                clock.tick(fps)  # Ensure the program will never run at more than <fps> frames per second
-
-        except Exception as ex:
-            LOGGER.error(str(ex), exc_info=True)
-            LOGGER.error(get_crash_message())
-        finally:
-            self._pm.hook.pibooth_cleanup(app=self)
-            pygame.quit()
-
-
-def main():
-    """Application entry point.
-    """
-    if hasattr(multiprocessing, 'set_start_method'):
-        # Avoid use 'fork': safely forking a multithreaded process is problematic
-        multiprocessing.set_start_method('spawn')
-
-    parser = argparse.ArgumentParser(usage="%(prog)s [options]", description=pibooth.__doc__)
-
-    parser.add_argument("config_directory", nargs='?', default="~/.config/pibooth",
-                        help=u"path to configuration directory (default: %(default)s)")
-
-    parser.add_argument('--version', action='version', version=pibooth.__version__,
-                        help=u"show program's version number and exit")
-
-    parser.add_argument("--config", action='store_true',
-                        help=u"edit the current configuration and exit")
-
-    parser.add_argument("--translate", action='store_true',
-                        help=u"edit the GUI translations and exit")
-
-    parser.add_argument("--reset", action='store_true',
-                        help=u"restore the default configuration/translations and exit")
-
-    parser.add_argument("--nolog", action='store_true', default=False,
-                        help=u"don't save console output in a file (avoid filling the /tmp directory)")
-
-    group = parser.add_mutually_exclusive_group()
-    group.add_argument("-v", "--verbose", dest='logging', action='store_const', const=logging.DEBUG,
-                       help=u"report more information about operations", default=logging.INFO)
-    group.add_argument("-q", "--quiet", dest='logging', action='store_const', const=logging.WARNING,
-                       help=u"report only errors and warnings", default=logging.INFO)
-
-    options = parser.parse_args()
-
-    if not options.nolog:
-        filename = osp.join(tempfile.gettempdir(), 'pibooth.log')
-    else:
-        filename = None
-    configure_logging(options.logging, '[ %(levelname)-8s] %(name)-18s: %(message)s', filename=filename)
-
-    plugin_manager = create_plugin_manager()
-
-    # Load the configuration
-    config = PiConfigParser(osp.join(options.config_directory, "pibooth.cfg"), plugin_manager, not options.reset)
-
-    # Register plugins
-    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
-                                    config.gettuple('GENERAL', 'plugins_disabled', str))
-    LOGGER.info("Installed plugins: %s", ", ".join(
-        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()]))
-
-    # Load the languages
-    language.init(config.join_path("translations.cfg"), options.reset)
-
-    # Update configuration with plugins ones
-    plugin_manager.hook.pibooth_configure(cfg=config)
-
-    # Ensure config files are present in case of first pibooth launch
-    if not options.reset:
-        if not osp.isfile(config.filename):
-            config.save(default=True)
-        plugin_manager.hook.pibooth_reset(cfg=config, hard=False)
-
-    if options.config:
-        LOGGER.info("Editing the pibooth configuration...")
-        config.edit()
-    elif options.translate:
-        LOGGER.info("Editing the GUI translations...")
-        language.edit()
-    elif options.reset:
-        config.save(default=True)
-        plugin_manager.hook.pibooth_reset(cfg=config, hard=True)
-    else:
-        LOGGER.info("Starting the photo booth application %s", GPIO_INFO)
-        app = PiApplication(config, plugin_manager)
-        app.main_loop()
-
-
-if __name__ == '__main__':
-    main()
diff -ruN ../pibooth_local_copy/camera/__init__.py ./camera/__init__.py
--- ../pibooth_local_copy/camera/__init__.py	2025-05-16 13:26:45
+++ ./camera/__init__.py	1969-12-31 19:00:00
@@ -1,52 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from pibooth.utils import LOGGER
-from pibooth.camera.rpi import RpiCamera, get_rpi_camera_proxy
-from pibooth.camera.gphoto import GpCamera, get_gp_camera_proxy
-from pibooth.camera.opencv import CvCamera, get_cv_camera_proxy
-from pibooth.camera.hybrid import HybridRpiCamera, HybridCvCamera
-
-
-def close_proxy(rpi_cam_proxy, gp_cam_proxy, cv_cam_proxy):
-    """Close proxy drivers.
-    """
-    if rpi_cam_proxy:
-        RpiCamera(rpi_cam_proxy).quit()
-    if gp_cam_proxy:
-        GpCamera(gp_cam_proxy).quit()
-    if cv_cam_proxy:
-        CvCamera(cv_cam_proxy).quit()
-
-
-def find_camera():
-    """Initialize the camera depending of the connected one. The priority order
-    is chosen in order to have best rendering during preview and to take captures.
-    The gPhoto2 camera is first (drivers most restrictive) to avoid connection
-    concurence in case of DSLR compatible with OpenCV.
-    """
-    rpi_cam_proxy = get_rpi_camera_proxy()
-    gp_cam_proxy = get_gp_camera_proxy()
-    cv_cam_proxy = get_cv_camera_proxy()
-
-    if rpi_cam_proxy and gp_cam_proxy:
-        LOGGER.info("Configuring hybrid camera (Picamera + gPhoto2) ...")
-        close_proxy(None, None, cv_cam_proxy)
-        return HybridRpiCamera(rpi_cam_proxy, gp_cam_proxy)
-    elif cv_cam_proxy and gp_cam_proxy:
-        LOGGER.info("Configuring hybrid camera (OpenCV + gPhoto2) ...")
-        close_proxy(rpi_cam_proxy, None, None)
-        return HybridCvCamera(cv_cam_proxy, gp_cam_proxy)
-    elif gp_cam_proxy:
-        LOGGER.info("Configuring gPhoto2 camera ...")
-        close_proxy(rpi_cam_proxy, None, cv_cam_proxy)
-        return GpCamera(gp_cam_proxy)
-    elif rpi_cam_proxy:
-        LOGGER.info("Configuring Picamera camera ...")
-        close_proxy(None, gp_cam_proxy, cv_cam_proxy)
-        return RpiCamera(rpi_cam_proxy)
-    elif cv_cam_proxy:
-        LOGGER.info("Configuring OpenCV camera ...")
-        close_proxy(rpi_cam_proxy, gp_cam_proxy, None)
-        return CvCamera(cv_cam_proxy)
-
-    raise EnvironmentError("Neither Raspberry Pi nor GPhoto2 nor OpenCV camera detected")
Binary files ../pibooth_local_copy/camera/__pycache__/__init__.cpython-37.pyc and ./camera/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/camera/__pycache__/base.cpython-37.pyc and ./camera/__pycache__/base.cpython-37.pyc differ
Binary files ../pibooth_local_copy/camera/__pycache__/gphoto.cpython-37.pyc and ./camera/__pycache__/gphoto.cpython-37.pyc differ
Binary files ../pibooth_local_copy/camera/__pycache__/hybrid.cpython-37.pyc and ./camera/__pycache__/hybrid.cpython-37.pyc differ
Binary files ../pibooth_local_copy/camera/__pycache__/opencv.cpython-37.pyc and ./camera/__pycache__/opencv.cpython-37.pyc differ
Binary files ../pibooth_local_copy/camera/__pycache__/rpi.cpython-37.pyc and ./camera/__pycache__/rpi.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/camera/base.py ./camera/base.py
--- ../pibooth_local_copy/camera/base.py	2025-05-16 13:26:45
+++ ./camera/base.py	1969-12-31 19:00:00
@@ -1,134 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import pygame
-from PIL import Image, ImageDraw
-
-from pibooth import fonts
-from pibooth.pictures import sizing
-
-
-class BaseCamera(object):
-
-    def __init__(self, camera_proxy):
-        self._cam = camera_proxy
-        self._border = 50
-        self._window = None
-        self._overlay = None
-        self._captures = []
-
-        self.resolution = None
-        self.delete_internal_memory = False
-        self.preview_rotation, self.capture_rotation = (0, 0)
-        self.preview_iso, self.capture_iso = (100, 100)
-        self.preview_flip, self.capture_flip = (False, False)
-
-    def initialize(self, iso, resolution, rotation=0, flip=False, delete_internal_memory=False):
-        """Initialize the camera.
-        """
-        if not isinstance(rotation, (tuple, list)):
-            rotation = (rotation, rotation)
-        self.preview_rotation, self.capture_rotation = rotation
-        for name in ('preview', 'capture'):
-            rotation = getattr(self, '{}_rotation'.format(name))
-            if rotation not in (0, 90, 180, 270):
-                raise ValueError(
-                    "Invalid {} camera rotation value '{}' (should be 0, 90, 180 or 270)".format(name, rotation))
-        self.resolution = resolution
-        self.capture_flip = flip
-        if not isinstance(iso, (tuple, list)):
-            iso = (iso, iso)
-        self.preview_iso, self.capture_iso = iso
-        self.delete_internal_memory = delete_internal_memory
-        self._specific_initialization()
-
-    def _specific_initialization(self):
-        """Specific camera initialization.
-        """
-        pass
-
-    def _show_overlay(self, text, alpha):
-        """Add an image as an overlay.
-        """
-        self._overlay = text
-
-    def _hide_overlay(self):
-        """Remove any existing overlay.
-        """
-        if self._overlay is not None:
-            self._overlay = None
-
-    def _post_process_capture(self, capture_data):
-        """Rework and return a PIL Image object from capture data.
-        """
-        raise NotImplementedError
-
-    def get_rect(self, max_size=None):
-        """Return a Rect object (as defined in pygame) for resizing preview and images
-        in order to fit to the defined window.
-        """
-        rect = self._window.get_rect(absolute=True)
-        size = (rect.width - 2 * self._border, rect.height - 2 * self._border)
-        if max_size:
-            size = (min(size[0], max_size[0]), min(size[1], max_size[1]))
-        res = sizing.new_size_keep_aspect_ratio(self.resolution, size)
-        return pygame.Rect(rect.centery - res[0] // 2, rect.centerx - res[1] // 2, res[0], res[1])
-
-    def build_overlay(self, size, text, alpha):
-        """Return a PIL image with the given text that can be used
-        as an overlay for the camera.
-        """
-        image = Image.new('RGBA', size)
-        draw = ImageDraw.Draw(image)
-
-        font = fonts.get_pil_font(text, fonts.CURRENT, 0.9 * size[0], 0.9 * size[1])
-        txt_width, txt_height = draw.textsize(text, font=font)
-
-        position = ((size[0] - txt_width) // 2, (size[1] - txt_height) // 2 - size[1] // 10)
-        draw.text(position, text, (255, 255, 255, alpha), font=font)
-        return image
-
-    def preview(self, window, flip=True):
-        """Setup the preview.
-        """
-        raise NotImplementedError
-
-    def preview_countdown(self, timeout, alpha=60):
-        """Show a countdown of `timeout` seconds on the preview.
-        Returns when the countdown is finished.
-        """
-        raise NotImplementedError
-
-    def preview_wait(self, timeout, alpha=60):
-        """Wait the given time and let doing the job.
-        Returns when the timeout is reached.
-        """
-        raise NotImplementedError
-
-    def stop_preview(self):
-        """Stop the preview.
-        """
-        raise NotImplementedError
-
-    def capture(self, effect=None):
-        """Capture a new picture.
-        """
-        raise NotImplementedError
-
-    def get_captures(self):
-        """Return all buffered captures as PIL images (buffer dropped after call).
-        """
-        images = []
-        for data in self._captures:
-            images.append(self._post_process_capture(data))
-        self.drop_captures()
-        return images
-
-    def drop_captures(self):
-        """Delete all buffered captures.
-        """
-        self._captures.clear()
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        raise NotImplementedError
diff -ruN ../pibooth_local_copy/camera/gphoto.py ./camera/gphoto.py
--- ../pibooth_local_copy/camera/gphoto.py	2025-05-16 13:26:45
+++ ./camera/gphoto.py	1969-12-31 19:00:00
@@ -1,311 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import io
-import time
-import pygame
-try:
-    import gphoto2 as gp
-except ImportError:
-    gp = None  # gphoto2 is optional
-from PIL import Image, ImageFilter
-from pibooth.pictures import sizing
-from pibooth.utils import LOGGER, PoolingTimer, pkill
-from pibooth.language import get_translated_text
-from pibooth.camera.base import BaseCamera
-
-
-def get_gp_camera_proxy(port=None):
-    """Return camera proxy if a gPhoto2 compatible camera is found
-    else return None.
-
-    .. note:: try to kill any process using gPhoto2 as it may block camera access.
-
-    :param port: look on given port number
-    :type port: str
-    """
-    if not gp:
-        return None  # gPhoto2 is not installed
-
-    pkill('*gphoto2*')
-    if hasattr(gp, 'gp_camera_autodetect'):
-        # gPhoto2 version 2.5+
-        cameras = gp.check_result(gp.gp_camera_autodetect())
-    else:
-        port_info_list = gp.PortInfoList()
-        port_info_list.load()
-        abilities_list = gp.CameraAbilitiesList()
-        abilities_list.load()
-        cameras = abilities_list.detect(port_info_list)
-    if cameras:
-        LOGGER.debug("Found gPhoto2 cameras on ports: '%s'", "' / '".join([p for _, p in cameras]))
-        # Initialize first camera proxy and return it
-        camera = gp.Camera()
-        if port is not None:
-            port_info_list = gp.PortInfoList()
-            port_info_list.load()
-            idx = port_info_list.lookup_path(port)
-            camera.set_port_info(port_info_list[idx])
-
-        try:
-            camera.init()
-            return camera
-        except gp.GPhoto2Error as ex:
-            LOGGER.warning("Could not connect gPhoto2 camera: %s", ex)
-
-    return None
-
-
-def gp_log_callback(level, domain, string, data=None):
-    """Logging callback for gphoto2.
-    """
-    LOGGER.getChild('gphoto2').debug(domain.decode("utf-8") + u': ' + string.decode("utf-8"))
-
-
-class GpCamera(BaseCamera):
-
-    """gPhoto2 camera management.
-    """
-
-    IMAGE_EFFECTS = [u'none',
-                     u'blur',
-                     u'contour',
-                     u'detail',
-                     u'edge_enhance',
-                     u'edge_enhance_more',
-                     u'emboss',
-                     u'find_edges',
-                     u'smooth',
-                     u'smooth_more',
-                     u'sharpen']
-
-    def __init__(self, camera_proxy):
-        super(GpCamera, self).__init__(camera_proxy)
-        self._gp_logcb = None
-        self._preview_compatible = True
-        self._preview_viewfinder = False
-
-    def _specific_initialization(self):
-        """Camera initialization.
-        """
-        self._gp_logcb = gp.check_result(gp.gp_log_add_func(gp.GP_LOG_VERBOSE, gp_log_callback))
-        abilities = self._cam.get_abilities()
-        self._preview_compatible = gp.GP_OPERATION_CAPTURE_PREVIEW ==\
-            abilities.operations & gp.GP_OPERATION_CAPTURE_PREVIEW
-        if not self._preview_compatible:
-            LOGGER.warning("The connected DSLR camera is not compatible with preview")
-        else:
-            try:
-                self.get_config_value('actions', 'viewfinder')
-                self._preview_viewfinder = True
-            except ValueError:
-                self._preview_viewfinder = False
-
-        self.set_config_value('imgsettings', 'iso', self.preview_iso)
-        self.set_config_value('settings', 'capturetarget', 'Memory card')
-
-    def _show_overlay(self, text, alpha):
-        """Add an image as an overlay.
-        """
-        if self._window:  # No window means no preview displayed
-            rect = self.get_rect()
-            self._overlay = self.build_overlay((rect.width, rect.height), str(text), alpha)
-
-    def _rotate_image(self, image, rotation):
-        """Rotate a PIL image, same direction than RpiCamera.
-        """
-        if rotation == 90:
-            return image.transpose(Image.ROTATE_90)
-        elif rotation == 180:
-            return image.transpose(Image.ROTATE_180)
-        elif rotation == 270:
-            return image.transpose(Image.ROTATE_270)
-        return image
-
-    def _get_preview_image(self):
-        """Capture a new preview image.
-        """
-        rect = self.get_rect()
-        if self._preview_compatible:
-            cam_file = self._cam.capture_preview()
-            image = Image.open(io.BytesIO(cam_file.get_data_and_size()))
-            image = self._rotate_image(image, self.preview_rotation)
-            # Crop to keep aspect ratio of the resolution
-            image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
-            # Resize to fit the available space in the window
-            image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, (rect.width, rect.height), 'outer'))
-
-            if self.preview_flip:
-                image = image.transpose(Image.FLIP_LEFT_RIGHT)
-        else:
-            image = Image.new('RGB', (rect.width, rect.height), color=(0, 0, 0))
-
-        if self._overlay:
-            image.paste(self._overlay, (0, 0), self._overlay)
-        return image
-
-    def _post_process_capture(self, capture_data):
-        """Rework capture data.
-
-        :param capture_data: couple (GPhotoPath, effect)
-        :type capture_data: tuple
-        """
-        gp_path, effect = capture_data
-        camera_file = self._cam.file_get(gp_path.folder, gp_path.name, gp.GP_FILE_TYPE_NORMAL)
-        if self.delete_internal_memory:
-            LOGGER.debug("Delete capture '%s' from internal memory", gp_path.name)
-            self._cam.file_delete(gp_path.folder, gp_path.name)
-        image = Image.open(io.BytesIO(camera_file.get_data_and_size()))
-        image = self._rotate_image(image, self.capture_rotation)
-
-        # Crop to keep aspect ratio of the resolution
-        image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
-        # Resize to fit the resolution
-        image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, self.resolution, 'outer'))
-
-        if self.capture_flip:
-            image = image.transpose(Image.FLIP_LEFT_RIGHT)
-
-        if effect != 'none':
-            image = image.filter(getattr(ImageFilter, effect.upper()))
-
-        return image
-
-    def set_config_value(self, section, option, value):
-        """Set camera configuration.
-        """
-        try:
-            LOGGER.debug('Setting option %s/%s=%s', section, option, value)
-            config = self._cam.get_config()
-            child = config.get_child_by_name(section).get_child_by_name(option)
-            if child.get_type() == gp.GP_WIDGET_RADIO:
-                choices = [c for c in child.get_choices()]
-            else:
-                choices = None
-            data_type = type(child.get_value())
-            value = data_type(value)  # Cast value
-            if choices and value not in choices:
-                if value == 'Memory card' and 'card' in choices:
-                    value = 'card'  # Fix for Sony ZV-1
-                elif value == 'Memory card' and 'card+sdram' in choices:
-                    value = 'card+sdram'  # Fix for Sony ILCE-6400
-                else:
-                    LOGGER.warning("Invalid value '%s' for option %s (possible choices: %s), trying to set it anyway",
-                                   value, option, choices)
-            child.set_value(value)
-            self._cam.set_config(config)
-        except gp.GPhoto2Error as ex:
-            LOGGER.error('Unsupported option %s/%s=%s (%s), configure your DSLR manually', section, option, value, ex)
-
-    def get_config_value(self, section, option):
-        """Get camera configuration option.
-        """
-        try:
-            config = self._cam.get_config()
-            child = config.get_child_by_name(section).get_child_by_name(option)
-            value = child.get_value()
-            LOGGER.debug('Getting option %s/%s=%s', section, option, value)
-            return value
-        except gp.GPhoto2Error:
-            raise ValueError('Unknown option {}/{}'.format(section, option))
-
-    def preview(self, window, flip=True):
-        """Setup the preview.
-        """
-        self._window = window
-        self.preview_flip = flip
-
-        if self._preview_compatible:
-            if self._preview_viewfinder:
-                self.set_config_value('actions', 'viewfinder', 1)
-            self._window.show_image(self._get_preview_image())
-
-    def preview_countdown(self, timeout, alpha=80):
-        """Show a countdown of `timeout` seconds on the preview.
-        Returns when the countdown is finished.
-        """
-        timeout = int(timeout)
-        if timeout < 1:
-            raise ValueError("Start time shall be greater than 0")
-
-        shown = False
-        first_loop = True
-        timer = PoolingTimer(timeout)
-        while not timer.is_timeout():
-            remaining = int(timer.remaining() + 1)
-            if not self._overlay or remaining != timeout:
-                # Rebluid overlay only if remaining number has changed
-                self._show_overlay(str(remaining), alpha)
-                timeout = remaining
-                shown = False
-
-            updated_rect = None
-            if self._preview_compatible:
-                updated_rect = self._window.show_image(self._get_preview_image())
-            elif not shown:
-                updated_rect = self._window.show_image(self._get_preview_image())
-                shown = True  # Do not update dummy preview until next overlay update
-
-            if first_loop:
-                timer.start()  # Because first preview capture is longer than others
-                first_loop = False
-
-            pygame.event.pump()
-            if updated_rect:
-                pygame.display.update(updated_rect)
-
-        self._show_overlay(get_translated_text('smile'), alpha)
-        self._window.show_image(self._get_preview_image())
-
-    def preview_wait(self, timeout, alpha=80):
-        """Wait the given time.
-        """
-        timeout = int(timeout)
-        if timeout < 1:
-            raise ValueError("Start time shall be greater than 0")
-
-        timer = PoolingTimer(timeout)
-        if self._preview_compatible:
-            while not timer.is_timeout():
-                updated_rect = self._window.show_image(self._get_preview_image())
-                pygame.event.pump()
-                if updated_rect:
-                    pygame.display.update(updated_rect)
-        else:
-            time.sleep(timer.remaining())
-
-        self._show_overlay(get_translated_text('smile'), alpha)
-        self._window.show_image(self._get_preview_image())
-
-    def stop_preview(self):
-        """Stop the preview.
-        """
-        self._hide_overlay()
-        self._window = None
-
-    def capture(self, effect=None):
-        """Capture a new picture.
-        """
-        if self._preview_viewfinder:
-            self.set_config_value('actions', 'viewfinder', 0)
-
-        effect = str(effect).lower()
-        if effect not in self.IMAGE_EFFECTS:
-            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
-
-        if self.capture_iso != self.preview_iso:
-            self.set_config_value('imgsettings', 'iso', self.capture_iso)
-
-        self._captures.append((self._cam.capture(gp.GP_CAPTURE_IMAGE), effect))
-        time.sleep(0.3)  # Necessary to let the time for the camera to save the image
-
-        if self.capture_iso != self.preview_iso:
-            self.set_config_value('imgsettings', 'iso', self.preview_iso)
-
-        self._hide_overlay()  # If stop_preview() has not been called
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        if self._cam:
-            del self._gp_logcb  # Uninstall log callback
-            self._cam.exit()
diff -ruN ../pibooth_local_copy/camera/hybrid.py ./camera/hybrid.py
--- ../pibooth_local_copy/camera/hybrid.py	2025-05-16 13:26:45
+++ ./camera/hybrid.py	1969-12-31 19:00:00
@@ -1,89 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from pibooth.camera.rpi import RpiCamera
-from pibooth.camera.opencv import CvCamera
-from pibooth.camera.gphoto import GpCamera
-
-
-class HybridRpiCamera(RpiCamera):
-
-    """Camera management using the Raspberry Pi camera for the preview (better
-    video rendering) and a gPhoto2 compatible camera for the capture (higher
-    resolution)
-    """
-
-    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
-
-    def __init__(self, rpi_camera_proxy, gp_camera_proxy):
-        super(HybridRpiCamera, self).__init__(rpi_camera_proxy)
-        self._gp_cam = GpCamera(gp_camera_proxy)
-        self._gp_cam._captures = self._captures  # Same dict for both cameras
-
-    def initialize(self, *args, **kwargs):
-        """Ensure that both cameras are initialized.
-        """
-        super(HybridRpiCamera, self).initialize(*args, **kwargs)
-        self._gp_cam.initialize(*args, **kwargs)
-
-    def _post_process_capture(self, capture_data):
-        """Rework capture data.
-
-        :param capture_data: couple (GPhotoPath, effect)
-        :type capture_data: tuple
-        """
-        return self._gp_cam._post_process_capture(capture_data)
-
-    def capture(self, effect=None):
-        """Capture a picture in a file.
-        """
-        self._gp_cam.capture(effect)
-
-        self._hide_overlay()  # If stop_preview() has not been called
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        super(HybridRpiCamera, self).quit()
-        self._gp_cam.quit()
-
-
-class HybridCvCamera(CvCamera):
-
-    """Camera management using the OpenCV camera for the preview (better
-    video rendering) and a gPhoto2 compatible camera for the capture (higher
-    resolution)
-    """
-
-    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
-
-    def __init__(self, cv_camera_proxy, gp_camera_proxy):
-        super(HybridCvCamera, self).__init__(cv_camera_proxy)
-        self._gp_cam = GpCamera(gp_camera_proxy)
-        self._gp_cam._captures = self._captures  # Same dict for both cameras
-
-    def initialize(self, *args, **kwargs):
-        """Ensure that both cameras are initialized.
-        """
-        super(HybridCvCamera, self).initialize(*args, **kwargs)
-        self._gp_cam.initialize(*args, **kwargs)
-
-    def _post_process_capture(self, capture_data):
-        """Rework capture data.
-
-        :param capture_data: couple (GPhotoPath, effect)
-        :type capture_data: tuple
-        """
-        return self._gp_cam._post_process_capture(capture_data)
-
-    def capture(self, effect=None):
-        """Capture a picture in a file.
-        """
-        self._gp_cam.capture(effect)
-
-        self._hide_overlay()  # If stop_preview() has not been called
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        super(HybridCvCamera, self).quit()
-        self._gp_cam.quit()
diff -ruN ../pibooth_local_copy/camera/opencv.py ./camera/opencv.py
--- ../pibooth_local_copy/camera/opencv.py	2025-05-16 13:26:45
+++ ./camera/opencv.py	1969-12-31 19:00:00
@@ -1,239 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import time
-import pygame
-try:
-    import cv2
-    import numpy as np
-except ImportError:
-    cv2 = None  # OpenCV is optional
-from PIL import Image
-from pibooth.pictures import sizing
-from pibooth.utils import PoolingTimer, LOGGER
-from pibooth.language import get_translated_text
-from pibooth.camera.base import BaseCamera
-
-
-def get_cv_camera_proxy(port=None):
-    """Return camera proxy if an OpenCV compatible camera is found
-    else return None.
-
-    :param port: look on given port number
-    :type port: int
-    """
-    if not cv2:
-        return None  # OpenCV is not installed
-
-    if port is not None:
-        if not isinstance(port, int):
-            raise TypeError("Invalid OpenCV camera port '{}'".format(type(port)))
-        camera = cv2.VideoCapture(port)
-        if camera.isOpened():
-            return camera
-    else:
-        for i in range(3):  # Test 3 first ports
-            camera = cv2.VideoCapture(i)
-            if camera.isOpened():
-                return camera
-
-    return None
-
-
-class CvCamera(BaseCamera):
-
-    """OpenCV camera management.
-    """
-
-    IMAGE_EFFECTS = [u'none',
-                     u'blur',
-                     u'contour',
-                     u'detail',
-                     u'edge_enhance',
-                     u'edge_enhance_more',
-                     u'emboss',
-                     u'find_edges',
-                     u'smooth',
-                     u'smooth_more',
-                     u'sharpen']
-
-    def __init__(self, camera_proxy):
-        super(CvCamera, self).__init__(camera_proxy)
-        self._overlay_alpha = 255
-        self._preview_resolution = None
-
-    def _specific_initialization(self):
-        """Camera initialization.
-        """
-        self._preview_resolution = (self._cam.get(cv2.CAP_PROP_FRAME_WIDTH), self._cam.get(cv2.CAP_PROP_FRAME_HEIGHT))
-        LOGGER.debug("Preview resolution is %s", self._preview_resolution)
-        self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
-
-    def _show_overlay(self, text, alpha):
-        """Add an image as an overlay.
-        """
-        if self._window:  # No window means no preview displayed
-            rect = self.get_rect()
-            self._overlay_alpha = alpha
-            pil_image = self.build_overlay((rect.width, rect.height), str(text), 255)
-            # Remove alpha from overlay
-            self._overlay = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGBA2RGB)
-
-    def _rotate_image(self, image, rotation):
-        """Rotate an OpenCV image, same direction than RpiCamera.
-        """
-        if rotation == 90:
-            image = cv2.transpose(image)
-            return cv2.flip(image, 1)
-        elif rotation == 180:
-            return cv2.flip(image, -1)
-        elif rotation == 270:
-            image = cv2.transpose(image)
-            return cv2.flip(image, 0)
-        return image
-
-    def _get_preview_image(self):
-        """Capture a new preview image.
-        """
-        rect = self.get_rect()
-
-        ret, image = self._cam.read()
-        if not ret:
-            raise IOError("Can not get camera preview image")
-        image = self._rotate_image(image, self.preview_rotation)
-
-        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
-        # Crop to keep aspect ratio of the resolution
-        height, width = image.shape[:2]
-        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
-        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
-        # Resize to fit the available space in the window
-        height, width = image.shape[:2]
-        size = sizing.new_size_keep_aspect_ratio((width, height), (rect.width, rect.height), 'outer')
-        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
-
-        if self.preview_flip:
-            image = cv2.flip(image, 1)
-
-        if self._overlay is not None:
-            if self._overlay.shape != image.shape:
-                # Previous operations may create a size with one pixel gap
-                self._overlay = cv2.resize(self._overlay, (image.shape[1], image.shape[0]))
-            image = cv2.addWeighted(image, 1, self._overlay, self._overlay_alpha / 255., 0)
-        return Image.fromarray(image)
-
-    def _post_process_capture(self, capture_data):
-        """Rework capture data.
-
-        :param capture_data: couple (frame, effect)
-        :type capture_data: tuple
-        """
-        frame, effect = capture_data
-
-        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
-        # Crop to keep aspect ratio of the resolution
-        height, width = image.shape[:2]
-        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
-        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
-        # Resize to fit the resolution
-        height, width = image.shape[:2]
-        size = sizing.new_size_keep_aspect_ratio((width, height), self.resolution, 'outer')
-        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
-
-        if self.capture_flip:
-            image = cv2.flip(image, 1)
-
-        if effect != 'none':
-            LOGGER.warning("Effect with OpenCV camera is not implemented")
-
-        return Image.fromarray(image)
-
-    def preview(self, window, flip=True):
-        """Setup the preview.
-        """
-        self._window = window
-        self.preview_flip = flip
-        self._window.show_image(self._get_preview_image())
-
-    def preview_countdown(self, timeout, alpha=80):
-        """Show a countdown of `timeout` seconds on the preview.
-        Returns when the countdown is finished.
-        """
-        timeout = int(timeout)
-        if timeout < 1:
-            raise ValueError("Start time shall be greater than 0")
-
-        timer = PoolingTimer(timeout)
-        while not timer.is_timeout():
-            remaining = int(timer.remaining() + 1)
-            if self._overlay is None or remaining != timeout:
-                # Rebluid overlay only if remaining number has changed
-                self._show_overlay(str(remaining), alpha)
-                timeout = remaining
-
-            updated_rect = self._window.show_image(self._get_preview_image())
-            pygame.event.pump()
-            if updated_rect:
-                pygame.display.update(updated_rect)
-
-        self._show_overlay(get_translated_text('smile'), alpha)
-        self._window.show_image(self._get_preview_image())
-
-    def preview_wait(self, timeout, alpha=80):
-        """Wait the given time.
-        """
-        timeout = int(timeout)
-        if timeout < 1:
-            raise ValueError("Start time shall be greater than 0")
-
-        timer = PoolingTimer(timeout)
-        while not timer.is_timeout():
-            updated_rect = self._window.show_image(self._get_preview_image())
-            pygame.event.pump()
-            if updated_rect:
-                pygame.display.update(updated_rect)
-
-        self._show_overlay(get_translated_text('smile'), alpha)
-        self._window.show_image(self._get_preview_image())
-
-    def stop_preview(self):
-        """Stop the preview.
-        """
-        self._hide_overlay()
-        self._window = None
-
-    def capture(self, effect=None):
-        """Capture a new picture.
-        """
-        effect = str(effect).lower()
-        if effect not in self.IMAGE_EFFECTS:
-            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
-
-        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self.resolution[0])
-        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self.resolution[1])
-
-        if self.capture_iso != self.preview_iso:
-            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.capture_iso)
-
-        LOGGER.debug("Taking capture at resolution %s", self.resolution)
-        ret, image = self._cam.read()
-        if not ret:
-            raise IOError("Can not capture frame")
-        image = self._rotate_image(image, self.capture_rotation)
-
-        LOGGER.debug("Putting preview resolution back to %s", self._preview_resolution)
-        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self._preview_resolution[0])
-        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self._preview_resolution[1])
-
-        if self.capture_iso != self.preview_iso:
-            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
-
-        self._captures.append((image, effect))
-        time.sleep(0.5)  # To let time to see "Smile"
-
-        self._hide_overlay()  # If stop_preview() has not been called
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        if self._cam:
-            self._cam.release()
diff -ruN ../pibooth_local_copy/camera/rpi.py ./camera/rpi.py
--- ../pibooth_local_copy/camera/rpi.py	2025-05-16 13:26:45
+++ ./camera/rpi.py	1969-12-31 19:00:00
@@ -1,169 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import time
-import subprocess
-from io import BytesIO
-from PIL import Image
-try:
-    import picamera
-except ImportError:
-    picamera = None  # picamera is optional
-from pibooth.language import get_translated_text
-from pibooth.camera.base import BaseCamera
-
-
-def get_rpi_camera_proxy(port=None):
-    """Return camera proxy if a Raspberry Pi compatible camera is found
-    else return None.
-
-    :param port: look on given port number
-    :type port: int
-    """
-    if not picamera:
-        return None  # picamera is not installed
-    try:
-        process = subprocess.Popen(['vcgencmd', 'get_camera'],
-                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
-        stdout, _stderr = process.communicate()
-        if stdout and u'detected=1' in stdout.decode('utf-8'):
-            if port is not None:
-                return picamera.PiCamera(camera_num=port)
-            return picamera.PiCamera()
-    except OSError:
-        pass
-    return None
-
-
-class RpiCamera(BaseCamera):
-
-    """Camera management
-    """
-
-    if picamera:
-        IMAGE_EFFECTS = list(picamera.PiCamera.IMAGE_EFFECTS.keys())
-    else:
-        IMAGE_EFFECTS = []
-
-    def _specific_initialization(self):
-        """Camera initialization.
-        """
-        self._cam.framerate = 15  # Slower is necessary for high-resolution
-        self._cam.video_stabilization = True
-        self._cam.vflip = False
-        self._cam.hflip = self.capture_flip
-        self._cam.resolution = self.resolution
-        self._cam.iso = self.preview_iso
-        self._cam.rotation = self.preview_rotation
-
-    def _show_overlay(self, text, alpha):
-        """Add an image as an overlay.
-        """
-        if self._window:  # No window means no preview displayed
-            rect = self.get_rect(self._cam.MAX_RESOLUTION)
-
-            # Create an image padded to the required size (required by picamera)
-            size = (((rect.width + 31) // 32) * 32, ((rect.height + 15) // 16) * 16)
-
-            image = self.build_overlay(size, str(text), alpha)
-            self._overlay = self._cam.add_overlay(image.tobytes(), image.size, layer=3,
-                                     window=tuple(rect), fullscreen=False, rotation=90)
-
-    def _hide_overlay(self):
-        """Remove any existing overlay.
-        """
-        if self._overlay:
-            self._cam.remove_overlay(self._overlay)
-            self._overlay = None
-
-    def _post_process_capture(self, capture_data):
-        """Rework capture data.
-
-        :param capture_data: binary data as stream
-        :type capture_data: :py:class:`io.BytesIO`
-        """
-        # "Rewind" the stream to the beginning so we can read its content
-        capture_data.seek(0)
-        return Image.open(capture_data).transpose(Image.ROTATE_270)
-
-    def preview(self, window, flip=True):
-        """Display a preview on the given Rect (flip if necessary).
-        """
-        if self._cam.preview is not None:
-            # Already running
-            return
-
-        self._window = window
-        rect = self.get_rect(self._cam.MAX_RESOLUTION)
-        if self._cam.hflip:
-            if flip:
-                # Don't flip again, already done at init
-                flip = False
-            else:
-                # Flip again because flipped once at init
-                flip = True
-        self._cam.start_preview(resolution=(rect.width, rect.height), hflip=flip,
-                                fullscreen=False, window=tuple(rect))
-
-    def preview_countdown(self, timeout, alpha=60):
-        """Show a countdown of `timeout` seconds on the preview.
-        Returns when the countdown is finished.
-        """
-        timeout = int(timeout)
-        if timeout < 1:
-            raise ValueError("Start time shall be greater than 0")
-        if not self._cam.preview:
-            raise EnvironmentError("Preview shall be started first")
-
-        while timeout > 0:
-            self._show_overlay(timeout, alpha)
-            time.sleep(1)
-            timeout -= 1
-            self._hide_overlay()
-
-        self._show_overlay(get_translated_text('smile'), alpha)
-
-    def preview_wait(self, timeout, alpha=60):
-        """Wait the given time.
-        """
-        time.sleep(timeout)
-        self._show_overlay(get_translated_text('smile'), alpha)
-
-    def stop_preview(self):
-        """Stop the preview.
-        """
-        self._hide_overlay()
-        self._cam.stop_preview()
-        self._window = None
-
-    def capture(self, effect=None):
-        """Capture a new picture in a file.
-        """
-        effect = str(effect).lower()
-        if effect not in self.IMAGE_EFFECTS:
-            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
-
-        try:
-            if self.capture_iso != self.preview_iso:
-                self._cam.iso = self.capture_iso
-            if self.capture_rotation != self.preview_rotation:
-                self._cam.rotation = self.capture_rotation
-
-            stream = BytesIO()
-            self._cam.image_effect = effect
-            self._cam.capture(stream, format='jpeg')
-
-            if self.capture_iso != self.preview_iso:
-                self._cam.iso = self.preview_iso
-            if self.capture_rotation != self.preview_rotation:
-                self._cam.rotation = self.preview_rotation
-
-            self._captures.append(stream)
-        finally:
-            self._cam.image_effect = 'none'
-
-        self._hide_overlay()  # If stop_preview() has not been called
-
-    def quit(self):
-        """Close the camera driver, it's definitive.
-        """
-        self._cam.close()
diff -ruN ../pibooth_local_copy/changes.diff ./changes.diff
--- ../pibooth_local_copy/changes.diff	1969-12-31 19:00:00
+++ ./changes.diff	2025-05-16 14:05:16
@@ -0,0 +1,2845 @@
+diff -ruN ../pibooth_local_copy/.git/HEAD ./.git/HEAD
+--- ../pibooth_local_copy/.git/HEAD	1969-12-31 19:00:00
++++ ./.git/HEAD	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++ref: refs/heads/master
+diff -ruN ../pibooth_local_copy/.git/config ./.git/config
+--- ../pibooth_local_copy/.git/config	1969-12-31 19:00:00
++++ ./.git/config	2025-05-16 14:02:41
+@@ -0,0 +1,13 @@
++[core]
++	repositoryformatversion = 0
++	filemode = true
++	bare = false
++	logallrefupdates = true
++	ignorecase = true
++	precomposeunicode = true
++[remote "origin"]
++	url = https://github.com/pibooth/pibooth.git
++	fetch = +refs/heads/*:refs/remotes/origin/*
++[branch "master"]
++	remote = origin
++	merge = refs/heads/master
+diff -ruN ../pibooth_local_copy/.git/description ./.git/description
+--- ../pibooth_local_copy/.git/description	1969-12-31 19:00:00
++++ ./.git/description	2025-05-16 14:02:33
+@@ -0,0 +1 @@
++Unnamed repository; edit this file 'description' to name the repository.
+diff -ruN ../pibooth_local_copy/.git/hooks/applypatch-msg.sample ./.git/hooks/applypatch-msg.sample
+--- ../pibooth_local_copy/.git/hooks/applypatch-msg.sample	1969-12-31 19:00:00
++++ ./.git/hooks/applypatch-msg.sample	2025-05-16 14:02:33
+@@ -0,0 +1,15 @@
++#!/bin/sh
++#
++# An example hook script to check the commit log message taken by
++# applypatch from an e-mail message.
++#
++# The hook should exit with non-zero status after issuing an
++# appropriate message if it wants to stop the commit.  The hook is
++# allowed to edit the commit message file.
++#
++# To enable this hook, rename this file to "applypatch-msg".
++
++. git-sh-setup
++commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
++test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
++:
+diff -ruN ../pibooth_local_copy/.git/hooks/commit-msg.sample ./.git/hooks/commit-msg.sample
+--- ../pibooth_local_copy/.git/hooks/commit-msg.sample	1969-12-31 19:00:00
++++ ./.git/hooks/commit-msg.sample	2025-05-16 14:02:33
+@@ -0,0 +1,24 @@
++#!/bin/sh
++#
++# An example hook script to check the commit log message.
++# Called by "git commit" with one argument, the name of the file
++# that has the commit message.  The hook should exit with non-zero
++# status after issuing an appropriate message if it wants to stop the
++# commit.  The hook is allowed to edit the commit message file.
++#
++# To enable this hook, rename this file to "commit-msg".
++
++# Uncomment the below to add a Signed-off-by line to the message.
++# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
++# hook is more suited to it.
++#
++# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
++# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
++
++# This example catches duplicate Signed-off-by lines.
++
++test "" = "$(grep '^Signed-off-by: ' "$1" |
++	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
++	echo >&2 Duplicate Signed-off-by lines.
++	exit 1
++}
+diff -ruN ../pibooth_local_copy/.git/hooks/fsmonitor-watchman.sample ./.git/hooks/fsmonitor-watchman.sample
+--- ../pibooth_local_copy/.git/hooks/fsmonitor-watchman.sample	1969-12-31 19:00:00
++++ ./.git/hooks/fsmonitor-watchman.sample	2025-05-16 14:02:33
+@@ -0,0 +1,174 @@
++#!/usr/bin/perl
++
++use strict;
++use warnings;
++use IPC::Open2;
++
++# An example hook script to integrate Watchman
++# (https://facebook.github.io/watchman/) with git to speed up detecting
++# new and modified files.
++#
++# The hook is passed a version (currently 2) and last update token
++# formatted as a string and outputs to stdout a new update token and
++# all files that have been modified since the update token. Paths must
++# be relative to the root of the working tree and separated by a single NUL.
++#
++# To enable this hook, rename this file to "query-watchman" and set
++# 'git config core.fsmonitor .git/hooks/query-watchman'
++#
++my ($version, $last_update_token) = @ARGV;
++
++# Uncomment for debugging
++# print STDERR "$0 $version $last_update_token\n";
++
++# Check the hook interface version
++if ($version ne 2) {
++	die "Unsupported query-fsmonitor hook version '$version'.\n" .
++	    "Falling back to scanning...\n";
++}
++
++my $git_work_tree = get_working_dir();
++
++my $retry = 1;
++
++my $json_pkg;
++eval {
++	require JSON::XS;
++	$json_pkg = "JSON::XS";
++	1;
++} or do {
++	require JSON::PP;
++	$json_pkg = "JSON::PP";
++};
++
++launch_watchman();
++
++sub launch_watchman {
++	my $o = watchman_query();
++	if (is_work_tree_watched($o)) {
++		output_result($o->{clock}, @{$o->{files}});
++	}
++}
++
++sub output_result {
++	my ($clockid, @files) = @_;
++
++	# Uncomment for debugging watchman output
++	# open (my $fh, ">", ".git/watchman-output.out");
++	# binmode $fh, ":utf8";
++	# print $fh "$clockid\n@files\n";
++	# close $fh;
++
++	binmode STDOUT, ":utf8";
++	print $clockid;
++	print "\0";
++	local $, = "\0";
++	print @files;
++}
++
++sub watchman_clock {
++	my $response = qx/watchman clock "$git_work_tree"/;
++	die "Failed to get clock id on '$git_work_tree'.\n" .
++		"Falling back to scanning...\n" if $? != 0;
++
++	return $json_pkg->new->utf8->decode($response);
++}
++
++sub watchman_query {
++	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
++	or die "open2() failed: $!\n" .
++	"Falling back to scanning...\n";
++
++	# In the query expression below we're asking for names of files that
++	# changed since $last_update_token but not from the .git folder.
++	#
++	# To accomplish this, we're using the "since" generator to use the
++	# recency index to select candidate nodes and "fields" to limit the
++	# output to file names only. Then we're using the "expression" term to
++	# further constrain the results.
++	my $last_update_line = "";
++	if (substr($last_update_token, 0, 1) eq "c") {
++		$last_update_token = "\"$last_update_token\"";
++		$last_update_line = qq[\n"since": $last_update_token,];
++	}
++	my $query = <<"	END";
++		["query", "$git_work_tree", {$last_update_line
++			"fields": ["name"],
++			"expression": ["not", ["dirname", ".git"]]
++		}]
++	END
++
++	# Uncomment for debugging the watchman query
++	# open (my $fh, ">", ".git/watchman-query.json");
++	# print $fh $query;
++	# close $fh;
++
++	print CHLD_IN $query;
++	close CHLD_IN;
++	my $response = do {local $/; <CHLD_OUT>};
++
++	# Uncomment for debugging the watch response
++	# open ($fh, ">", ".git/watchman-response.json");
++	# print $fh $response;
++	# close $fh;
++
++	die "Watchman: command returned no output.\n" .
++	"Falling back to scanning...\n" if $response eq "";
++	die "Watchman: command returned invalid output: $response\n" .
++	"Falling back to scanning...\n" unless $response =~ /^\{/;
++
++	return $json_pkg->new->utf8->decode($response);
++}
++
++sub is_work_tree_watched {
++	my ($output) = @_;
++	my $error = $output->{error};
++	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
++		$retry--;
++		my $response = qx/watchman watch "$git_work_tree"/;
++		die "Failed to make watchman watch '$git_work_tree'.\n" .
++		    "Falling back to scanning...\n" if $? != 0;
++		$output = $json_pkg->new->utf8->decode($response);
++		$error = $output->{error};
++		die "Watchman: $error.\n" .
++		"Falling back to scanning...\n" if $error;
++
++		# Uncomment for debugging watchman output
++		# open (my $fh, ">", ".git/watchman-output.out");
++		# close $fh;
++
++		# Watchman will always return all files on the first query so
++		# return the fast "everything is dirty" flag to git and do the
++		# Watchman query just to get it over with now so we won't pay
++		# the cost in git to look up each individual file.
++		my $o = watchman_clock();
++		$error = $output->{error};
++
++		die "Watchman: $error.\n" .
++		"Falling back to scanning...\n" if $error;
++
++		output_result($o->{clock}, ("/"));
++		$last_update_token = $o->{clock};
++
++		eval { launch_watchman() };
++		return 0;
++	}
++
++	die "Watchman: $error.\n" .
++	"Falling back to scanning...\n" if $error;
++
++	return 1;
++}
++
++sub get_working_dir {
++	my $working_dir;
++	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
++		$working_dir = Win32::GetCwd();
++		$working_dir =~ tr/\\/\//;
++	} else {
++		require Cwd;
++		$working_dir = Cwd::cwd();
++	}
++
++	return $working_dir;
++}
+diff -ruN ../pibooth_local_copy/.git/hooks/post-update.sample ./.git/hooks/post-update.sample
+--- ../pibooth_local_copy/.git/hooks/post-update.sample	1969-12-31 19:00:00
++++ ./.git/hooks/post-update.sample	2025-05-16 14:02:33
+@@ -0,0 +1,8 @@
++#!/bin/sh
++#
++# An example hook script to prepare a packed repository for use over
++# dumb transports.
++#
++# To enable this hook, rename this file to "post-update".
++
++exec git update-server-info
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-applypatch.sample ./.git/hooks/pre-applypatch.sample
+--- ../pibooth_local_copy/.git/hooks/pre-applypatch.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-applypatch.sample	2025-05-16 14:02:33
+@@ -0,0 +1,14 @@
++#!/bin/sh
++#
++# An example hook script to verify what is about to be committed
++# by applypatch from an e-mail message.
++#
++# The hook should exit with non-zero status after issuing an
++# appropriate message if it wants to stop the commit.
++#
++# To enable this hook, rename this file to "pre-applypatch".
++
++. git-sh-setup
++precommit="$(git rev-parse --git-path hooks/pre-commit)"
++test -x "$precommit" && exec "$precommit" ${1+"$@"}
++:
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-commit.sample ./.git/hooks/pre-commit.sample
+--- ../pibooth_local_copy/.git/hooks/pre-commit.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-commit.sample	2025-05-16 14:02:33
+@@ -0,0 +1,49 @@
++#!/bin/sh
++#
++# An example hook script to verify what is about to be committed.
++# Called by "git commit" with no arguments.  The hook should
++# exit with non-zero status after issuing an appropriate message if
++# it wants to stop the commit.
++#
++# To enable this hook, rename this file to "pre-commit".
++
++if git rev-parse --verify HEAD >/dev/null 2>&1
++then
++	against=HEAD
++else
++	# Initial commit: diff against an empty tree object
++	against=$(git hash-object -t tree /dev/null)
++fi
++
++# If you want to allow non-ASCII filenames set this variable to true.
++allownonascii=$(git config --type=bool hooks.allownonascii)
++
++# Redirect output to stderr.
++exec 1>&2
++
++# Cross platform projects tend to avoid non-ASCII filenames; prevent
++# them from being added to the repository. We exploit the fact that the
++# printable range starts at the space character and ends with tilde.
++if [ "$allownonascii" != "true" ] &&
++	# Note that the use of brackets around a tr range is ok here, (it's
++	# even required, for portability to Solaris 10's /usr/bin/tr), since
++	# the square bracket bytes happen to fall in the designated range.
++	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
++	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
++then
++	cat <<\EOF
++Error: Attempt to add a non-ASCII file name.
++
++This can cause problems if you want to work with people on other platforms.
++
++To be portable it is advisable to rename the file.
++
++If you know what you are doing you can disable this check using:
++
++  git config hooks.allownonascii true
++EOF
++	exit 1
++fi
++
++# If there are whitespace errors, print the offending file names and fail.
++exec git diff-index --check --cached $against --
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-merge-commit.sample ./.git/hooks/pre-merge-commit.sample
+--- ../pibooth_local_copy/.git/hooks/pre-merge-commit.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-merge-commit.sample	2025-05-16 14:02:33
+@@ -0,0 +1,13 @@
++#!/bin/sh
++#
++# An example hook script to verify what is about to be committed.
++# Called by "git merge" with no arguments.  The hook should
++# exit with non-zero status after issuing an appropriate message to
++# stderr if it wants to stop the merge commit.
++#
++# To enable this hook, rename this file to "pre-merge-commit".
++
++. git-sh-setup
++test -x "$GIT_DIR/hooks/pre-commit" &&
++        exec "$GIT_DIR/hooks/pre-commit"
++:
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-push.sample ./.git/hooks/pre-push.sample
+--- ../pibooth_local_copy/.git/hooks/pre-push.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-push.sample	2025-05-16 14:02:33
+@@ -0,0 +1,53 @@
++#!/bin/sh
++
++# An example hook script to verify what is about to be pushed.  Called by "git
++# push" after it has checked the remote status, but before anything has been
++# pushed.  If this script exits with a non-zero status nothing will be pushed.
++#
++# This hook is called with the following parameters:
++#
++# $1 -- Name of the remote to which the push is being done
++# $2 -- URL to which the push is being done
++#
++# If pushing without using a named remote those arguments will be equal.
++#
++# Information about the commits which are being pushed is supplied as lines to
++# the standard input in the form:
++#
++#   <local ref> <local oid> <remote ref> <remote oid>
++#
++# This sample shows how to prevent push of commits where the log message starts
++# with "WIP" (work in progress).
++
++remote="$1"
++url="$2"
++
++zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
++
++while read local_ref local_oid remote_ref remote_oid
++do
++	if test "$local_oid" = "$zero"
++	then
++		# Handle delete
++		:
++	else
++		if test "$remote_oid" = "$zero"
++		then
++			# New branch, examine all commits
++			range="$local_oid"
++		else
++			# Update to existing branch, examine new commits
++			range="$remote_oid..$local_oid"
++		fi
++
++		# Check for WIP commit
++		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
++		if test -n "$commit"
++		then
++			echo >&2 "Found WIP commit in $local_ref, not pushing"
++			exit 1
++		fi
++	fi
++done
++
++exit 0
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-rebase.sample ./.git/hooks/pre-rebase.sample
+--- ../pibooth_local_copy/.git/hooks/pre-rebase.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-rebase.sample	2025-05-16 14:02:33
+@@ -0,0 +1,169 @@
++#!/bin/sh
++#
++# Copyright (c) 2006, 2008 Junio C Hamano
++#
++# The "pre-rebase" hook is run just before "git rebase" starts doing
++# its job, and can prevent the command from running by exiting with
++# non-zero status.
++#
++# The hook is called with the following parameters:
++#
++# $1 -- the upstream the series was forked from.
++# $2 -- the branch being rebased (or empty when rebasing the current branch).
++#
++# This sample shows how to prevent topic branches that are already
++# merged to 'next' branch from getting rebased, because allowing it
++# would result in rebasing already published history.
++
++publish=next
++basebranch="$1"
++if test "$#" = 2
++then
++	topic="refs/heads/$2"
++else
++	topic=`git symbolic-ref HEAD` ||
++	exit 0 ;# we do not interrupt rebasing detached HEAD
++fi
++
++case "$topic" in
++refs/heads/??/*)
++	;;
++*)
++	exit 0 ;# we do not interrupt others.
++	;;
++esac
++
++# Now we are dealing with a topic branch being rebased
++# on top of master.  Is it OK to rebase it?
++
++# Does the topic really exist?
++git show-ref -q "$topic" || {
++	echo >&2 "No such branch $topic"
++	exit 1
++}
++
++# Is topic fully merged to master?
++not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
++if test -z "$not_in_master"
++then
++	echo >&2 "$topic is fully merged to master; better remove it."
++	exit 1 ;# we could allow it, but there is no point.
++fi
++
++# Is topic ever merged to next?  If so you should not be rebasing it.
++only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
++only_next_2=`git rev-list ^master           ${publish} | sort`
++if test "$only_next_1" = "$only_next_2"
++then
++	not_in_topic=`git rev-list "^$topic" master`
++	if test -z "$not_in_topic"
++	then
++		echo >&2 "$topic is already up to date with master"
++		exit 1 ;# we could allow it, but there is no point.
++	else
++		exit 0
++	fi
++else
++	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
++	/usr/bin/perl -e '
++		my $topic = $ARGV[0];
++		my $msg = "* $topic has commits already merged to public branch:\n";
++		my (%not_in_next) = map {
++			/^([0-9a-f]+) /;
++			($1 => 1);
++		} split(/\n/, $ARGV[1]);
++		for my $elem (map {
++				/^([0-9a-f]+) (.*)$/;
++				[$1 => $2];
++			} split(/\n/, $ARGV[2])) {
++			if (!exists $not_in_next{$elem->[0]}) {
++				if ($msg) {
++					print STDERR $msg;
++					undef $msg;
++				}
++				print STDERR " $elem->[1]\n";
++			}
++		}
++	' "$topic" "$not_in_next" "$not_in_master"
++	exit 1
++fi
++
++<<\DOC_END
++
++This sample hook safeguards topic branches that have been
++published from being rewound.
++
++The workflow assumed here is:
++
++ * Once a topic branch forks from "master", "master" is never
++   merged into it again (either directly or indirectly).
++
++ * Once a topic branch is fully cooked and merged into "master",
++   it is deleted.  If you need to build on top of it to correct
++   earlier mistakes, a new topic branch is created by forking at
++   the tip of the "master".  This is not strictly necessary, but
++   it makes it easier to keep your history simple.
++
++ * Whenever you need to test or publish your changes to topic
++   branches, merge them into "next" branch.
++
++The script, being an example, hardcodes the publish branch name
++to be "next", but it is trivial to make it configurable via
++$GIT_DIR/config mechanism.
++
++With this workflow, you would want to know:
++
++(1) ... if a topic branch has ever been merged to "next".  Young
++    topic branches can have stupid mistakes you would rather
++    clean up before publishing, and things that have not been
++    merged into other branches can be easily rebased without
++    affecting other people.  But once it is published, you would
++    not want to rewind it.
++
++(2) ... if a topic branch has been fully merged to "master".
++    Then you can delete it.  More importantly, you should not
++    build on top of it -- other people may already want to
++    change things related to the topic as patches against your
++    "master", so if you need further changes, it is better to
++    fork the topic (perhaps with the same name) afresh from the
++    tip of "master".
++
++Let's look at this example:
++
++		   o---o---o---o---o---o---o---o---o---o "next"
++		  /       /           /           /
++		 /   a---a---b A     /           /
++		/   /               /           /
++	       /   /   c---c---c---c B         /
++	      /   /   /             \         /
++	     /   /   /   b---b C     \       /
++	    /   /   /   /             \     /
++    ---o---o---o---o---o---o---o---o---o---o---o "master"
++
++
++A, B and C are topic branches.
++
++ * A has one fix since it was merged up to "next".
++
++ * B has finished.  It has been fully merged up to "master" and "next",
++   and is ready to be deleted.
++
++ * C has not merged to "next" at all.
++
++We would want to allow C to be rebased, refuse A, and encourage
++B to be deleted.
++
++To compute (1):
++
++	git rev-list ^master ^topic next
++	git rev-list ^master        next
++
++	if these match, topic has not merged in next at all.
++
++To compute (2):
++
++	git rev-list master..topic
++
++	if this is empty, it is fully merged to "master".
++
++DOC_END
+diff -ruN ../pibooth_local_copy/.git/hooks/pre-receive.sample ./.git/hooks/pre-receive.sample
+--- ../pibooth_local_copy/.git/hooks/pre-receive.sample	1969-12-31 19:00:00
++++ ./.git/hooks/pre-receive.sample	2025-05-16 14:02:33
+@@ -0,0 +1,24 @@
++#!/bin/sh
++#
++# An example hook script to make use of push options.
++# The example simply echoes all push options that start with 'echoback='
++# and rejects all pushes when the "reject" push option is used.
++#
++# To enable this hook, rename this file to "pre-receive".
++
++if test -n "$GIT_PUSH_OPTION_COUNT"
++then
++	i=0
++	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
++	do
++		eval "value=\$GIT_PUSH_OPTION_$i"
++		case "$value" in
++		echoback=*)
++			echo "echo from the pre-receive-hook: ${value#*=}" >&2
++			;;
++		reject)
++			exit 1
++		esac
++		i=$((i + 1))
++	done
++fi
+diff -ruN ../pibooth_local_copy/.git/hooks/prepare-commit-msg.sample ./.git/hooks/prepare-commit-msg.sample
+--- ../pibooth_local_copy/.git/hooks/prepare-commit-msg.sample	1969-12-31 19:00:00
++++ ./.git/hooks/prepare-commit-msg.sample	2025-05-16 14:02:33
+@@ -0,0 +1,42 @@
++#!/bin/sh
++#
++# An example hook script to prepare the commit log message.
++# Called by "git commit" with the name of the file that has the
++# commit message, followed by the description of the commit
++# message's source.  The hook's purpose is to edit the commit
++# message file.  If the hook fails with a non-zero status,
++# the commit is aborted.
++#
++# To enable this hook, rename this file to "prepare-commit-msg".
++
++# This hook includes three examples. The first one removes the
++# "# Please enter the commit message..." help message.
++#
++# The second includes the output of "git diff --name-status -r"
++# into the message, just before the "git status" output.  It is
++# commented because it doesn't cope with --amend or with squashed
++# commits.
++#
++# The third example adds a Signed-off-by line to the message, that can
++# still be edited.  This is rarely a good idea.
++
++COMMIT_MSG_FILE=$1
++COMMIT_SOURCE=$2
++SHA1=$3
++
++/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"
++
++# case "$COMMIT_SOURCE,$SHA1" in
++#  ,|template,)
++#    /usr/bin/perl -i.bak -pe '
++#       print "\n" . `git diff --cached --name-status -r`
++# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
++#  *) ;;
++# esac
++
++# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
++# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
++# if test -z "$COMMIT_SOURCE"
++# then
++#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
++# fi
+diff -ruN ../pibooth_local_copy/.git/hooks/push-to-checkout.sample ./.git/hooks/push-to-checkout.sample
+--- ../pibooth_local_copy/.git/hooks/push-to-checkout.sample	1969-12-31 19:00:00
++++ ./.git/hooks/push-to-checkout.sample	2025-05-16 14:02:33
+@@ -0,0 +1,78 @@
++#!/bin/sh
++
++# An example hook script to update a checked-out tree on a git push.
++#
++# This hook is invoked by git-receive-pack(1) when it reacts to git
++# push and updates reference(s) in its repository, and when the push
++# tries to update the branch that is currently checked out and the
++# receive.denyCurrentBranch configuration variable is set to
++# updateInstead.
++#
++# By default, such a push is refused if the working tree and the index
++# of the remote repository has any difference from the currently
++# checked out commit; when both the working tree and the index match
++# the current commit, they are updated to match the newly pushed tip
++# of the branch. This hook is to be used to override the default
++# behaviour; however the code below reimplements the default behaviour
++# as a starting point for convenient modification.
++#
++# The hook receives the commit with which the tip of the current
++# branch is going to be updated:
++commit=$1
++
++# It can exit with a non-zero status to refuse the push (when it does
++# so, it must not modify the index or the working tree).
++die () {
++	echo >&2 "$*"
++	exit 1
++}
++
++# Or it can make any necessary changes to the working tree and to the
++# index to bring them to the desired state when the tip of the current
++# branch is updated to the new commit, and exit with a zero status.
++#
++# For example, the hook can simply run git read-tree -u -m HEAD "$1"
++# in order to emulate git fetch that is run in the reverse direction
++# with git push, as the two-tree form of git read-tree -u -m is
++# essentially the same as git switch or git checkout that switches
++# branches while keeping the local changes in the working tree that do
++# not interfere with the difference between the branches.
++
++# The below is a more-or-less exact translation to shell of the C code
++# for the default behaviour for git's push-to-checkout hook defined in
++# the push_to_deploy() function in builtin/receive-pack.c.
++#
++# Note that the hook will be executed from the repository directory,
++# not from the working tree, so if you want to perform operations on
++# the working tree, you will have to adapt your code accordingly, e.g.
++# by adding "cd .." or using relative paths.
++
++if ! git update-index -q --ignore-submodules --refresh
++then
++	die "Up-to-date check failed"
++fi
++
++if ! git diff-files --quiet --ignore-submodules --
++then
++	die "Working directory has unstaged changes"
++fi
++
++# This is a rough translation of:
++#
++#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
++if git cat-file -e HEAD 2>/dev/null
++then
++	head=HEAD
++else
++	head=$(git hash-object -t tree --stdin </dev/null)
++fi
++
++if ! git diff-index --quiet --cached --ignore-submodules $head --
++then
++	die "Working directory has staged changes"
++fi
++
++if ! git read-tree -u -m "$commit"
++then
++	die "Could not update working tree to new HEAD"
++fi
+diff -ruN ../pibooth_local_copy/.git/hooks/sendemail-validate.sample ./.git/hooks/sendemail-validate.sample
+--- ../pibooth_local_copy/.git/hooks/sendemail-validate.sample	1969-12-31 19:00:00
++++ ./.git/hooks/sendemail-validate.sample	2025-05-16 14:02:33
+@@ -0,0 +1,77 @@
++#!/bin/sh
++
++# An example hook script to validate a patch (and/or patch series) before
++# sending it via email.
++#
++# The hook should exit with non-zero status after issuing an appropriate
++# message if it wants to prevent the email(s) from being sent.
++#
++# To enable this hook, rename this file to "sendemail-validate".
++#
++# By default, it will only check that the patch(es) can be applied on top of
++# the default upstream branch without conflicts in a secondary worktree. After
++# validation (successful or not) of the last patch of a series, the worktree
++# will be deleted.
++#
++# The following config variables can be set to change the default remote and
++# remote ref that are used to apply the patches against:
++#
++#   sendemail.validateRemote (default: origin)
++#   sendemail.validateRemoteRef (default: HEAD)
++#
++# Replace the TODO placeholders with appropriate checks according to your
++# needs.
++
++validate_cover_letter () {
++	file="$1"
++	# TODO: Replace with appropriate checks (e.g. spell checking).
++	true
++}
++
++validate_patch () {
++	file="$1"
++	# Ensure that the patch applies without conflicts.
++	git am -3 "$file" || return
++	# TODO: Replace with appropriate checks for this patch
++	# (e.g. checkpatch.pl).
++	true
++}
++
++validate_series () {
++	# TODO: Replace with appropriate checks for the whole series
++	# (e.g. quick build, coding style checks, etc.).
++	true
++}
++
++# main -------------------------------------------------------------------------
++
++if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
++then
++	remote=$(git config --default origin --get sendemail.validateRemote) &&
++	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
++	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
++	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
++	git config --replace-all sendemail.validateWorktree "$worktree"
++else
++	worktree=$(git config --get sendemail.validateWorktree)
++fi || {
++	echo "sendemail-validate: error: failed to prepare worktree" >&2
++	exit 1
++}
++
++unset GIT_DIR GIT_WORK_TREE
++cd "$worktree" &&
++
++if grep -q "^diff --git " "$1"
++then
++	validate_patch "$1"
++else
++	validate_cover_letter "$1"
++fi &&
++
++if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
++then
++	git config --unset-all sendemail.validateWorktree &&
++	trap 'git worktree remove -ff "$worktree"' EXIT &&
++	validate_series
++fi
+diff -ruN ../pibooth_local_copy/.git/hooks/update.sample ./.git/hooks/update.sample
+--- ../pibooth_local_copy/.git/hooks/update.sample	1969-12-31 19:00:00
++++ ./.git/hooks/update.sample	2025-05-16 14:02:33
+@@ -0,0 +1,128 @@
++#!/bin/sh
++#
++# An example hook script to block unannotated tags from entering.
++# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
++#
++# To enable this hook, rename this file to "update".
++#
++# Config
++# ------
++# hooks.allowunannotated
++#   This boolean sets whether unannotated tags will be allowed into the
++#   repository.  By default they won't be.
++# hooks.allowdeletetag
++#   This boolean sets whether deleting tags will be allowed in the
++#   repository.  By default they won't be.
++# hooks.allowmodifytag
++#   This boolean sets whether a tag may be modified after creation. By default
++#   it won't be.
++# hooks.allowdeletebranch
++#   This boolean sets whether deleting branches will be allowed in the
++#   repository.  By default they won't be.
++# hooks.denycreatebranch
++#   This boolean sets whether remotely creating branches will be denied
++#   in the repository.  By default this is allowed.
++#
++
++# --- Command line
++refname="$1"
++oldrev="$2"
++newrev="$3"
++
++# --- Safety check
++if [ -z "$GIT_DIR" ]; then
++	echo "Don't run this script from the command line." >&2
++	echo " (if you want, you could supply GIT_DIR then run" >&2
++	echo "  $0 <ref> <oldrev> <newrev>)" >&2
++	exit 1
++fi
++
++if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
++	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
++	exit 1
++fi
++
++# --- Config
++allowunannotated=$(git config --type=bool hooks.allowunannotated)
++allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
++denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
++allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
++allowmodifytag=$(git config --type=bool hooks.allowmodifytag)
++
++# check for no description
++projectdesc=$(sed -e '1q' "$GIT_DIR/description")
++case "$projectdesc" in
++"Unnamed repository"* | "")
++	echo "*** Project description file hasn't been set" >&2
++	exit 1
++	;;
++esac
++
++# --- Check types
++# if $newrev is 0000...0000, it's a commit to delete a ref.
++zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
++if [ "$newrev" = "$zero" ]; then
++	newrev_type=delete
++else
++	newrev_type=$(git cat-file -t $newrev)
++fi
++
++case "$refname","$newrev_type" in
++	refs/tags/*,commit)
++		# un-annotated tag
++		short_refname=${refname##refs/tags/}
++		if [ "$allowunannotated" != "true" ]; then
++			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
++			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
++			exit 1
++		fi
++		;;
++	refs/tags/*,delete)
++		# delete tag
++		if [ "$allowdeletetag" != "true" ]; then
++			echo "*** Deleting a tag is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/tags/*,tag)
++		# annotated tag
++		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
++		then
++			echo "*** Tag '$refname' already exists." >&2
++			echo "*** Modifying a tag is not allowed in this repository." >&2
++			exit 1
++		fi
++		;;
++	refs/heads/*,commit)
++		# branch
++		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
++			echo "*** Creating a branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/heads/*,delete)
++		# delete branch
++		if [ "$allowdeletebranch" != "true" ]; then
++			echo "*** Deleting a branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	refs/remotes/*,commit)
++		# tracking branch
++		;;
++	refs/remotes/*,delete)
++		# delete tracking branch
++		if [ "$allowdeletebranch" != "true" ]; then
++			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
++			exit 1
++		fi
++		;;
++	*)
++		# Anything else (is there anything else?)
++		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
++		exit 1
++		;;
++esac
++
++# --- Finished
++exit 0
+Binary files ../pibooth_local_copy/.git/index and ./.git/index differ
+diff -ruN ../pibooth_local_copy/.git/info/exclude ./.git/info/exclude
+--- ../pibooth_local_copy/.git/info/exclude	1969-12-31 19:00:00
++++ ./.git/info/exclude	2025-05-16 14:02:33
+@@ -0,0 +1,6 @@
++# git ls-files --others --exclude-from=.git/info/exclude
++# Lines that start with '#' are comments.
++# For a project mostly in C, the following would be a good set of
++# exclude patterns (uncomment them if you want to use them):
++# *.[oa]
++# *~
+diff -ruN ../pibooth_local_copy/.git/logs/HEAD ./.git/logs/HEAD
+--- ../pibooth_local_copy/.git/logs/HEAD	1969-12-31 19:00:00
++++ ./.git/logs/HEAD	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
+diff -ruN ../pibooth_local_copy/.git/logs/refs/heads/master ./.git/logs/refs/heads/master
+--- ../pibooth_local_copy/.git/logs/refs/heads/master	1969-12-31 19:00:00
++++ ./.git/logs/refs/heads/master	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
+diff -ruN ../pibooth_local_copy/.git/logs/refs/remotes/origin/HEAD ./.git/logs/refs/remotes/origin/HEAD
+--- ../pibooth_local_copy/.git/logs/refs/remotes/origin/HEAD	1969-12-31 19:00:00
++++ ./.git/logs/refs/remotes/origin/HEAD	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++0000000000000000000000000000000000000000 b05f1ec53b092ef4bdf7b3600c92b41581ca9424 omgsideburns <91215451+omgsideburns@users.noreply.github.com> 1747418561 -0400	clone: from https://github.com/pibooth/pibooth.git
+Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.idx and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.idx differ
+Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.pack and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.pack differ
+Binary files ../pibooth_local_copy/.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.rev and ./.git/objects/pack/pack-d81f8a82c46479b082d181a975e5fb6f6d7b3656.rev differ
+diff -ruN ../pibooth_local_copy/.git/packed-refs ./.git/packed-refs
+--- ../pibooth_local_copy/.git/packed-refs	1969-12-31 19:00:00
++++ ./.git/packed-refs	2025-05-16 14:02:41
+@@ -0,0 +1,37 @@
++# pack-refs with: peeled fully-peeled sorted 
++6d86f2059b90e61e49a4ae97d4df63f5f46fc4a9 refs/remotes/origin/3.x
++978d9137d29749009a0713e64fb2064b87b190f6 refs/remotes/origin/color_layout
++682a87ee4bd4da042ebb4568c2d11a1e02c232b2 refs/remotes/origin/dependabot/pip/pillow-10.3.0
++9b71b1d7a19f80e61f0acfb21e0ed8625d698d80 refs/remotes/origin/libcamera_2.x
++b05f1ec53b092ef4bdf7b3600c92b41581ca9424 refs/remotes/origin/master
++fa5248e23249b28bf7fa4f31b0295b05f6457426 refs/remotes/origin/sony
++9405ea77dc23669f494ed08159bc3684e4592d63 refs/remotes/origin/test-camera
++c9d6f68232e163f24d936a4ede5838380a5dce26 refs/tags/0.0.1
++d69f9c062202d38f8431f0fb5b23e3b69b45c215 refs/tags/0.0.2
++8df742e1cd81ef6e94a3076ce7885cba8fb14228 refs/tags/0.0.3
++868588530a16849196139c015ef91368217882a5 refs/tags/0.0.4
++fe70e8979c29effe2a91260297945a3178cef26f refs/tags/0.0.5
++a107b84120fa53e3f8b3622876df767d562fd636 refs/tags/0.0.6
++968f34b682bd2b7fceff0786db71f76dc94a1279 refs/tags/0.0.7
++ff38d81abe83d9ba743ecc58d37d1fdfd255bbc4 refs/tags/0.0.8
++ee8c047ebb7bf5900d9519071cb96117337efe61 refs/tags/0.0.9
++360d41ac739210a28216b2fc5d592826e883f662 refs/tags/1.0.0
++43c7867017b8b954a33f0c462b861f50c58a4800 refs/tags/1.0.1
++de65b1e43bc227c81f95eb953190d79e49449d7c refs/tags/1.0.2
++1e780c1c0ca9b24c46c2356435647d020c199476 refs/tags/1.0.3
++cc271a15d16effac97c8f391a32b7fe41624d94d refs/tags/1.0.4
++640aafbd1d56c20da167c5977feefa4e773bc951 refs/tags/1.1.0
++111791f0135261c793823bc8199a8e511de83761 refs/tags/1.1.1
++d6895a85f4a8d11cef2f986ffbf3fb14c83fb06d refs/tags/1.1.2
++970f96c22e603aae5bd643641f1454d74fe221a1 refs/tags/1.1.3
++a28c020b075e9814e369ce79b492b970238e577b refs/tags/1.1.4
++7199850c2d657c7d03d38a97b7cd2cd5dd2c1f07 refs/tags/1.2.0
++79c9fc9d6eddd4be0f50287e38b4c644fa52519a refs/tags/2.0.0
++9cdef9ba1480715f682ffbde350e499a69932d6d refs/tags/2.0.1
++c50b5b13aa65768343a0167269cd0d7d41ce3787 refs/tags/2.0.2
++0ae3ca0e82fcb6ebd6cb72169d22ab389a567a09 refs/tags/2.0.3
++f68dc3a39ec4c8c9371d228dbe51e838a6ade8f2 refs/tags/2.0.4
++cfb01762138717d6584a1a0b299dc0481840727a refs/tags/2.0.5
++718060753f1953cfa3b99dc301908fce69278cd0 refs/tags/2.0.6
++19851a161af6a09f8e5554d8ec2eb7194c980972 refs/tags/2.0.7
++126bafce9ba9cd1f5f09151943f98d5f79a059ba refs/tags/2.0.8
+diff -ruN ../pibooth_local_copy/.git/refs/heads/master ./.git/refs/heads/master
+--- ../pibooth_local_copy/.git/refs/heads/master	1969-12-31 19:00:00
++++ ./.git/refs/heads/master	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++b05f1ec53b092ef4bdf7b3600c92b41581ca9424
+diff -ruN ../pibooth_local_copy/.git/refs/remotes/origin/HEAD ./.git/refs/remotes/origin/HEAD
+--- ../pibooth_local_copy/.git/refs/remotes/origin/HEAD	1969-12-31 19:00:00
++++ ./.git/refs/remotes/origin/HEAD	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++ref: refs/remotes/origin/master
+diff -ruN ../pibooth_local_copy/.github/FUNDING.yml ./.github/FUNDING.yml
+--- ../pibooth_local_copy/.github/FUNDING.yml	1969-12-31 19:00:00
++++ ./.github/FUNDING.yml	2025-05-16 14:02:41
+@@ -0,0 +1 @@
++github: PIBOOTH
+diff -ruN ../pibooth_local_copy/.github/ISSUE_TEMPLATE/bug_report.md ./.github/ISSUE_TEMPLATE/bug_report.md
+--- ../pibooth_local_copy/.github/ISSUE_TEMPLATE/bug_report.md	1969-12-31 19:00:00
++++ ./.github/ISSUE_TEMPLATE/bug_report.md	2025-05-16 14:02:41
+@@ -0,0 +1,28 @@
++---
++name: Bug report
++about: Create a report to help us improve
++title: ''
++labels: bug
++assignees: ''
++
++---
++
++**Describe the bug**
++Give a clear and concise description of what the bug is.
++
++**Steps to reproduce the bug**
++1. Go to '...'
++2. Click on '....'
++3. Scroll down to '....'
++4. See error.
++
++**Logs**
++1. Set the `debug` mode in the config
++2. Post your config file
++3. Copy-paste all the logs from the console
++4. Post the `diagnostic.log` file if you are using a DSLR camera (generated by running the command `pibooth-diag`)
++
++**Environment**
++ - OS [e.g. Raspbian Buster]
++ - Camera [e.g. Rpi camera + Nikon D90]
++ - Pibooth version [e.g. 1.1.2]
+diff -ruN ../pibooth_local_copy/.github/ISSUE_TEMPLATE/feature_request.md ./.github/ISSUE_TEMPLATE/feature_request.md
+--- ../pibooth_local_copy/.github/ISSUE_TEMPLATE/feature_request.md	1969-12-31 19:00:00
++++ ./.github/ISSUE_TEMPLATE/feature_request.md	2025-05-16 14:02:41
+@@ -0,0 +1,17 @@
++---
++name: Feature request
++about: Suggest an idea for this project
++title: ''
++labels: enhancement
++assignees: ''
++
++---
++
++**Is your feature request related to a problem? Please describe.**
++A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]
++
++**Describe the solution you'd like**
++A clear and concise description of what you want to happen.
++
++**Describe alternatives you've considered**
++A clear and concise description of any alternative solutions or features you've considered.
+diff -ruN ../pibooth_local_copy/.github/workflows/tests.yml ./.github/workflows/tests.yml
+--- ../pibooth_local_copy/.github/workflows/tests.yml	1969-12-31 19:00:00
++++ ./.github/workflows/tests.yml	2025-05-16 14:02:41
+@@ -0,0 +1,49 @@
++# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
++# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
++
++name: tests
++
++on:
++  push:
++    branches: [ "master", "3.x" ]
++  pull_request:
++    branches: [ "master", "3.x" ]
++
++jobs:
++  build:
++
++    runs-on: ubuntu-latest
++    strategy:
++      fail-fast: false
++      matrix:
++        python-version: ["3.8", "3.9", "3.10"]
++
++    steps:
++    - uses: actions/checkout@v3
++    - name: Set up Python ${{ matrix.python-version }}
++      uses: actions/setup-python@v3
++      with:
++        python-version: ${{ matrix.python-version }}
++    - name: Install dependencies
++      run: |
++        python -m pip install --upgrade pip
++        python -m pip install flake8 pytest pylint pytest-cov
++        python -m pip install opencv-python
++        python -m pip install -e .
++    - name: Lint with flake8
++      run: |
++        # stop the build if there are Python syntax errors or undefined names
++        flake8 pibooth --count --select=E9,F63,F7,F82 --show-source --statistics
++        # exit-zero treats all errors as warnings.
++        flake8 pibooth --count --exit-zero --max-complexity=10 --max-line-length=160 --statistics
++    - name: Lint with pylint
++      run: |
++        pylint $(git ls-files '*.py') || echo "pylint exited with $?"
++    - name: Test with pytest
++      env:
++        SDL_VIDEODRIVER: dummy
++        CAM_VIDEODRIVER: dummy
++      run: |
++        pytest --cov pibooth
++    - name: Upload coverage to Codecov
++      uses: codecov/codecov-action@v3
+diff -ruN ../pibooth_local_copy/.gitignore ./.gitignore
+--- ../pibooth_local_copy/.gitignore	1969-12-31 19:00:00
++++ ./.gitignore	2025-05-16 14:02:41
+@@ -0,0 +1,77 @@
++# Byte-compiled / optimized / DLL files
++__pycache__/
++*.py[cod]
++*$py.class
++
++# C extensions
++*.so
++
++# Distribution / packaging
++.Python
++build/
++develop-eggs/
++dist/
++downloads/
++eggs/
++.eggs/
++lib/
++lib64/
++parts/
++sdist/
++var/
++*.egg-info/
++.installed.cfg
++*.egg
++
++#IDE 
++.idea
++.project
++.pydevproject
++.settings/
++settings.json
++
++# PyInstaller
++#  Usually these files are written by a python script from a template
++#  before PyInstaller builds the exe, so as to inject date/other infos into it.
++*.manifest
++*.spec
++
++# Installer logs
++pip-log.txt
++pip-delete-this-directory.txt
++
++# Unit test / coverage reports
++htmlcov/
++.tox/
++.coverage
++.coverage.*
++.cache
++nosetests.xml
++coverage.xml
++*,cover
++.hypothesis/
++.pytest_cache/
++
++# Translations
++*.mo
++*.pot
++
++# Django stuff:
++*.log
++local_settings.py
++
++# Flask instance folder
++instance/
++
++# Sphinx documentation
++docs/_build/
++
++# PyBuilder
++target/
++
++# IPython Notebook
++.ipynb_checkpoints
++
++# pyenv
++.python-version
++
+diff -ruN ../pibooth_local_copy/LICENSE ./LICENSE
+--- ../pibooth_local_copy/LICENSE	1969-12-31 19:00:00
++++ ./LICENSE	2025-05-16 14:02:41
+@@ -0,0 +1,21 @@
++The MIT License (MIT)
++
++Copyright (c) 2017 Vincent Verdeil and Antoine Rousseaux
++
++Permission is hereby granted, free of charge, to any person obtaining a copy of
++this software and associated documentation files (the "Software"), to deal in
++the Software without restriction, including without limitation the rights to
++use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
++of the Software, and to permit persons to whom the Software is furnished to do
++so, subject to the following conditions:
++
++The above copyright notice and this permission notice shall be included in all
++copies or substantial portions of the Software.
++
++THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
++IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
++FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
++AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
++LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
++OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
++SOFTWARE.
+diff -ruN ../pibooth_local_copy/README.rst ./README.rst
+--- ../pibooth_local_copy/README.rst	1969-12-31 19:00:00
++++ ./README.rst	2025-05-16 14:02:41
+@@ -0,0 +1,106 @@
++|Pibooth|
++
++|PythonVersions| |PypiPackage| |Downloads| |Tests| |Codecov|
++
++The ``pibooth`` project provides a photobooth application *out-of-the-box* in pure Python
++for Raspberry Pi. Have a look to the `wiki <https://github.com/pibooth/pibooth/wiki>`_
++to discover some realizations from GitHub users, and don't hesitate to send us
++photos of your version.
++
++.. image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/images/background_samples.png
++   :align: center
++   :alt: Settings
++
++Features
++--------
++
++* Interface available in Danish, Dutch, English, French, German, Hungarian, Norwegian, Portuguese (Portugal and Brazil), Spanish and Swedish (customizable)
++* Capture from 1 to 4 photos and concatenate them in a final picture
++* Support all cameras compatible with gPhoto2, OpenCV and Raspberry Pi
++* Support for hardware buttons and lamps on Raspberry Pi GPIO
++* Fully driven from hardware buttons / keyboard / mouse / touchscreen
++* Auto-start at the Raspberry Pi startup
++* Animate captures from the last sequence during idle time
++* Store final pictures and the individual captures
++* Printing final pictures using CUPS server (printing queue indication)
++* Custom texts can be added on the final picture (customizable fonts, colors, alignments)
++* Custom background(s) and overlay(s) can be added on the final picture
++* All settings available in a configuration file (most common options in a graphical interface)
++* Highly customizable thanks to its plugin system, you can install
++  `plugins developed by the community from PyPI  <https://pypi.org/search/?q=pibooth>`_
++  or develop your own plugin.
++
++Documentation
++-------------
++
++.. image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/images/documentation.png
++   :align: center
++   :alt: Documentation
++   :target: https://pibooth.readthedocs.io/en/stable
++   :height: 200px
++
++Plugins
++-------
++
++Here is a list of known plugins compatible with Pibooth
++
++Pibooth organisation's plugin
++=============================
++
++- `pibooth-picture-template <https://github.com/pibooth/pibooth-picture-template>`_
++- `pibooth-google-photo <https://github.com/pibooth/pibooth-google-photo>`_
++- `pibooth-sound-effects <https://github.com/pibooth/pibooth-sound-effects>`_
++- `pibooth_dropbox <https://github.com/pibooth/pibooth-dropbox>`_
++- `pibooth-qrcode <https://github.com/pibooth/pibooth-qrcode>`_
++- `pibooth-extra-lights <https://github.com/pibooth/pibooth-extra-lights>`_
++
++Third-party plugins
++===================
++
++Third-party plugins can be found on GitHub or on `plugins on PyPI  <https://pypi.org/search/?q=pibooth>`_.
++Here is a short list:
++
++- `pibooth-lcd-display <https://pypi.org/project/pibooth-lcd-display>`_
++- `pibooth-oled-display <https://pypi.org/project/pibooth-oled-display>`_
++- `pibooth-neopixel_spi <https://github.com/peteoheat/pibooth-neopixel_spi>`_
++- `pibooth-telegram-upload <https://pypi.org/project/pibooth-telegram-upload>`_
++- `pibooth-s3-upload <https://pypi.org/project/pibooth-s3-upload>`_
++
++Sponsors
++--------
++
++An enormous thanks to our sponsors:
++
++- `@andhey <https://github.com/andhey>`_
++- `@vo55 <https://github.com/vo55>`_
++- `@laurammiller <https://github.com/laurammiller>`_
++- `@neilrenfrey <https://github.com/neilrenfrey>`_
++- `@agrovista <https://github.com/agrovista>`_ 
++- `@mozdi <https://github.com/mozdi>`_
++- `@MikkeBoomBoom <https://github.com/MikkeBoomBoom>`_
++- `@fatgeek <https://github.com/fatgeek>`_
++
++It means a lot to us!
++
++.. |Pibooth| image:: https://raw.githubusercontent.com/pibooth/pibooth/master/docs/pibooth.png
++   :align: middle
++
++.. |PythonVersions| image:: https://img.shields.io/badge/python-3.6+-red.svg
++   :target: https://www.python.org/downloads
++   :alt: Python 3.6+
++
++.. |PypiPackage| image:: https://badge.fury.io/py/pibooth.svg
++   :target: https://pypi.org/project/pibooth
++   :alt: PyPi package
++
++.. |Downloads| image:: https://img.shields.io/pypi/dm/pibooth?color=purple
++   :target: https://pypi.org/project/pibooth
++   :alt: PyPi downloads
++
++.. |Tests| image:: https://github.com/pibooth/pibooth/actions/workflows/tests.yml/badge.svg?branch=master
++   :target: https://github.com/pibooth/pibooth/actions/workflows/tests.yml?query=branch%3Amaster
++   :alt: Tests
++
++.. |Codecov| image:: https://codecov.io/gh/pibooth/pibooth/branch/master/graph/badge.svg
++    :target: https://codecov.io/gh/pibooth/pibooth
++    :alt: Codecov
+diff -ruN ../pibooth_local_copy/__init__.py ./__init__.py
+--- ../pibooth_local_copy/__init__.py	2025-05-16 13:26:44
++++ ./__init__.py	1969-12-31 19:00:00
+@@ -1,15 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-"""A photo booth application in pure Python for the Raspberry Pi."""
+-
+-__version__ = "2.0.8"
+-
+-try:
+-
+-    import pluggy
+-
+-    # Marker to be imported and used in plugins (and for own implementations)
+-    hookimpl = pluggy.HookimplMarker('pibooth')
+-
+-except ImportError:
+-    pass  # When running the setup.py, pluggy is not yet installed
+Binary files ../pibooth_local_copy/__pycache__/__init__.cpython-37.pyc and ./__pycache__/__init__.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/booth.cpython-37.pyc and ./__pycache__/booth.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/counters.cpython-37.pyc and ./__pycache__/counters.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/language.cpython-37.pyc and ./__pycache__/language.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/printer.cpython-37.pyc and ./__pycache__/printer.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/states.cpython-37.pyc and ./__pycache__/states.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/__pycache__/utils.cpython-37.pyc and ./__pycache__/utils.cpython-37.pyc differ
+diff -ruN ../pibooth_local_copy/booth.py ./booth.py
+--- ../pibooth_local_copy/booth.py	2025-05-16 13:26:44
++++ ./booth.py	1969-12-31 19:00:00
+@@ -1,495 +0,0 @@
+-#!/usr/bin/env python3
+-# -*- coding: utf-8 -*-
+-
+-"""Pibooth main module.
+-"""
+-
+-import os
+-import os.path as osp
+-import tempfile
+-import shutil
+-import logging
+-import argparse
+-import multiprocessing
+-from warnings import filterwarnings
+-
+-import pygame
+-from gpiozero import Device, ButtonBoard, LEDBoard, pi_info
+-from gpiozero.exc import BadPinFactory, PinFactoryFallback
+-
+-import pibooth
+-from pibooth import fonts
+-from pibooth import language
+-from pibooth.counters import Counters
+-from pibooth.utils import (LOGGER, PoolingTimer, configure_logging, get_crash_message,
+-                           set_logging_level, get_event_pos)
+-from pibooth.states import StateMachine
+-from pibooth.plugins import create_plugin_manager
+-from pibooth.view import PiWindow
+-from pibooth.config import PiConfigParser, PiConfigMenu
+-from pibooth.printer import PRINTER_TASKS_UPDATED, Printer
+-
+-
+-# Set the default pin factory to a mock factory if pibooth is not started a Raspberry Pi
+-try:
+-    filterwarnings("ignore", category=PinFactoryFallback)
+-    GPIO_INFO = "on Raspberry pi {0}".format(pi_info().model)
+-except BadPinFactory:
+-    from gpiozero.pins.mock import MockFactory
+-    Device.pin_factory = MockFactory()
+-    GPIO_INFO = "without physical GPIO, fallback to GPIO mock"
+-
+-
+-BUTTONDOWN = pygame.USEREVENT + 1
+-
+-
+-class PiApplication(object):
+-
+-    """Main class representing the ``pibooth`` software.
+-    The following attributes are available for use in plugins:
+-
+-    :attr capture_nbr: number of capture to be done in the current sequence
+-    :type capture_nbr: int
+-    :attr capture_date: date (%Y-%m-%d-%H-%M-%S) of the first capture of the current sequence
+-    :type capture_date: str
+-    :attr capture_choices: possible choices of captures numbers.
+-    :type capture_choices: tuple
+-    :attr previous_picture: picture generated during last sequence
+-    :type previous_picture: :py:class:`PIL.Image`
+-    :attr previous_animated: infinite list of picture to display during animation
+-    :type previous_animated: :py:func:`itertools.cycle`
+-    :attr previous_picture_file: file name of the picture generated during last sequence
+-    :type previous_picture_file: str
+-    :attr count: holder for counter values
+-    :type count: :py:class:`pibooth.counters.Counters`
+-    :attr camera: camera used
+-    :type camera: :py:class:`pibooth.camera.base.BaseCamera`
+-    :attr buttons: access to hardware buttons ``capture`` and ``printer``
+-    :type buttons: :py:class:`gpiozero.ButtonBoard`
+-    :attr leds: access to hardware LED ``capture`` and ``printer``
+-    :attr leds: :py:class:`gpiozero.LEDBoard`
+-    :attr printer: printer used
+-    :type printer: :py:class:`pibooth.printer.Printer`
+-    """
+-
+-    def __init__(self, config, plugin_manager):
+-        self._pm = plugin_manager
+-        self._config = config
+-
+-        # Create directories where pictures are saved
+-        for savedir in config.gettuple('GENERAL', 'directory', 'path'):
+-            if osp.isdir(savedir) and config.getboolean('GENERAL', 'debug'):
+-                shutil.rmtree(savedir)
+-            if not osp.isdir(savedir):
+-                os.makedirs(savedir)
+-
+-        # Create window of (width, height)
+-        init_size = self._config.gettyped('WINDOW', 'size')
+-        init_debug = self._config.getboolean('GENERAL', 'debug')
+-        init_color = self._config.gettyped('WINDOW', 'background')
+-        init_text_color = self._config.gettyped('WINDOW', 'text_color')
+-        if not isinstance(init_color, (tuple, list)):
+-            init_color = self._config.getpath('WINDOW', 'background')
+-
+-        title = 'Pibooth v{}'.format(pibooth.__version__)
+-        if not isinstance(init_size, str):
+-            self._window = PiWindow(title, init_size, color=init_color,
+-                                    text_color=init_text_color, debug=init_debug)
+-        else:
+-            self._window = PiWindow(title, color=init_color,
+-                                    text_color=init_text_color, debug=init_debug)
+-
+-        self._menu = None
+-        self._multipress_timer = PoolingTimer(config.getfloat('CONTROLS', 'multi_press_delay'), False)
+-        self._fingerdown_events = []
+-
+-        # Define states of the application
+-        self._machine = StateMachine(self._pm, self._config, self, self._window)
+-        self._machine.add_state('wait')
+-        self._machine.add_state('choose')
+-        self._machine.add_state('chosen')
+-        self._machine.add_state('preview')
+-        self._machine.add_state('capture')
+-        self._machine.add_state('processing')
+-        self._machine.add_state('print')
+-        self._machine.add_state('finish')
+-
+-        # ---------------------------------------------------------------------
+-        # Variables shared with plugins
+-        # Change them may break plugins compatibility
+-        self.capture_nbr = None
+-        self.capture_date = None
+-        self.capture_choices = (4, 1)
+-        self.previous_picture = None
+-        self.previous_animated = None
+-        self.previous_picture_file = None
+-
+-        self.count = Counters(self._config.join_path("counters.pickle"),
+-                              taken=0, printed=0, forgotten=0,
+-                              remaining_duplicates=self._config.getint('PRINTER', 'max_duplicates'))
+-
+-        self.camera = self._pm.hook.pibooth_setup_camera(cfg=self._config)
+-
+-        self.buttons = ButtonBoard(capture="BOARD" + config.get('CONTROLS', 'picture_btn_pin'),
+-                                   printer="BOARD" + config.get('CONTROLS', 'print_btn_pin'),
+-                                   hold_time=config.getfloat('CONTROLS', 'debounce_delay'),
+-                                   pull_up=True)
+-        self.buttons.capture.when_held = self._on_button_capture_held
+-        self.buttons.printer.when_held = self._on_button_printer_held
+-
+-        self.leds = LEDBoard(capture="BOARD" + config.get('CONTROLS', 'picture_led_pin'),
+-                             printer="BOARD" + config.get('CONTROLS', 'print_led_pin'))
+-
+-        self.printer = Printer(config.get('PRINTER', 'printer_name'),
+-                               config.getint('PRINTER', 'max_pages'),
+-                               config.gettyped('PRINTER', 'printer_options'),
+-                               self.count)
+-        # ---------------------------------------------------------------------
+-
+-    def _initialize(self):
+-        """Restore the application with initial parameters defined in the
+-        configuration file.
+-        Only parameters that can be changed at runtime are restored.
+-        """
+-        # Handle the language configuration
+-        language.CURRENT = self._config.get('GENERAL', 'language')
+-        fonts.CURRENT = fonts.get_filename(self._config.get('WINDOW', 'font'))
+-
+-        # Set the captures choices
+-        choices = self._config.gettuple('PICTURE', 'captures', int)
+-        for chx in choices:
+-            if chx not in [1, 2, 3, 4]:
+-                LOGGER.warning("Invalid captures number '%s' in config, fallback to '%s'",
+-                               chx, self.capture_choices)
+-                choices = self.capture_choices
+-                break
+-        self.capture_choices = choices
+-
+-        # Handle autostart of the application
+-        self._config.handle_autostart()
+-
+-        self._window.arrow_location = self._config.get('WINDOW', 'arrows')
+-        self._window.arrow_offset = self._config.getint('WINDOW', 'arrows_x_offset')
+-        self._window.text_color = self._config.gettyped('WINDOW', 'text_color')
+-        self._window.drop_cache()
+-
+-        # Handle window size
+-        size = self._config.gettyped('WINDOW', 'size')
+-        if isinstance(size, str) and size.lower() == 'fullscreen':
+-            if not self._window.is_fullscreen:
+-                self._window.toggle_fullscreen()
+-        else:
+-            if self._window.is_fullscreen:
+-                self._window.toggle_fullscreen()
+-        self._window.debug = self._config.getboolean('GENERAL', 'debug')
+-
+-        # Handle debug mode
+-        if not self._config.getboolean('GENERAL', 'debug'):
+-            set_logging_level()  # Restore default level
+-            self._machine.add_failsafe_state('failsafe')
+-        else:
+-            set_logging_level(logging.DEBUG)
+-            self._machine.remove_state('failsafe')
+-
+-        # Reset the print counter (in case of max_pages is reached)
+-        self.printer.max_pages = self._config.getint('PRINTER', 'max_pages')
+-
+-    def _on_button_capture_held(self):
+-        """Called when the capture button is pressed.
+-        """
+-        if all(self.buttons.value):
+-            self.buttons.capture.hold_repeat = True
+-            if self._multipress_timer.elapsed() == 0:
+-                self._multipress_timer.start()
+-            if self._multipress_timer.is_timeout():
+-                # Capture was held while printer was pressed
+-                if self._menu and self._menu.is_shown():
+-                    # Convert HW button events to keyboard events for menu
+-                    event = self._menu.create_back_event()
+-                    LOGGER.debug("BUTTONDOWN: generate MENU-ESC event")
+-                else:
+-                    event = pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
+-                                               button=self.buttons)
+-                    LOGGER.debug("BUTTONDOWN: generate DOUBLE buttons event")
+-                self.buttons.capture.hold_repeat = False
+-                self._multipress_timer.reset()
+-                pygame.event.post(event)
+-        else:
+-            # Capture was held but printer not pressed
+-            if self._menu and self._menu.is_shown():
+-                # Convert HW button events to keyboard events for menu
+-                event = self._menu.create_next_event()
+-                LOGGER.debug("BUTTONDOWN: generate MENU-NEXT event")
+-            else:
+-                event = pygame.event.Event(BUTTONDOWN, capture=1, printer=0,
+-                                           button=self.buttons.capture)
+-                LOGGER.debug("BUTTONDOWN: generate CAPTURE button event")
+-            self.buttons.capture.hold_repeat = False
+-            self._multipress_timer.reset()
+-            pygame.event.post(event)
+-
+-    def _on_button_printer_held(self):
+-        """Called when the printer button is pressed.
+-        """
+-        if all(self.buttons.value):
+-            # Printer was held while capture was pressed
+-            # but don't do anything here, let capture_held handle it instead
+-            pass
+-        else:
+-            # Printer was held but capture not pressed
+-            if self._menu and self._menu.is_shown():
+-                # Convert HW button events to keyboard events for menu
+-                event = self._menu.create_click_event()
+-                LOGGER.debug("BUTTONDOWN: generate MENU-APPLY event")
+-            else:
+-                event = pygame.event.Event(BUTTONDOWN, capture=0, printer=1,
+-                                           button=self.buttons.printer)
+-                LOGGER.debug("BUTTONDOWN: generate PRINTER event")
+-            pygame.event.post(event)
+-
+-    @property
+-    def picture_filename(self):
+-        """Return the final picture file name.
+-        """
+-        if not self.capture_date:
+-            raise EnvironmentError("The 'capture_date' attribute is not set yet")
+-        return "{}_pibooth.jpg".format(self.capture_date)
+-
+-    def find_quit_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.QUIT:
+-                return event
+-        return None
+-
+-    def find_settings_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
+-                return event
+-            if event.type == BUTTONDOWN and event.capture and event.printer:
+-                return event
+-            if event.type == pygame.FINGERDOWN:
+-                # Press but not release
+-                self._fingerdown_events.append(event)
+-            if event.type == pygame.FINGERUP:
+-                # Resetting touch_events
+-                self._fingerdown_events = []
+-            if len(self._fingerdown_events) > 3:
+-                # 4 fingers on the screen trigger the menu
+-                self._fingerdown_events = []
+-                return pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
+-                                          button=self.buttons)
+-        return None
+-
+-    def find_fullscreen_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.KEYDOWN and \
+-                    event.key == pygame.K_f and pygame.key.get_mods() & pygame.KMOD_CTRL:
+-                return event
+-        return None
+-
+-    def find_resize_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.VIDEORESIZE:
+-                return event
+-        return None
+-
+-    def find_capture_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.KEYDOWN and event.key == pygame.K_p:
+-                return event
+-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+-                pos = get_event_pos(self._window.display_size, event)
+-                rect = self._window.get_rect()
+-                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
+-                    return event
+-            if event.type == BUTTONDOWN and event.capture:
+-                return event
+-        return None
+-
+-    def find_print_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.KEYDOWN and event.key == pygame.K_e\
+-                    and pygame.key.get_mods() & pygame.KMOD_CTRL:
+-                return event
+-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+-                pos = get_event_pos(self._window.display_size, event)
+-                rect = self._window.get_rect()
+-                if pygame.Rect(rect.width // 2, 0, rect.width // 2, rect.height).collidepoint(pos):
+-                    return event
+-            if event.type == BUTTONDOWN and event.printer:
+-                return event
+-        return None
+-
+-    def find_print_status_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == PRINTER_TASKS_UPDATED:
+-                return event
+-        return None
+-
+-    def find_choice_event(self, events):
+-        """Return the first found event if found in the list.
+-        """
+-        for event in events:
+-            if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
+-                return event
+-            if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
+-                return event
+-            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+-                pos = get_event_pos(self._window.display_size, event)
+-                rect = self._window.get_rect()
+-                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
+-                    event.key = pygame.K_LEFT
+-                else:
+-                    event.key = pygame.K_RIGHT
+-                return event
+-            if event.type == BUTTONDOWN:
+-                if event.capture:
+-                    event.key = pygame.K_LEFT
+-                else:
+-                    event.key = pygame.K_RIGHT
+-                return event
+-        return None
+-
+-    def main_loop(self):
+-        try:
+-            fps = 40
+-            clock = pygame.time.Clock()
+-            self._initialize()
+-            self._pm.hook.pibooth_startup(cfg=self._config, app=self)
+-            self._machine.set_state('wait')
+-
+-            while True:
+-                events = list(pygame.event.get())
+-
+-                if self.find_quit_event(events):
+-                    break
+-
+-                if self.find_fullscreen_event(events):
+-                    self._window.toggle_fullscreen()
+-
+-                event = self.find_resize_event(events)
+-                if event:
+-                    self._window.resize(event.size)
+-
+-                if not self._menu and self.find_settings_event(events):
+-                    self.camera.stop_preview()
+-                    self.leds.off()
+-                    self._menu = PiConfigMenu(self._pm, self._config, self, self._window)
+-                    self._menu.show()
+-                    self.leds.blink(on_time=0.1, off_time=1)
+-                elif self._menu and self._menu.is_shown():
+-                    self._menu.process(events)
+-                elif self._menu and not self._menu.is_shown():
+-                    self.leds.off()
+-                    self._initialize()
+-                    self._machine.set_state('wait')
+-                    self._menu = None
+-                else:
+-                    self._machine.process(events)
+-
+-                pygame.display.update()
+-                clock.tick(fps)  # Ensure the program will never run at more than <fps> frames per second
+-
+-        except Exception as ex:
+-            LOGGER.error(str(ex), exc_info=True)
+-            LOGGER.error(get_crash_message())
+-        finally:
+-            self._pm.hook.pibooth_cleanup(app=self)
+-            pygame.quit()
+-
+-
+-def main():
+-    """Application entry point.
+-    """
+-    if hasattr(multiprocessing, 'set_start_method'):
+-        # Avoid use 'fork': safely forking a multithreaded process is problematic
+-        multiprocessing.set_start_method('spawn')
+-
+-    parser = argparse.ArgumentParser(usage="%(prog)s [options]", description=pibooth.__doc__)
+-
+-    parser.add_argument("config_directory", nargs='?', default="~/.config/pibooth",
+-                        help=u"path to configuration directory (default: %(default)s)")
+-
+-    parser.add_argument('--version', action='version', version=pibooth.__version__,
+-                        help=u"show program's version number and exit")
+-
+-    parser.add_argument("--config", action='store_true',
+-                        help=u"edit the current configuration and exit")
+-
+-    parser.add_argument("--translate", action='store_true',
+-                        help=u"edit the GUI translations and exit")
+-
+-    parser.add_argument("--reset", action='store_true',
+-                        help=u"restore the default configuration/translations and exit")
+-
+-    parser.add_argument("--nolog", action='store_true', default=False,
+-                        help=u"don't save console output in a file (avoid filling the /tmp directory)")
+-
+-    group = parser.add_mutually_exclusive_group()
+-    group.add_argument("-v", "--verbose", dest='logging', action='store_const', const=logging.DEBUG,
+-                       help=u"report more information about operations", default=logging.INFO)
+-    group.add_argument("-q", "--quiet", dest='logging', action='store_const', const=logging.WARNING,
+-                       help=u"report only errors and warnings", default=logging.INFO)
+-
+-    options = parser.parse_args()
+-
+-    if not options.nolog:
+-        filename = osp.join(tempfile.gettempdir(), 'pibooth.log')
+-    else:
+-        filename = None
+-    configure_logging(options.logging, '[ %(levelname)-8s] %(name)-18s: %(message)s', filename=filename)
+-
+-    plugin_manager = create_plugin_manager()
+-
+-    # Load the configuration
+-    config = PiConfigParser(osp.join(options.config_directory, "pibooth.cfg"), plugin_manager, not options.reset)
+-
+-    # Register plugins
+-    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
+-                                    config.gettuple('GENERAL', 'plugins_disabled', str))
+-    LOGGER.info("Installed plugins: %s", ", ".join(
+-        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()]))
+-
+-    # Load the languages
+-    language.init(config.join_path("translations.cfg"), options.reset)
+-
+-    # Update configuration with plugins ones
+-    plugin_manager.hook.pibooth_configure(cfg=config)
+-
+-    # Ensure config files are present in case of first pibooth launch
+-    if not options.reset:
+-        if not osp.isfile(config.filename):
+-            config.save(default=True)
+-        plugin_manager.hook.pibooth_reset(cfg=config, hard=False)
+-
+-    if options.config:
+-        LOGGER.info("Editing the pibooth configuration...")
+-        config.edit()
+-    elif options.translate:
+-        LOGGER.info("Editing the GUI translations...")
+-        language.edit()
+-    elif options.reset:
+-        config.save(default=True)
+-        plugin_manager.hook.pibooth_reset(cfg=config, hard=True)
+-    else:
+-        LOGGER.info("Starting the photo booth application %s", GPIO_INFO)
+-        app = PiApplication(config, plugin_manager)
+-        app.main_loop()
+-
+-
+-if __name__ == '__main__':
+-    main()
+diff -ruN ../pibooth_local_copy/camera/__init__.py ./camera/__init__.py
+--- ../pibooth_local_copy/camera/__init__.py	2025-05-16 13:26:45
++++ ./camera/__init__.py	1969-12-31 19:00:00
+@@ -1,52 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-from pibooth.utils import LOGGER
+-from pibooth.camera.rpi import RpiCamera, get_rpi_camera_proxy
+-from pibooth.camera.gphoto import GpCamera, get_gp_camera_proxy
+-from pibooth.camera.opencv import CvCamera, get_cv_camera_proxy
+-from pibooth.camera.hybrid import HybridRpiCamera, HybridCvCamera
+-
+-
+-def close_proxy(rpi_cam_proxy, gp_cam_proxy, cv_cam_proxy):
+-    """Close proxy drivers.
+-    """
+-    if rpi_cam_proxy:
+-        RpiCamera(rpi_cam_proxy).quit()
+-    if gp_cam_proxy:
+-        GpCamera(gp_cam_proxy).quit()
+-    if cv_cam_proxy:
+-        CvCamera(cv_cam_proxy).quit()
+-
+-
+-def find_camera():
+-    """Initialize the camera depending of the connected one. The priority order
+-    is chosen in order to have best rendering during preview and to take captures.
+-    The gPhoto2 camera is first (drivers most restrictive) to avoid connection
+-    concurence in case of DSLR compatible with OpenCV.
+-    """
+-    rpi_cam_proxy = get_rpi_camera_proxy()
+-    gp_cam_proxy = get_gp_camera_proxy()
+-    cv_cam_proxy = get_cv_camera_proxy()
+-
+-    if rpi_cam_proxy and gp_cam_proxy:
+-        LOGGER.info("Configuring hybrid camera (Picamera + gPhoto2) ...")
+-        close_proxy(None, None, cv_cam_proxy)
+-        return HybridRpiCamera(rpi_cam_proxy, gp_cam_proxy)
+-    elif cv_cam_proxy and gp_cam_proxy:
+-        LOGGER.info("Configuring hybrid camera (OpenCV + gPhoto2) ...")
+-        close_proxy(rpi_cam_proxy, None, None)
+-        return HybridCvCamera(cv_cam_proxy, gp_cam_proxy)
+-    elif gp_cam_proxy:
+-        LOGGER.info("Configuring gPhoto2 camera ...")
+-        close_proxy(rpi_cam_proxy, None, cv_cam_proxy)
+-        return GpCamera(gp_cam_proxy)
+-    elif rpi_cam_proxy:
+-        LOGGER.info("Configuring Picamera camera ...")
+-        close_proxy(None, gp_cam_proxy, cv_cam_proxy)
+-        return RpiCamera(rpi_cam_proxy)
+-    elif cv_cam_proxy:
+-        LOGGER.info("Configuring OpenCV camera ...")
+-        close_proxy(rpi_cam_proxy, gp_cam_proxy, None)
+-        return CvCamera(cv_cam_proxy)
+-
+-    raise EnvironmentError("Neither Raspberry Pi nor GPhoto2 nor OpenCV camera detected")
+Binary files ../pibooth_local_copy/camera/__pycache__/__init__.cpython-37.pyc and ./camera/__pycache__/__init__.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/camera/__pycache__/base.cpython-37.pyc and ./camera/__pycache__/base.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/camera/__pycache__/gphoto.cpython-37.pyc and ./camera/__pycache__/gphoto.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/camera/__pycache__/hybrid.cpython-37.pyc and ./camera/__pycache__/hybrid.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/camera/__pycache__/opencv.cpython-37.pyc and ./camera/__pycache__/opencv.cpython-37.pyc differ
+Binary files ../pibooth_local_copy/camera/__pycache__/rpi.cpython-37.pyc and ./camera/__pycache__/rpi.cpython-37.pyc differ
+diff -ruN ../pibooth_local_copy/camera/base.py ./camera/base.py
+--- ../pibooth_local_copy/camera/base.py	2025-05-16 13:26:45
++++ ./camera/base.py	1969-12-31 19:00:00
+@@ -1,134 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-import pygame
+-from PIL import Image, ImageDraw
+-
+-from pibooth import fonts
+-from pibooth.pictures import sizing
+-
+-
+-class BaseCamera(object):
+-
+-    def __init__(self, camera_proxy):
+-        self._cam = camera_proxy
+-        self._border = 50
+-        self._window = None
+-        self._overlay = None
+-        self._captures = []
+-
+-        self.resolution = None
+-        self.delete_internal_memory = False
+-        self.preview_rotation, self.capture_rotation = (0, 0)
+-        self.preview_iso, self.capture_iso = (100, 100)
+-        self.preview_flip, self.capture_flip = (False, False)
+-
+-    def initialize(self, iso, resolution, rotation=0, flip=False, delete_internal_memory=False):
+-        """Initialize the camera.
+-        """
+-        if not isinstance(rotation, (tuple, list)):
+-            rotation = (rotation, rotation)
+-        self.preview_rotation, self.capture_rotation = rotation
+-        for name in ('preview', 'capture'):
+-            rotation = getattr(self, '{}_rotation'.format(name))
+-            if rotation not in (0, 90, 180, 270):
+-                raise ValueError(
+-                    "Invalid {} camera rotation value '{}' (should be 0, 90, 180 or 270)".format(name, rotation))
+-        self.resolution = resolution
+-        self.capture_flip = flip
+-        if not isinstance(iso, (tuple, list)):
+-            iso = (iso, iso)
+-        self.preview_iso, self.capture_iso = iso
+-        self.delete_internal_memory = delete_internal_memory
+-        self._specific_initialization()
+-
+-    def _specific_initialization(self):
+-        """Specific camera initialization.
+-        """
+-        pass
+-
+-    def _show_overlay(self, text, alpha):
+-        """Add an image as an overlay.
+-        """
+-        self._overlay = text
+-
+-    def _hide_overlay(self):
+-        """Remove any existing overlay.
+-        """
+-        if self._overlay is not None:
+-            self._overlay = None
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework and return a PIL Image object from capture data.
+-        """
+-        raise NotImplementedError
+-
+-    def get_rect(self, max_size=None):
+-        """Return a Rect object (as defined in pygame) for resizing preview and images
+-        in order to fit to the defined window.
+-        """
+-        rect = self._window.get_rect(absolute=True)
+-        size = (rect.width - 2 * self._border, rect.height - 2 * self._border)
+-        if max_size:
+-            size = (min(size[0], max_size[0]), min(size[1], max_size[1]))
+-        res = sizing.new_size_keep_aspect_ratio(self.resolution, size)
+-        return pygame.Rect(rect.centery - res[0] // 2, rect.centerx - res[1] // 2, res[0], res[1])
+-
+-    def build_overlay(self, size, text, alpha):
+-        """Return a PIL image with the given text that can be used
+-        as an overlay for the camera.
+-        """
+-        image = Image.new('RGBA', size)
+-        draw = ImageDraw.Draw(image)
+-
+-        font = fonts.get_pil_font(text, fonts.CURRENT, 0.9 * size[0], 0.9 * size[1])
+-        txt_width, txt_height = draw.textsize(text, font=font)
+-
+-        position = ((size[0] - txt_width) // 2, (size[1] - txt_height) // 2 - size[1] // 10)
+-        draw.text(position, text, (255, 255, 255, alpha), font=font)
+-        return image
+-
+-    def preview(self, window, flip=True):
+-        """Setup the preview.
+-        """
+-        raise NotImplementedError
+-
+-    def preview_countdown(self, timeout, alpha=60):
+-        """Show a countdown of `timeout` seconds on the preview.
+-        Returns when the countdown is finished.
+-        """
+-        raise NotImplementedError
+-
+-    def preview_wait(self, timeout, alpha=60):
+-        """Wait the given time and let doing the job.
+-        Returns when the timeout is reached.
+-        """
+-        raise NotImplementedError
+-
+-    def stop_preview(self):
+-        """Stop the preview.
+-        """
+-        raise NotImplementedError
+-
+-    def capture(self, effect=None):
+-        """Capture a new picture.
+-        """
+-        raise NotImplementedError
+-
+-    def get_captures(self):
+-        """Return all buffered captures as PIL images (buffer dropped after call).
+-        """
+-        images = []
+-        for data in self._captures:
+-            images.append(self._post_process_capture(data))
+-        self.drop_captures()
+-        return images
+-
+-    def drop_captures(self):
+-        """Delete all buffered captures.
+-        """
+-        self._captures.clear()
+-
+-    def quit(self):
+-        """Close the camera driver, it's definitive.
+-        """
+-        raise NotImplementedError
+diff -ruN ../pibooth_local_copy/camera/gphoto.py ./camera/gphoto.py
+--- ../pibooth_local_copy/camera/gphoto.py	2025-05-16 13:26:45
++++ ./camera/gphoto.py	1969-12-31 19:00:00
+@@ -1,311 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-import io
+-import time
+-import pygame
+-try:
+-    import gphoto2 as gp
+-except ImportError:
+-    gp = None  # gphoto2 is optional
+-from PIL import Image, ImageFilter
+-from pibooth.pictures import sizing
+-from pibooth.utils import LOGGER, PoolingTimer, pkill
+-from pibooth.language import get_translated_text
+-from pibooth.camera.base import BaseCamera
+-
+-
+-def get_gp_camera_proxy(port=None):
+-    """Return camera proxy if a gPhoto2 compatible camera is found
+-    else return None.
+-
+-    .. note:: try to kill any process using gPhoto2 as it may block camera access.
+-
+-    :param port: look on given port number
+-    :type port: str
+-    """
+-    if not gp:
+-        return None  # gPhoto2 is not installed
+-
+-    pkill('*gphoto2*')
+-    if hasattr(gp, 'gp_camera_autodetect'):
+-        # gPhoto2 version 2.5+
+-        cameras = gp.check_result(gp.gp_camera_autodetect())
+-    else:
+-        port_info_list = gp.PortInfoList()
+-        port_info_list.load()
+-        abilities_list = gp.CameraAbilitiesList()
+-        abilities_list.load()
+-        cameras = abilities_list.detect(port_info_list)
+-    if cameras:
+-        LOGGER.debug("Found gPhoto2 cameras on ports: '%s'", "' / '".join([p for _, p in cameras]))
+-        # Initialize first camera proxy and return it
+-        camera = gp.Camera()
+-        if port is not None:
+-            port_info_list = gp.PortInfoList()
+-            port_info_list.load()
+-            idx = port_info_list.lookup_path(port)
+-            camera.set_port_info(port_info_list[idx])
+-
+-        try:
+-            camera.init()
+-            return camera
+-        except gp.GPhoto2Error as ex:
+-            LOGGER.warning("Could not connect gPhoto2 camera: %s", ex)
+-
+-    return None
+-
+-
+-def gp_log_callback(level, domain, string, data=None):
+-    """Logging callback for gphoto2.
+-    """
+-    LOGGER.getChild('gphoto2').debug(domain.decode("utf-8") + u': ' + string.decode("utf-8"))
+-
+-
+-class GpCamera(BaseCamera):
+-
+-    """gPhoto2 camera management.
+-    """
+-
+-    IMAGE_EFFECTS = [u'none',
+-                     u'blur',
+-                     u'contour',
+-                     u'detail',
+-                     u'edge_enhance',
+-                     u'edge_enhance_more',
+-                     u'emboss',
+-                     u'find_edges',
+-                     u'smooth',
+-                     u'smooth_more',
+-                     u'sharpen']
+-
+-    def __init__(self, camera_proxy):
+-        super(GpCamera, self).__init__(camera_proxy)
+-        self._gp_logcb = None
+-        self._preview_compatible = True
+-        self._preview_viewfinder = False
+-
+-    def _specific_initialization(self):
+-        """Camera initialization.
+-        """
+-        self._gp_logcb = gp.check_result(gp.gp_log_add_func(gp.GP_LOG_VERBOSE, gp_log_callback))
+-        abilities = self._cam.get_abilities()
+-        self._preview_compatible = gp.GP_OPERATION_CAPTURE_PREVIEW ==\
+-            abilities.operations & gp.GP_OPERATION_CAPTURE_PREVIEW
+-        if not self._preview_compatible:
+-            LOGGER.warning("The connected DSLR camera is not compatible with preview")
+-        else:
+-            try:
+-                self.get_config_value('actions', 'viewfinder')
+-                self._preview_viewfinder = True
+-            except ValueError:
+-                self._preview_viewfinder = False
+-
+-        self.set_config_value('imgsettings', 'iso', self.preview_iso)
+-        self.set_config_value('settings', 'capturetarget', 'Memory card')
+-
+-    def _show_overlay(self, text, alpha):
+-        """Add an image as an overlay.
+-        """
+-        if self._window:  # No window means no preview displayed
+-            rect = self.get_rect()
+-            self._overlay = self.build_overlay((rect.width, rect.height), str(text), alpha)
+-
+-    def _rotate_image(self, image, rotation):
+-        """Rotate a PIL image, same direction than RpiCamera.
+-        """
+-        if rotation == 90:
+-            return image.transpose(Image.ROTATE_90)
+-        elif rotation == 180:
+-            return image.transpose(Image.ROTATE_180)
+-        elif rotation == 270:
+-            return image.transpose(Image.ROTATE_270)
+-        return image
+-
+-    def _get_preview_image(self):
+-        """Capture a new preview image.
+-        """
+-        rect = self.get_rect()
+-        if self._preview_compatible:
+-            cam_file = self._cam.capture_preview()
+-            image = Image.open(io.BytesIO(cam_file.get_data_and_size()))
+-            image = self._rotate_image(image, self.preview_rotation)
+-            # Crop to keep aspect ratio of the resolution
+-            image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
+-            # Resize to fit the available space in the window
+-            image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, (rect.width, rect.height), 'outer'))
+-
+-            if self.preview_flip:
+-                image = image.transpose(Image.FLIP_LEFT_RIGHT)
+-        else:
+-            image = Image.new('RGB', (rect.width, rect.height), color=(0, 0, 0))
+-
+-        if self._overlay:
+-            image.paste(self._overlay, (0, 0), self._overlay)
+-        return image
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework capture data.
+-
+-        :param capture_data: couple (GPhotoPath, effect)
+-        :type capture_data: tuple
+-        """
+-        gp_path, effect = capture_data
+-        camera_file = self._cam.file_get(gp_path.folder, gp_path.name, gp.GP_FILE_TYPE_NORMAL)
+-        if self.delete_internal_memory:
+-            LOGGER.debug("Delete capture '%s' from internal memory", gp_path.name)
+-            self._cam.file_delete(gp_path.folder, gp_path.name)
+-        image = Image.open(io.BytesIO(camera_file.get_data_and_size()))
+-        image = self._rotate_image(image, self.capture_rotation)
+-
+-        # Crop to keep aspect ratio of the resolution
+-        image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
+-        # Resize to fit the resolution
+-        image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, self.resolution, 'outer'))
+-
+-        if self.capture_flip:
+-            image = image.transpose(Image.FLIP_LEFT_RIGHT)
+-
+-        if effect != 'none':
+-            image = image.filter(getattr(ImageFilter, effect.upper()))
+-
+-        return image
+-
+-    def set_config_value(self, section, option, value):
+-        """Set camera configuration.
+-        """
+-        try:
+-            LOGGER.debug('Setting option %s/%s=%s', section, option, value)
+-            config = self._cam.get_config()
+-            child = config.get_child_by_name(section).get_child_by_name(option)
+-            if child.get_type() == gp.GP_WIDGET_RADIO:
+-                choices = [c for c in child.get_choices()]
+-            else:
+-                choices = None
+-            data_type = type(child.get_value())
+-            value = data_type(value)  # Cast value
+-            if choices and value not in choices:
+-                if value == 'Memory card' and 'card' in choices:
+-                    value = 'card'  # Fix for Sony ZV-1
+-                elif value == 'Memory card' and 'card+sdram' in choices:
+-                    value = 'card+sdram'  # Fix for Sony ILCE-6400
+-                else:
+-                    LOGGER.warning("Invalid value '%s' for option %s (possible choices: %s), trying to set it anyway",
+-                                   value, option, choices)
+-            child.set_value(value)
+-            self._cam.set_config(config)
+-        except gp.GPhoto2Error as ex:
+-            LOGGER.error('Unsupported option %s/%s=%s (%s), configure your DSLR manually', section, option, value, ex)
+-
+-    def get_config_value(self, section, option):
+-        """Get camera configuration option.
+-        """
+-        try:
+-            config = self._cam.get_config()
+-            child = config.get_child_by_name(section).get_child_by_name(option)
+-            value = child.get_value()
+-            LOGGER.debug('Getting option %s/%s=%s', section, option, value)
+-            return value
+-        except gp.GPhoto2Error:
+-            raise ValueError('Unknown option {}/{}'.format(section, option))
+-
+-    def preview(self, window, flip=True):
+-        """Setup the preview.
+-        """
+-        self._window = window
+-        self.preview_flip = flip
+-
+-        if self._preview_compatible:
+-            if self._preview_viewfinder:
+-                self.set_config_value('actions', 'viewfinder', 1)
+-            self._window.show_image(self._get_preview_image())
+-
+-    def preview_countdown(self, timeout, alpha=80):
+-        """Show a countdown of `timeout` seconds on the preview.
+-        Returns when the countdown is finished.
+-        """
+-        timeout = int(timeout)
+-        if timeout < 1:
+-            raise ValueError("Start time shall be greater than 0")
+-
+-        shown = False
+-        first_loop = True
+-        timer = PoolingTimer(timeout)
+-        while not timer.is_timeout():
+-            remaining = int(timer.remaining() + 1)
+-            if not self._overlay or remaining != timeout:
+-                # Rebluid overlay only if remaining number has changed
+-                self._show_overlay(str(remaining), alpha)
+-                timeout = remaining
+-                shown = False
+-
+-            updated_rect = None
+-            if self._preview_compatible:
+-                updated_rect = self._window.show_image(self._get_preview_image())
+-            elif not shown:
+-                updated_rect = self._window.show_image(self._get_preview_image())
+-                shown = True  # Do not update dummy preview until next overlay update
+-
+-            if first_loop:
+-                timer.start()  # Because first preview capture is longer than others
+-                first_loop = False
+-
+-            pygame.event.pump()
+-            if updated_rect:
+-                pygame.display.update(updated_rect)
+-
+-        self._show_overlay(get_translated_text('smile'), alpha)
+-        self._window.show_image(self._get_preview_image())
+-
+-    def preview_wait(self, timeout, alpha=80):
+-        """Wait the given time.
+-        """
+-        timeout = int(timeout)
+-        if timeout < 1:
+-            raise ValueError("Start time shall be greater than 0")
+-
+-        timer = PoolingTimer(timeout)
+-        if self._preview_compatible:
+-            while not timer.is_timeout():
+-                updated_rect = self._window.show_image(self._get_preview_image())
+-                pygame.event.pump()
+-                if updated_rect:
+-                    pygame.display.update(updated_rect)
+-        else:
+-            time.sleep(timer.remaining())
+-
+-        self._show_overlay(get_translated_text('smile'), alpha)
+-        self._window.show_image(self._get_preview_image())
+-
+-    def stop_preview(self):
+-        """Stop the preview.
+-        """
+-        self._hide_overlay()
+-        self._window = None
+-
+-    def capture(self, effect=None):
+-        """Capture a new picture.
+-        """
+-        if self._preview_viewfinder:
+-            self.set_config_value('actions', 'viewfinder', 0)
+-
+-        effect = str(effect).lower()
+-        if effect not in self.IMAGE_EFFECTS:
+-            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
+-
+-        if self.capture_iso != self.preview_iso:
+-            self.set_config_value('imgsettings', 'iso', self.capture_iso)
+-
+-        self._captures.append((self._cam.capture(gp.GP_CAPTURE_IMAGE), effect))
+-        time.sleep(0.3)  # Necessary to let the time for the camera to save the image
+-
+-        if self.capture_iso != self.preview_iso:
+-            self.set_config_value('imgsettings', 'iso', self.preview_iso)
+-
+-        self._hide_overlay()  # If stop_preview() has not been called
+-
+-    def quit(self):
+-        """Close the camera driver, it's definitive.
+-        """
+-        if self._cam:
+-            del self._gp_logcb  # Uninstall log callback
+-            self._cam.exit()
+diff -ruN ../pibooth_local_copy/camera/hybrid.py ./camera/hybrid.py
+--- ../pibooth_local_copy/camera/hybrid.py	2025-05-16 13:26:45
++++ ./camera/hybrid.py	1969-12-31 19:00:00
+@@ -1,89 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-from pibooth.camera.rpi import RpiCamera
+-from pibooth.camera.opencv import CvCamera
+-from pibooth.camera.gphoto import GpCamera
+-
+-
+-class HybridRpiCamera(RpiCamera):
+-
+-    """Camera management using the Raspberry Pi camera for the preview (better
+-    video rendering) and a gPhoto2 compatible camera for the capture (higher
+-    resolution)
+-    """
+-
+-    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
+-
+-    def __init__(self, rpi_camera_proxy, gp_camera_proxy):
+-        super(HybridRpiCamera, self).__init__(rpi_camera_proxy)
+-        self._gp_cam = GpCamera(gp_camera_proxy)
+-        self._gp_cam._captures = self._captures  # Same dict for both cameras
+-
+-    def initialize(self, *args, **kwargs):
+-        """Ensure that both cameras are initialized.
+-        """
+-        super(HybridRpiCamera, self).initialize(*args, **kwargs)
+-        self._gp_cam.initialize(*args, **kwargs)
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework capture data.
+-
+-        :param capture_data: couple (GPhotoPath, effect)
+-        :type capture_data: tuple
+-        """
+-        return self._gp_cam._post_process_capture(capture_data)
+-
+-    def capture(self, effect=None):
+-        """Capture a picture in a file.
+-        """
+-        self._gp_cam.capture(effect)
+-
+-        self._hide_overlay()  # If stop_preview() has not been called
+-
+-    def quit(self):
+-        """Close the camera driver, it's definitive.
+-        """
+-        super(HybridRpiCamera, self).quit()
+-        self._gp_cam.quit()
+-
+-
+-class HybridCvCamera(CvCamera):
+-
+-    """Camera management using the OpenCV camera for the preview (better
+-    video rendering) and a gPhoto2 compatible camera for the capture (higher
+-    resolution)
+-    """
+-
+-    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
+-
+-    def __init__(self, cv_camera_proxy, gp_camera_proxy):
+-        super(HybridCvCamera, self).__init__(cv_camera_proxy)
+-        self._gp_cam = GpCamera(gp_camera_proxy)
+-        self._gp_cam._captures = self._captures  # Same dict for both cameras
+-
+-    def initialize(self, *args, **kwargs):
+-        """Ensure that both cameras are initialized.
+-        """
+-        super(HybridCvCamera, self).initialize(*args, **kwargs)
+-        self._gp_cam.initialize(*args, **kwargs)
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework capture data.
+-
+-        :param capture_data: couple (GPhotoPath, effect)
+-        :type capture_data: tuple
+-        """
+-        return self._gp_cam._post_process_capture(capture_data)
+-
+-    def capture(self, effect=None):
+-        """Capture a picture in a file.
+-        """
+-        self._gp_cam.capture(effect)
+-
+-        self._hide_overlay()  # If stop_preview() has not been called
+-
+-    def quit(self):
+-        """Close the camera driver, it's definitive.
+-        """
+-        super(HybridCvCamera, self).quit()
+-        self._gp_cam.quit()
+diff -ruN ../pibooth_local_copy/camera/opencv.py ./camera/opencv.py
+--- ../pibooth_local_copy/camera/opencv.py	2025-05-16 13:26:45
++++ ./camera/opencv.py	1969-12-31 19:00:00
+@@ -1,239 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-import time
+-import pygame
+-try:
+-    import cv2
+-    import numpy as np
+-except ImportError:
+-    cv2 = None  # OpenCV is optional
+-from PIL import Image
+-from pibooth.pictures import sizing
+-from pibooth.utils import PoolingTimer, LOGGER
+-from pibooth.language import get_translated_text
+-from pibooth.camera.base import BaseCamera
+-
+-
+-def get_cv_camera_proxy(port=None):
+-    """Return camera proxy if an OpenCV compatible camera is found
+-    else return None.
+-
+-    :param port: look on given port number
+-    :type port: int
+-    """
+-    if not cv2:
+-        return None  # OpenCV is not installed
+-
+-    if port is not None:
+-        if not isinstance(port, int):
+-            raise TypeError("Invalid OpenCV camera port '{}'".format(type(port)))
+-        camera = cv2.VideoCapture(port)
+-        if camera.isOpened():
+-            return camera
+-    else:
+-        for i in range(3):  # Test 3 first ports
+-            camera = cv2.VideoCapture(i)
+-            if camera.isOpened():
+-                return camera
+-
+-    return None
+-
+-
+-class CvCamera(BaseCamera):
+-
+-    """OpenCV camera management.
+-    """
+-
+-    IMAGE_EFFECTS = [u'none',
+-                     u'blur',
+-                     u'contour',
+-                     u'detail',
+-                     u'edge_enhance',
+-                     u'edge_enhance_more',
+-                     u'emboss',
+-                     u'find_edges',
+-                     u'smooth',
+-                     u'smooth_more',
+-                     u'sharpen']
+-
+-    def __init__(self, camera_proxy):
+-        super(CvCamera, self).__init__(camera_proxy)
+-        self._overlay_alpha = 255
+-        self._preview_resolution = None
+-
+-    def _specific_initialization(self):
+-        """Camera initialization.
+-        """
+-        self._preview_resolution = (self._cam.get(cv2.CAP_PROP_FRAME_WIDTH), self._cam.get(cv2.CAP_PROP_FRAME_HEIGHT))
+-        LOGGER.debug("Preview resolution is %s", self._preview_resolution)
+-        self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
+-
+-    def _show_overlay(self, text, alpha):
+-        """Add an image as an overlay.
+-        """
+-        if self._window:  # No window means no preview displayed
+-            rect = self.get_rect()
+-            self._overlay_alpha = alpha
+-            pil_image = self.build_overlay((rect.width, rect.height), str(text), 255)
+-            # Remove alpha from overlay
+-            self._overlay = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGBA2RGB)
+-
+-    def _rotate_image(self, image, rotation):
+-        """Rotate an OpenCV image, same direction than RpiCamera.
+-        """
+-        if rotation == 90:
+-            image = cv2.transpose(image)
+-            return cv2.flip(image, 1)
+-        elif rotation == 180:
+-            return cv2.flip(image, -1)
+-        elif rotation == 270:
+-            image = cv2.transpose(image)
+-            return cv2.flip(image, 0)
+-        return image
+-
+-    def _get_preview_image(self):
+-        """Capture a new preview image.
+-        """
+-        rect = self.get_rect()
+-
+-        ret, image = self._cam.read()
+-        if not ret:
+-            raise IOError("Can not get camera preview image")
+-        image = self._rotate_image(image, self.preview_rotation)
+-
+-        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
+-        # Crop to keep aspect ratio of the resolution
+-        height, width = image.shape[:2]
+-        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
+-        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
+-        # Resize to fit the available space in the window
+-        height, width = image.shape[:2]
+-        size = sizing.new_size_keep_aspect_ratio((width, height), (rect.width, rect.height), 'outer')
+-        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
+-
+-        if self.preview_flip:
+-            image = cv2.flip(image, 1)
+-
+-        if self._overlay is not None:
+-            if self._overlay.shape != image.shape:
+-                # Previous operations may create a size with one pixel gap
+-                self._overlay = cv2.resize(self._overlay, (image.shape[1], image.shape[0]))
+-            image = cv2.addWeighted(image, 1, self._overlay, self._overlay_alpha / 255., 0)
+-        return Image.fromarray(image)
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework capture data.
+-
+-        :param capture_data: couple (frame, effect)
+-        :type capture_data: tuple
+-        """
+-        frame, effect = capture_data
+-
+-        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
+-        # Crop to keep aspect ratio of the resolution
+-        height, width = image.shape[:2]
+-        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
+-        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
+-        # Resize to fit the resolution
+-        height, width = image.shape[:2]
+-        size = sizing.new_size_keep_aspect_ratio((width, height), self.resolution, 'outer')
+-        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
+-
+-        if self.capture_flip:
+-            image = cv2.flip(image, 1)
+-
+-        if effect != 'none':
+-            LOGGER.warning("Effect with OpenCV camera is not implemented")
+-
+-        return Image.fromarray(image)
+-
+-    def preview(self, window, flip=True):
+-        """Setup the preview.
+-        """
+-        self._window = window
+-        self.preview_flip = flip
+-        self._window.show_image(self._get_preview_image())
+-
+-    def preview_countdown(self, timeout, alpha=80):
+-        """Show a countdown of `timeout` seconds on the preview.
+-        Returns when the countdown is finished.
+-        """
+-        timeout = int(timeout)
+-        if timeout < 1:
+-            raise ValueError("Start time shall be greater than 0")
+-
+-        timer = PoolingTimer(timeout)
+-        while not timer.is_timeout():
+-            remaining = int(timer.remaining() + 1)
+-            if self._overlay is None or remaining != timeout:
+-                # Rebluid overlay only if remaining number has changed
+-                self._show_overlay(str(remaining), alpha)
+-                timeout = remaining
+-
+-            updated_rect = self._window.show_image(self._get_preview_image())
+-            pygame.event.pump()
+-            if updated_rect:
+-                pygame.display.update(updated_rect)
+-
+-        self._show_overlay(get_translated_text('smile'), alpha)
+-        self._window.show_image(self._get_preview_image())
+-
+-    def preview_wait(self, timeout, alpha=80):
+-        """Wait the given time.
+-        """
+-        timeout = int(timeout)
+-        if timeout < 1:
+-            raise ValueError("Start time shall be greater than 0")
+-
+-        timer = PoolingTimer(timeout)
+-        while not timer.is_timeout():
+-            updated_rect = self._window.show_image(self._get_preview_image())
+-            pygame.event.pump()
+-            if updated_rect:
+-                pygame.display.update(updated_rect)
+-
+-        self._show_overlay(get_translated_text('smile'), alpha)
+-        self._window.show_image(self._get_preview_image())
+-
+-    def stop_preview(self):
+-        """Stop the preview.
+-        """
+-        self._hide_overlay()
+-        self._window = None
+-
+-    def capture(self, effect=None):
+-        """Capture a new picture.
+-        """
+-        effect = str(effect).lower()
+-        if effect not in self.IMAGE_EFFECTS:
+-            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
+-
+-        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self.resolution[0])
+-        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self.resolution[1])
+-
+-        if self.capture_iso != self.preview_iso:
+-            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.capture_iso)
+-
+-        LOGGER.debug("Taking capture at resolution %s", self.resolution)
+-        ret, image = self._cam.read()
+-        if not ret:
+-            raise IOError("Can not capture frame")
+-        image = self._rotate_image(image, self.capture_rotation)
+-
+-        LOGGER.debug("Putting preview resolution back to %s", self._preview_resolution)
+-        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self._preview_resolution[0])
+-        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self._preview_resolution[1])
+-
+-        if self.capture_iso != self.preview_iso:
+-            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
+-
+-        self._captures.append((image, effect))
+-        time.sleep(0.5)  # To let time to see "Smile"
+-
+-        self._hide_overlay()  # If stop_preview() has not been called
+-
+-    def quit(self):
+-        """Close the camera driver, it's definitive.
+-        """
+-        if self._cam:
+-            self._cam.release()
+diff -ruN ../pibooth_local_copy/camera/rpi.py ./camera/rpi.py
+--- ../pibooth_local_copy/camera/rpi.py	2025-05-16 13:26:45
++++ ./camera/rpi.py	1969-12-31 19:00:00
+@@ -1,169 +0,0 @@
+-# -*- coding: utf-8 -*-
+-
+-import time
+-import subprocess
+-from io import BytesIO
+-from PIL import Image
+-try:
+-    import picamera
+-except ImportError:
+-    picamera = None  # picamera is optional
+-from pibooth.language import get_translated_text
+-from pibooth.camera.base import BaseCamera
+-
+-
+-def get_rpi_camera_proxy(port=None):
+-    """Return camera proxy if a Raspberry Pi compatible camera is found
+-    else return None.
+-
+-    :param port: look on given port number
+-    :type port: int
+-    """
+-    if not picamera:
+-        return None  # picamera is not installed
+-    try:
+-        process = subprocess.Popen(['vcgencmd', 'get_camera'],
+-                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+-        stdout, _stderr = process.communicate()
+-        if stdout and u'detected=1' in stdout.decode('utf-8'):
+-            if port is not None:
+-                return picamera.PiCamera(camera_num=port)
+-            return picamera.PiCamera()
+-    except OSError:
+-        pass
+-    return None
+-
+-
+-class RpiCamera(BaseCamera):
+-
+-    """Camera management
+-    """
+-
+-    if picamera:
+-        IMAGE_EFFECTS = list(picamera.PiCamera.IMAGE_EFFECTS.keys())
+-    else:
+-        IMAGE_EFFECTS = []
+-
+-    def _specific_initialization(self):
+-        """Camera initialization.
+-        """
+-        self._cam.framerate = 15  # Slower is necessary for high-resolution
+-        self._cam.video_stabilization = True
+-        self._cam.vflip = False
+-        self._cam.hflip = self.capture_flip
+-        self._cam.resolution = self.resolution
+-        self._cam.iso = self.preview_iso
+-        self._cam.rotation = self.preview_rotation
+-
+-    def _show_overlay(self, text, alpha):
+-        """Add an image as an overlay.
+-        """
+-        if self._window:  # No window means no preview displayed
+-            rect = self.get_rect(self._cam.MAX_RESOLUTION)
+-
+-            # Create an image padded to the required size (required by picamera)
+-            size = (((rect.width + 31) // 32) * 32, ((rect.height + 15) // 16) * 16)
+-
+-            image = self.build_overlay(size, str(text), alpha)
+-            self._overlay = self._cam.add_overlay(image.tobytes(), image.size, layer=3,
+-                                     window=tuple(rect), fullscreen=False, rotation=90)
+-
+-    def _hide_overlay(self):
+-        """Remove any existing overlay.
+-        """
+-        if self._overlay:
+-            self._cam.remove_overlay(self._overlay)
+-            self._overlay = None
+-
+-    def _post_process_capture(self, capture_data):
+-        """Rework capture data.
+-
+-        :param capture_data: binary data as stream
+-        :type capture_data: :py:class:`io.BytesIO`
+-        """
+-        # "Rewind" the stream to the beginning so we can read its content
+-        capture_data.seek(0)
+-        return Image.open(capture_data).transpose(Image.ROTATE_270)
+-
+-    def preview(self, window, flip=True):
+-        """Display a preview on the given Rect (flip if necessary).
+-        """
+-        if self._cam.preview is not None:
+-            # Already running
+-            return
+-
+-        self._window = window
+-        rect = self.get_rect(self._cam.MAX_RESOLUTION)
+-        if self._cam.hflip:
+-            if flip:
+-                # Don't flip again, already done at init
+-                flip = False
+-            else:
+-                # Flip again because flipped once at init
+-                flip = True
+-        self._cam.start_preview(resolution=(rect.width, rect.height), hflip=flip,
+-                                fullscreen=False, window=tuple(rect))
+-
+-    def preview_countdown(self,diff -ruN ../pibooth_local_copy/config/__init__.py ./config/__init__.py
--- ../pibooth_local_copy/config/__init__.py	2025-05-16 13:26:46
+++ ./config/__init__.py	1969-12-31 19:00:00
@@ -1,4 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from pibooth.config.parser import PiConfigParser
-from pibooth.config.menu import PiConfigMenu
Binary files ../pibooth_local_copy/config/__pycache__/__init__.cpython-37.pyc and ./config/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/config/__pycache__/menu.cpython-37.pyc and ./config/__pycache__/menu.cpython-37.pyc differ
Binary files ../pibooth_local_copy/config/__pycache__/parser.cpython-37.pyc and ./config/__pycache__/parser.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/config/menu.py ./config/menu.py
--- ../pibooth_local_copy/config/menu.py	2025-05-16 13:26:46
+++ ./config/menu.py	1969-12-31 19:00:00
@@ -1,377 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth config menu.
-"""
-
-import pygame
-import pygame_menu as pgm
-import pygame_vkeyboard as vkb
-import pibooth
-from pibooth import fonts
-from pibooth.utils import LOGGER, get_event_pos
-from pibooth.config.parser import DEFAULT
-
-
-pgm.controls.KEY_BACK = pygame.K_ESCAPE
-
-THEME_WHITE = pgm.themes.Theme(
-    background_color=(255, 255, 255),
-    scrollbar_thick=14,
-    scrollbar_slider_pad=2,
-    scrollbar_slider_color=(35, 149, 135),
-    selection_color=(29, 120, 107),
-    title_background_color=(35, 149, 135),
-    title_font=fonts.get_filename("Monoid-Regular"),
-    title_font_size=33,
-    title_font_color=(255, 255, 255),
-    widget_margin=(0, 20),
-    widget_font=fonts.get_filename("Monoid-Retina"),
-    widget_font_size=30,
-    widget_font_color=(0, 0, 0),
-)
-
-SUBTHEME1_WHITE = THEME_WHITE.copy()
-SUBTHEME1_WHITE.background_color = (255, 255, 255)
-SUBTHEME1_WHITE.scrollbar_slider_color = (252, 151, 0)
-SUBTHEME1_WHITE.selection_color = (241, 125, 1)
-SUBTHEME1_WHITE.title_background_color = (252, 151, 0)
-SUBTHEME1_WHITE.widget_alignment = pgm.locals.ALIGN_LEFT
-SUBTHEME1_WHITE.widget_margin = (40, 10)
-SUBTHEME1_WHITE.widget_font_size = 18
-
-SUBTHEME2_WHITE = SUBTHEME1_WHITE.copy()
-SUBTHEME2_WHITE.scrollbar_slider_color = (152, 43, 175)
-SUBTHEME2_WHITE.selection_color = (120, 36, 161)
-SUBTHEME2_WHITE.title_background_color = (152, 43, 175)
-SUBTHEME2_WHITE.widget_alignment = pgm.locals.ALIGN_CENTER
-SUBTHEME2_WHITE.widget_margin = (0, 20)
-
-THEME_DARK = THEME_WHITE.copy()
-THEME_DARK.background_color = (40, 41, 35)
-THEME_DARK.cursor_color = (255, 255, 255)
-THEME_DARK.widget_font_color = (255, 255, 255)
-
-SUBTHEME1_DARK = SUBTHEME1_WHITE.copy()
-SUBTHEME1_DARK.background_color = (40, 41, 35)
-SUBTHEME1_DARK.cursor_color = (255, 255, 255)
-SUBTHEME1_DARK.widget_font_color = (255, 255, 255)
-
-SUBTHEME2_DARK = SUBTHEME2_WHITE.copy()
-SUBTHEME2_DARK.background_color = (40, 41, 35)
-SUBTHEME2_DARK.cursor_color = (255, 255, 255)
-SUBTHEME2_DARK.widget_font_color = (255, 255, 255)
-
-
-def _find(choices, value):
-    """Find index for the given value in choices.
-    """
-    i = 0
-    for val in choices:
-        if val[0] == value:
-            return i
-        i += 1
-    return 0
-
-
-def _counters(counters):
-    """Return the formatted text for counters.
-    """
-    long_name = max(counters.names(), key=len)
-    pattern = '{:.<' + str(max(len(long_name) + 2, 25)) + '} {: >4}'
-    return [pattern.format(name.replace("_", " ").capitalize(), counters[name]) for name in counters]
-
-
-class PiConfigMenu(object):
-
-    def __init__(self, plugins_manager, configuration, application, window, onclose=None):
-        self.app = application
-        self.win = window
-        self.cfg = configuration
-        self.pm = plugins_manager
-        self._changed = False
-        self._close_callback = onclose
-
-        size = self.win.get_rect().size
-        self.size = (min(600, size[0]), min(400, size[1]))
-        self._main_menu = pgm.Menu(title="Settings v{}".format(pibooth.__version__),
-                                   width=self.size[0],
-                                   height=self.size[1],
-                                   theme=THEME_DARK,
-                                   touchscreen=True,
-                                   onclose=self._on_close)
-        self._main_menu.disable()
-        self._main_menu.add.vertical_margin(20)
-
-        self._keyboard = vkb.VKeyboard(self.win.surface,
-                                       self._on_keyboard_event,
-                                       vkb.VKeyboardLayout(vkb.VKeyboardLayout.QWERTY),
-                                       renderer=vkb.VKeyboardRenderer.DARK,
-                                       show_text=True,
-                                       joystick_navigation=True)
-        self._keyboard.disable()
-
-        for name in DEFAULT:
-            submenu = self._build_submenu(name)
-            if len(submenu._widgets) > 2:
-                self._main_menu.add.button(submenu.get_title(), submenu)
-        self._main_menu.add.button('Exit', self._on_exit)
-        self._main_menu.add.vertical_margin(20)
-
-    def _build_submenu(self, section):
-        """Build sub-menu"""
-        length = 0
-        for name, option in DEFAULT[section].items():
-            if option[2] and length < len(option[2]):
-                length = len(option[2])
-        pattern = '{:.<' + str(max(length + 2, 25)) + '} '
-
-        menu = pgm.Menu(title=section.capitalize(),
-                        width=self.size[0],
-                        height=self.size[1],
-                        theme=SUBTHEME1_DARK,
-                        touchscreen=True)
-        menu.add.vertical_margin(20)
-
-        for name, option in DEFAULT[section].items():
-            if option[2]:
-                title = pattern.format(option[2])
-                if isinstance(option[3], str):
-                    menu.add.text_input(title,
-                                        onchange=self._on_text_changed,
-                                        default=self.cfg.get(section, name).strip('"'),
-                                        # Parameters passed to callback:
-                                        section=section,
-                                        option=name)
-                elif isinstance(option[3], (list, tuple)) and len(option[3]) == 3\
-                        and all(isinstance(i, int) for i in option[3]):
-                    menu.add.color_input(title,
-                                         "rgb",
-                                         default=self.cfg.gettyped(section, name),
-                                         input_separator=',',
-                                         onchange=self._on_color_changed,
-                                         previsualization_width=1,
-                                         # Parameters passed to callback:
-                                         section=section,
-                                         option=name)
-                else:
-                    values = [(v,) for v in option[3]]
-                    menu.add.selector(title,
-                                      values,
-                                      onchange=self._on_selector_changed,
-                                      default=_find(values, self.cfg.get(section, name)),
-                                      # Parameters passed to callback:
-                                      section=section,
-                                      option=name)
-
-        if section.lower() == 'general':
-            menu.add.vertical_margin(40)
-            menu.add.button("View counters",
-                            self._build_submenu_counters("Counters"),
-                            margin=(self.size[0] // 2 - 100, 0))
-            menu.add.vertical_margin(20)
-            if self.pm.list_external_plugins():
-                menu.add.button("Manage plugins",
-                                self._build_submenu_plugins("Plugins"),
-                                margin=(self.size[0] // 2 - 105, 0))
-
-        menu.add.vertical_margin(20)
-        return menu
-
-    def _build_submenu_counters(self, title):
-        menu = pgm.Menu(title=title.capitalize(),
-                        width=self.size[0],
-                        height=self.size[1],
-                        theme=SUBTHEME2_DARK,
-                        touchscreen=True)
-        labels = []
-        for text in _counters(self.app.count):
-            labels.append(menu.add.label(text))
-        menu.add.vertical_margin(40)
-        menu.add.button("Reset all", self._on_counters_reset, labels)
-        return menu
-
-    def _build_submenu_plugins(self, title):
-        menu = pgm.Menu(title=title.capitalize(),
-                        width=self.size[0],
-                        height=self.size[1],
-                        theme=SUBTHEME2_DARK,
-                        touchscreen=True)
-
-        plugins = self.pm.list_external_plugins()
-        long_name = max([self.pm.get_friendly_name(p) for p in plugins], key=len)
-        pattern = '{:.<' + str(max(len(long_name) + 2, 25)) + '}'
-
-        for plugin in plugins:
-            enabled = self.pm.is_registered(plugin)
-            menu.add.toggle_switch(pattern.format(self.pm.get_friendly_name(plugin)),
-                                   enabled,
-                                   state_color=((178, 178, 178), SUBTHEME2_DARK.title_background_color),
-                                   onchange=self._on_plugin_toggled,
-                                   # Parameters passed to callback:
-                                   section='GENERAL',
-                                   option='plugins_disabled',
-                                   plugin=plugin)
-        return menu
-
-    def _on_keyboard_event(self, text):
-        """Called after each option changed.
-        """
-        if self._main_menu.is_enabled():  # Menu may have been closed
-            selected = self._main_menu.get_current().get_selected_widget()
-            if isinstance(selected, pgm.widgets.TextInput):
-                if isinstance(selected, pgm.widgets.ColorInput):
-                    try:
-                        selected.set_value(tuple([int(c) for c in text.split(',')]))
-                    except Exception as ex:
-                        LOGGER.error("Invalid color value '%s' (%s)", text, ex)
-                else:
-                    selected.set_value(text)
-                selected.change()
-
-    def _on_selector_changed(self, value, **kwargs):
-        """Called after each option changed.
-        """
-        if self._main_menu.is_enabled():  # Menu may have been closed
-            self.cfg.set(kwargs['section'], kwargs['option'], str(value[0][0]))
-            self._changed = True
-
-    def _on_text_changed(self, value, **kwargs):
-        """Called after each text input changed.
-        """
-        if self._main_menu.is_enabled():  # Menu may have been closed
-            self.cfg.set(kwargs['section'], kwargs['option'], '"{}"'.format(str(value)))
-            self._changed = True
-
-    def _on_color_changed(self, value, **kwargs):
-        """Called after each text input changed.
-        """
-        if self._main_menu.is_enabled():  # Menu may have been closed
-            self.cfg.set(kwargs['section'], kwargs['option'], str(value))
-            self._changed = True
-
-    def _on_counters_reset(self, labels):
-        """Called when the counters are reset.
-        """
-        self.app.count.reset()
-        for label, text in zip(labels, _counters(self.app.count)):
-            label.set_title(text)
-
-    def _on_plugin_toggled(self, activated, **kwargs):
-        """Called when a plugin active state is toggled.
-        """
-        plugin = kwargs['plugin']
-        disabled = self.cfg.gettuple(kwargs['section'], kwargs['option'], str)
-        if activated and not self.pm.is_registered(plugin):
-            self.pm.register(plugin)
-            plugin_name = self.pm.get_name(plugin)
-            disabled = tuple([name for name in disabled if plugin_name != name])
-            self._changed = True
-
-            # Because no hook is called for plugins disabled at pibooth startup, need to
-            # ensure that mandatory hooks have been called when enabling a plugin
-            if 'pibooth_configure' not in self.pm.get_calls_history(plugin):
-                hook = self.pm.subset_hook_caller_for_plugin('pibooth_configure', plugin)
-                hook(cfg=self.cfg)
-            if 'pibooth_startup' not in self.pm.get_calls_history(plugin):
-                hook = self.pm.subset_hook_caller_for_plugin('pibooth_startup', plugin)
-                hook(cfg=self.cfg, app=self.app)
-
-        elif not activated and self.pm.is_registered(plugin):
-            plugin_name = self.pm.get_name(plugin)
-            self.pm.unregister(plugin)
-            if plugin_name not in disabled:
-                disabled += (plugin_name,)
-                self._changed = True
-
-        if not disabled:
-            disabled = ''
-        self.cfg.set(kwargs['section'], kwargs['option'], str(disabled))
-
-    def _on_close(self):
-        """Called when the menu is closed.
-        """
-        self._main_menu.disable()
-        if self._changed:
-            self.cfg.save()
-            self._changed = False
-        if self._close_callback:
-            self._close_callback()
-
-    def _on_exit(self):
-        """Called when the application is exited by menu.
-        """
-        self._on_close()
-        exit(0)
-
-    def show(self):
-        """Show the menu.
-        """
-        self._main_menu.enable()
-
-    def is_shown(self):
-        """Return True if the menu is shown.
-        """
-        return self._main_menu.is_enabled()
-
-    def create_click_event(self):
-        """Create a pygame event to click on the currently selected
-        widget on the menu. If the widget is a button, ENTER event
-        is created, else LEFT event is created.
-        """
-        if isinstance(self._main_menu.get_current().get_selected_widget(), pgm.widgets.Button):
-            event = pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_APPLY,
-                                       unicode='\r', mod=0, scancode=36,
-                                       window=None, test=True)
-        else:
-            event = pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_RIGHT,
-                                       unicode=u'\uf703', mod=0, scancode=124,
-                                       window=None, test=True)
-        return event
-
-    def create_next_event(self):
-        """Create a pygame event to select the next widget.
-        """
-        return pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_MOVE_UP,
-                                  unicode=u'\uf701', mod=0, scancode=125,
-                                  window=None, test=True)
-
-    def create_back_event(self):
-        """Create a pygame event to back to the previous menu.
-        """
-        return pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_BACK,
-                                  unicode=u'\x1b', mod=0, scancode=53,
-                                  window=None, test=True)
-
-    def process(self, events):
-        """Process the events related to the menu.
-        """
-        if not self._keyboard.is_enabled():
-            self._main_menu.update(events)
-            if self._main_menu.is_enabled():  # Menu may have been closed
-                self._main_menu.draw(self.win.surface)
-                selected = self._main_menu.get_current().get_selected_widget()
-                if isinstance(selected, pgm.widgets.TextInput) and self.cfg.getboolean('GENERAL', 'vkeyboard'):
-                    for event in events:
-                        if (event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.FINGERDOWN)\
-                                and selected.get_scrollarea().collide(selected, event):
-                            self._keyboard.enable()
-                            if isinstance(selected, pgm.widgets.ColorInput):
-                                self._keyboard.set_text(",".join([str(c) for c in selected.get_value()]))
-                            else:
-                                self._keyboard.set_text(selected.get_value())
-                            return
-        else:
-            for event in events:
-                if (event.type == pygame.MOUSEBUTTONDOWN and event.button in (1, 2, 3)
-                        or event.type == pygame.FINGERDOWN)\
-                        and not self._keyboard.get_rect().collidepoint(get_event_pos(self.win.display_size, event)):
-                    self._keyboard.disable()
-                    self._keyboard.draw()
-                    return
-                elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
-                    self._keyboard.disable()
-                    self._keyboard.draw()
-                    return
-
-            self._keyboard.update(events)
-            self._keyboard.draw(self.win.surface)
diff -ruN ../pibooth_local_copy/config/parser.py ./config/parser.py
--- ../pibooth_local_copy/config/parser.py	2025-05-16 13:26:47
+++ ./config/parser.py	1969-12-31 19:00:00
@@ -1,533 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth configuration.
-"""
-
-import io
-import ast
-import os
-import os.path as osp
-import itertools
-import inspect
-from configparser import RawConfigParser
-from collections import OrderedDict as odict
-from pibooth.utils import LOGGER, open_text_editor
-from pibooth import language
-
-
-def values_list_repr(values):
-    """Concatenate a list of values to a readable string.
-    """
-    return "'{}' or '{}'".format("', '".join([str(i) for i in values[:-1]]), values[-1])
-
-
-DEFAULT = odict((
-    ("GENERAL",
-        odict((
-            ("language",
-                ("en",
-                 "User interface language: {}".format(values_list_repr(language.get_supported_languages())),
-                 "UI language", language.get_supported_languages())),
-            ("directory",
-                ("~/Pictures/pibooth",
-                 "Path to save pictures (list of quoted paths accepted)",
-                 None, None)),
-            ("autostart",
-                (False,
-                 "Start pibooth at Raspberry Pi startup",
-                 "Auto-start", ['True', 'False'])),
-            ("autostart_delay",
-                (0,
-                 "How long to wait in seconds before start pibooth at Raspberry Pi startup",
-                 "Auto-start delay", [str(i) for i in range(0, 121, 5)])),
-            ("debug",
-                (False,
-                 "In debug mode, exceptions are not caught, logs are more verbose, pictures are cleared at startup",
-                 "Debug mode", ['True', 'False'])),
-            ("plugins",
-                ('',
-                 "Path to custom plugin(s) not installed with pip (list of quoted paths accepted)",
-                 None, None)),
-            ("plugins_disabled",
-                ('',
-                 "Plugin names to be disabled after startup (list of quoted names accepted)",
-                 None, None)),
-            ("vkeyboard",
-                (False,
-                 "Enable a virtual keyboard in the settings interface",
-                 "Virtual keyboard", ['True', 'False'])),
-        ))
-     ),
-    ("WINDOW",
-        odict((
-            ("size",
-                ((800, 480),
-                 "The (width, height) of the display window or 'fullscreen'",
-                 'Startup size', ['(800, 480)', 'fullscreen'])),
-            ("background",
-                ((0, 0, 0),
-                 "Background RGB color or image path",
-                 None, None)),
-            ("font",
-                ('Amatic-Bold',
-                 "Font name or file path used for app texts",
-                 None, None)),
-            ("text_color",
-                ((255, 255, 255),
-                 "Text RGB color",
-                 "Text RGB color", (255, 255, 255))),
-            ("flash",
-                (True,
-                 "Blinking background when a capture is taken",
-                 "Flash on capture", ['True', 'False'])),
-            ("animate",
-                (False,
-                 "Animate the last taken picture by displaying captures one by one",
-                 "Animated picture", ['True', 'False'])),
-            ("animate_delay",
-                (0.2,
-                 "How long is displayed the capture in seconds before switching to the next one",
-                 None, None)),
-            ("finish_picture_delay",
-                (0,
-                 "On 'finish' state: how long is displayed the final picture in seconds (0 if never shown)",
-                 "Finish picture display time", [str(i) for i in range(0, 121, 5)])),
-            ("wait_picture_delay",
-                (-1,
-                 "On 'wait' state: how long is displayed the final picture in seconds before being hidden (-1 if never hidden)",
-                 "Wait picture display time", ['-1'] + [str(i) for i in range(0, 121, 5)])),
-            ("chosen_delay",
-                (4,
-                 "How long is displayed the 'chosen' state:  (0 if never shown)",
-                 "Chosen layout display time", [str(i) for i in range(0, 10)])),
-            ("arrows",
-                ('bottom',
-                 "Show arrows to indicate physical buttons: 'bottom', 'top', 'hidden' or 'touchscreen'",
-                 "Show button arrows", ['bottom', 'top', 'hidden', 'touchscreen'])),
-            ("arrows_x_offset",
-                (0,
-                 "Apply horizontal offset to arrows position",
-                 None, None)),
-            ("preview_delay",
-                (3,
-                 "How long is the preview in seconds",
-                 "Preview delay", [str(i) for i in range(1, 21)])),
-            ("preview_countdown",
-                (True,
-                 "Show a countdown timer during the preview",
-                 "Preview countdown", ['True', 'False'])),
-            ("preview_stop_on_capture",
-                (False,
-                 "Stop the preview before taking the capture",
-                 None, None)),
-        ))
-     ),
-    ("PICTURE",
-        odict((
-            ("orientation",
-                ("auto",
-                 "Orientation of the final picture: 'auto', 'portrait' or 'landscape'",
-                 "Orientation", ['auto', 'portrait', 'landscape'])),
-            ("captures",
-                ((4, 1),
-                 "Possible choice(s) of captures numbers (numbers between 1 to 4)",
-                 "Number of captures", ['1', '2', '3', '4'] + [str(val) for val in itertools.permutations(range(1, 5), 2)])),
-            ("captures_effects",
-                ("none",
-                 "Effect applied to the captures (list of quoted names accepted)",
-                 None, None)),
-            ("captures_cropping",
-                (False,
-                 "Crop each capture border in order to fit the paper size",
-                 "Crop captures",  ['True', 'False'])),
-            ("margin_thick",
-                (100,
-                 "Thick (in pixels) between captures and picture borders/texts",
-                 "Borders width", [str(i) for i in range(0, 210, 10)])),
-            ("footer_text1",
-                ("Footer 1",
-                 "Main text displayed",
-                 "Title", "")),
-            ("footer_text2",
-                ("Footer 2",
-                 "Secondary text displayed",
-                 "Sub-title", "")),
-            ("text_colors",
-                ((0, 0, 0),
-                 "RGB colors used for footer texts (list of tuples accepted)",
-                 None, None)),
-            ("text_fonts",
-                (('Amatic-Bold', 'AmaticSC-Regular'),
-                 "Fonts name or file path used for footer texts (list of quoted names accepted)",
-                 None, None)),
-            ("text_alignments",
-                ('center',
-                 "Alignments used for footer texts: 'left', 'center' or 'right' (list of quoted names accepted)",
-                 None, None)),
-            ("overlays",
-                ('',
-                 "Overlay path (PNG file) with same aspect ratio than final picture (list of quoted paths accepted)",
-                 None, None)),
-            ("backgrounds",
-                ((255, 255, 255),
-                 "Background RGB color or image path (list of tuples or quoted paths accepted)",
-                 None, None)),
-        ))
-     ),
-    ("CAMERA",
-        odict((
-            ("iso",
-                (100,
-                 "Adjust ISO for lighting issues, can be different for preview and capture (list of integers accepted)",
-                 None, None)),
-            ("flip",
-                (False,
-                 "Flip horizontally the capture",
-                 None, None)),
-            ("rotation",
-                (0,
-                 "Rotation of the camera: 0, 90, 180 or 270, can be different for preview and capture (list of integers accepted)",
-                 None, None)),
-            ("resolution",
-                ((1934, 2464),
-                 "Resolution for camera captures (preview will have same aspect ratio)",
-                 None, None)),
-            ("delete_internal_memory",
-                (False,
-                 "Delete captures from camera internal memory (when applicable)",
-                 None, None)),
-        ))
-     ),
-    ("PRINTER",
-        odict((
-            ("printer_name",
-                ("default",
-                 "Name of the printer defined in CUPS (or use the 'default' one)",
-                 None, None)),
-            ("printer_options",
-                ({},
-                 "Print options passed to the printer, shall be a valid Python dictionary",
-                 None, None)),
-            ("printer_delay",
-                (10,
-                 "How long is the print view in seconds (0 to skip it)",
-                 "Time to show print screen", [str(i) for i in range(0, 21)])),
-            ("auto_print",
-                (0,
-                 "Number of pages automatically sent to the printer (or use 'max' to reach max duplicate)",
-                 "Automatically printed pages", [str(i) for i in range(0, 11)] + ['max'])),
-            ("max_pages",
-                (-1,
-                 "Maximum number of printed pages before warning on paper/ink levels (-1 = infinite)",
-                 'Maximum of printed pages', [str(i) for i in range(-1, 1000)])),
-            ("max_duplicates",
-                (3,
-                 "Maximum number of duplicate pages sent to the printer (avoid paper waste)",
-                 'Maximum of printed duplicates', [str(i) for i in range(0, 10)])),
-            ("pictures_per_page",
-                (1,
-                 "Print 1, 2, 3 or 4 picture copies per page",
-                 'Number of copies per page', [str(i) for i in range(1, 5)])),
-        ))
-     ),
-    ("CONTROLS",
-        odict((
-            ("debounce_delay",
-                (0.3,
-                 "How long to press a single hardware button in seconds",
-                 None, None)),
-            ("multi_press_delay",
-                (0.5,
-                 "How long to press multiple hardware buttons in seconds",
-                 None, None)),
-            ("picture_btn_pin",
-                (11,
-                 "Physical GPIO IN pin to take a picture",
-                 None, None)),
-            ("picture_led_pin",
-                (7,
-                 "Physical GPIO OUT pin to light a LED when picture button is pressed",
-                 None, None)),
-            ("print_btn_pin",
-                (13,
-                 "Physical GPIO IN pin to print a picture",
-                 None, None)),
-            ("print_led_pin",
-                (15,
-                 "Physical GPIO OUT pin to light a LED when print button is pressed",
-                 None, None)),
-        ))
-     ),
-))
-
-
-class PiConfigParser(RawConfigParser):
-
-    """Class to parse and store the configuration values.
-    The following attributes are available for use in plugins:
-
-    :attr filename: absolute path to the laoded config file
-    :type filename: str
-    """
-
-    def __init__(self, filename, plugin_manager, load=True):
-        super(PiConfigParser, self).__init__()
-        self._pm = plugin_manager
-        self.filename = osp.abspath(osp.expanduser(filename))
-
-        if osp.isfile(self.filename) and load:
-            self.load()
-
-    def _get_abs_path(self, path):
-        """Return absolute path. In case of relative path given, the absolute
-        one is created using config file path as reference path.
-        """
-        if not path:  # Empty string, don't process it as it is not a path
-            return path
-        path = osp.expanduser(path)
-        if not osp.isabs(path):
-            path = osp.join(osp.relpath(osp.dirname(self.filename), '.'), path)
-        return osp.abspath(path)
-
-    def save(self, default=False):
-        """Save the current or default values into the configuration file.
-        """
-        LOGGER.info("Generate the configuration file in '%s'", self.filename)
-
-        dirname = osp.dirname(self.filename)
-        if not osp.isdir(dirname):
-            os.makedirs(dirname)
-
-        with io.open(self.filename, 'w', encoding="utf-8") as fp:
-            for section, options in DEFAULT.items():
-                fp.write("[{}]\n".format(section))
-                for name, value in options.items():
-                    if default:
-                        val = value[0]
-                    else:
-                        val = self.get(section, name)
-                    fp.write("# {}\n{} = {}\n\n".format(value[1], name, val))
-
-        self.handle_autostart()
-
-    def load(self):
-        """Load configuration from file.
-        """
-        self.read(self.filename, encoding="utf-8")
-        self.handle_autostart()
-
-    def edit(self):
-        """Open a text editor to edit the configuration.
-        """
-        if open_text_editor(self.filename):
-            # Reload config to check if autostart has changed
-            self.load()
-
-    def handle_autostart(self):
-        """Handle desktop file to start pibooth at the Raspberry Pi startup.
-        """
-        filename = osp.expanduser('~/.config/autostart/pibooth.desktop')
-        dirname = osp.dirname(filename)
-        enable = self.getboolean('GENERAL', 'autostart')
-        delay = self.getint('GENERAL', 'autostart_delay')
-        if enable:
-            regenerate = True
-            if osp.isfile(filename):
-                with open(filename, 'r') as fp:
-                    txt = fp.read()
-                    if delay > 0 and f"sleep {delay}" in txt or delay <= 0 and "sleep" not in txt:
-                        regenerate = False
-
-            if regenerate:
-                if not osp.isdir(dirname):
-                    os.makedirs(dirname)
-
-                LOGGER.info("Generate the auto-startup file in '%s'", dirname)
-                with open(filename, 'w') as fp:
-                    fp.write("[Desktop Entry]\n")
-                    fp.write("Name=pibooth\n")
-                    if delay > 0:
-                        fp.write(f"Exec=bash -c \"sleep {delay} && pibooth\"\n")
-                    else:
-                        fp.write("Exec=pibooth\n")
-                    fp.write("Type=application\n")
-
-        elif not enable and osp.isfile(filename):
-            LOGGER.info("Remove the auto-startup file in '%s'", dirname)
-            os.remove(filename)
-
-    def join_path(self, *names):
-        """Return the directory path of the configuration file
-        and join it the given names.
-
-        :param names: names to join to the directory path
-        :type names: str
-        """
-        return osp.join(osp.dirname(self.filename), *names)
-
-    def add_option(self, section, option, default, description, menu_name=None, menu_choices=None):
-        """Add a new option to the configuration and defines its default value.
-
-        :param section: section in which the option is declared
-        :type section: str
-        :param option: option name
-        :type option: str
-        :param default: default value of the option
-        :type default: any
-        :param description: description to put in the configuration
-        :type description: str
-        :param menu_name: option label on graphical menu (hidden if None)
-        :type menu_name: str
-        :param menu_choices: option possible choices on graphical menu
-        :type menu_choices: any
-        """
-        assert section, "Section name can not be empty string"
-        assert option, "Option name can not be empty string"
-        assert description, "Description can not be empty string"
-
-        # Find the caller plugin
-        stack = inspect.stack()
-        if len(stack) < 2:
-            plugin_name = "Unknown"
-        else:
-            plugin = inspect.getmodule(inspect.stack()[1][0])
-            plugin_name = self._pm.get_friendly_name(plugin, False)
-
-        # Check that the option is not already created
-        if section in DEFAULT and option in DEFAULT[section]:
-            raise ValueError("The plugin '{}' try to define the option [{}][{}] "
-                             "which is already defined.".format(plugin_name, section, option))
-
-        # Add the option to the default dictionary
-        description = "{}\n# Required by '{}' plugin".format(description, plugin_name)
-        DEFAULT.setdefault(section, odict())[option] = (default, description, menu_name, menu_choices)
-
-    def get(self, section, option, **kwargs):
-        """Get a value from config. Return the default value if the section
-        or option is not defined.
-
-        :param section: config section name
-        :type section: str
-        :param option: option name
-        :type option: str
-
-        :return: value
-        :rtype: str
-        """
-        if self.has_section(section) and self.has_option(section, option):
-            return super(PiConfigParser, self).get(section, option, **kwargs)
-        return str(DEFAULT[section][option][0])
-
-    def set(self, section, option, value=None):
-        """Set a value to config. Create the section if it is not defined.
-
-        :param section: config section name
-        :type section: str
-        :param option: option name
-        :type option: str
-        :param value: value to set
-        :type value: str
-        """
-        if not self.has_section(section):
-            self.add_section(section)
-        super(PiConfigParser, self).set(section, option, value)
-
-    def gettyped(self, section, option):
-        """Get a value from config and try to convert it in a native Python
-        type (using the :py:mod:`ast` module).
-
-        :param section: config section name
-        :type section: str
-        :param option: option name
-        :type option: str
-        """
-        value = self.get(section, option)
-        try:
-            return ast.literal_eval(value)
-        except (ValueError, SyntaxError):
-            return value
-
-    def getpath(self, section, option):
-        """Get a path from config, evaluate the absolute path from configuration
-        file path.
-
-        :param section: config section name
-        :type section: str
-        :param option: option name
-        :type option: str
-        """
-        return self._get_abs_path(self.get(section, option))
-
-    @staticmethod
-    def _get_authorized_types(types):
-        """Get a tuple of authorized types and if the color and path are accepted
-        """
-        if not isinstance(types, (tuple, list)):
-            types = [types]
-        else:
-            types = list(types)
-
-        color = False
-        if 'color' in types:
-            types.remove('color')
-            types.append(tuple)
-            types.append(list)
-            color = True  # Option accept color tuples
-
-        path = False
-        if 'path' in types:
-            types.remove('path')
-            types.append(str)
-            path = True  # Option accept file path
-
-        types = tuple(types)
-
-        return types, color, path
-
-    def gettuple(self, section, option, types, extend=0):
-        """Get a list of values from config. The values type shall be in the
-        list of authorized types. This method permits to get severals values
-        from the same configuration option.
-
-        If the option contains one value (with acceptable type), a tuple
-        with one element is created and returned.
-
-        :param section: config section name
-        :type section: str
-        :param option: option name
-        :type option: str
-        :param types: list of authorized types
-        :type types: list
-        :param extend: extend the tuple with the last value until length is reached
-        :type extend: int
-        """
-        values = self.gettyped(section, option)
-        types, color, path = self._get_authorized_types(types)
-
-        if not isinstance(values, (tuple, list)):
-            if not isinstance(values, types):
-                raise ValueError("Invalid config value [{}][{}]={}".format(section, option, values))
-            if values == '' and extend == 0:
-                # Empty config key and empty tuple accepted
-                values = ()
-            else:
-                values = (values,)
-        else:
-            # Check if one value is given or if it is a list of value
-            if color and len(values) == 3 and all(isinstance(elem, int) for elem in values):
-                values = (values,)
-            elif not all(isinstance(elem, types) for elem in values):
-                raise ValueError("Invalid config value [{}][{}]={}".format(section, option, values))
-
-        if path:
-            new_values = []
-            for v in values:
-                if isinstance(v, str):
-                    new_values.append(self._get_abs_path(v))
-                else:
-                    new_values.append(v)
-            values = tuple(new_values)
-
-        while len(values) < extend:
-            values += (values[-1],)
-        return values
diff -ruN ../pibooth_local_copy/counters.py ./counters.py
--- ../pibooth_local_copy/counters.py	2025-05-16 13:26:44
+++ ./counters.py	1969-12-31 19:00:00
@@ -1,66 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import pickle
-import os.path as osp
-
-
-class Counters(object):
-
-    def __init__(self, filename='', **kwargs):
-        self.data = kwargs.copy()
-        self.default = kwargs
-        self.filename = osp.abspath(osp.expanduser(filename))
-        if osp.isfile(self.filename):
-            self.load()
-
-    def __str__(self):
-        return ", ".join("{}:{}".format(key, value) for key, value in self.data.items())
-
-    def __iter__(self):
-        """Iterate over counters names.
-        """
-        return iter(self.data)
-
-    def __getitem__(self, name):
-        """Get value from counter name.
-        """
-        return self.__getattr__(name)
-
-    def __getattr__(self, name):
-        """Called only when an attribute does not exist.
-        """
-        if name not in self.data:
-            raise AttributeError("No counter with name '{}'".format(name))
-        return self.data[name]
-
-    def __setattr__(self, name, value):
-        """Called each time an attribute is set.
-        """
-        if name != 'data' and name in self.data:
-            self.data[name] = value
-            self.save()
-        else:
-            super(Counters, self).__setattr__(name, value)
-
-    def names(self):
-        """Return the list of counters.
-        """
-        return [key for key in self.data]
-
-    def load(self):
-        """Load the saved counters.
-        """
-        with open(self.filename, 'rb') as fp:
-            self.data.update(pickle.load(fp))
-
-    def reset(self):
-        """Reset all counters.
-        """
-        self.data = self.default.copy()
-        self.save()
-
-    def save(self):
-        """Save the current counters in a file.
-        """
-        with open(self.filename, 'wb') as fp:
-            pickle.dump(self.data, fp, pickle.HIGHEST_PROTOCOL)
diff -ruN ../pibooth_local_copy/docs/.readthedocs.yaml ./docs/.readthedocs.yaml
--- ../pibooth_local_copy/docs/.readthedocs.yaml	1969-12-31 19:00:00
+++ ./docs/.readthedocs.yaml	2025-05-16 14:02:41
@@ -0,0 +1,22 @@
+# .readthedocs.yaml
+# Read the Docs configuration file
+# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details
+
+# Required
+version: 2
+
+# Set the version of Python and other tools you might need
+build:
+  os: ubuntu-22.04
+  tools:
+    python: "3.11"
+
+# Build documentation in the docs/ directory with Sphinx
+sphinx:
+  configuration: docs/conf.py
+
+# We recommend specifying your dependencies to enable reproducible builds:
+# https://docs.readthedocs.io/en/stable/guides/reproducible-builds.html
+python:
+   install:
+   - requirements: docs/requirements.txt
diff -ruN ../pibooth_local_copy/docs/Makefile ./docs/Makefile
--- ../pibooth_local_copy/docs/Makefile	1969-12-31 19:00:00
+++ ./docs/Makefile	2025-05-16 14:02:41
@@ -0,0 +1,20 @@
+# Minimal makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line, and also
+# from the environment for the first two.
+SPHINXOPTS    ?=
+SPHINXBUILD   ?= sphinx-build
+SOURCEDIR     = .
+BUILDDIR      = build
+
+# Put it first so that "make" without argument is like "make help".
+help:
+	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
+
+.PHONY: help Makefile
+
+# Catch-all target: route all unknown targets to Sphinx using the new
+# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
+%: Makefile
+	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) -E -j auto -T -v $(O)
Binary files ../pibooth_local_copy/docs/_static/favicon.ico and ./docs/_static/favicon.ico differ
Binary files ../pibooth_local_copy/docs/_static/icon.png and ./docs/_static/icon.png differ
diff -ruN ../pibooth_local_copy/docs/conf.py ./docs/conf.py
--- ../pibooth_local_copy/docs/conf.py	1969-12-31 19:00:00
+++ ./docs/conf.py	2025-05-16 14:02:41
@@ -0,0 +1,94 @@
+# Configuration file for the Sphinx documentation builder.
+#
+# This file only contains a selection of the most common options. For a full
+# list see the documentation:
+# https://www.sphinx-doc.org/en/master/usage/configuration.html
+
+# -- Path setup --------------------------------------------------------------
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+
+import sys
+import os.path as osp
+
+sys.path.insert(0, osp.dirname(osp.dirname(osp.abspath(__file__))))
+import pibooth
+
+# -- Project information -----------------------------------------------------
+
+project = 'Pibooth'
+copyright = '2024, Vincent Verdeil, Antoine Rousseaux'
+author = 'Vincent Verdeil, Antoine Rousseaux'
+
+# The full version, including alpha/beta/rc tags
+release = pibooth.__version__
+
+# -- General configuration ---------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autosectionlabel',
+    'sphinx.ext.viewcode',
+    'sphinx.ext.autodoc',
+    'sphinx_copybutton'
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This pattern also affects html_static_path and html_extra_path.
+exclude_patterns = []
+
+# -- Options for HTML output -------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+#
+html_theme = 'sphinx_rtd_theme'
+html_theme_options = {
+    'logo_only': True,
+}
+
+# This value selects if automatically documented members are sorted alphabetical
+# (value 'alphabetical'), by member type (value 'groupwise') or by source order
+# (value 'bysource'). The default is alphabetical.
+autodoc_member_order = 'bysource'
+
+add_module_names = False
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
+
+# The name of an image file (relative to this directory) to place at the top
+# of the sidebar.
+# NOTE: can not put it in the _static folder, else it will not be displayed
+# on Read The Doc (seems to be a bug..??)
+html_logo = 'pibooth.png'
+
+# The name of an image file (within the static path) to use as favicon of the
+# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
+# pixels large.
+html_favicon = '_static/favicon.ico'
+
+# If false, no index is generated.
+html_use_index = True
+
+# If true, the index is split into individual pages for each letter.
+html_split_index = False
+
+# If true, links to the reST sources are added to the pages.
+html_show_sourcelink = False
+
+# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
+html_show_sphinx = False
+
+# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
+html_show_copyright = True
Binary files ../pibooth_local_copy/docs/images/background_samples.png and ./docs/images/background_samples.png differ
Binary files ../pibooth_local_copy/docs/images/documentation.png and ./docs/images/documentation.png differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_background.jpg and ./docs/images/examples/pibooth_background.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_default.jpg and ./docs/images/examples/pibooth_default.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_font.jpg and ./docs/images/examples/pibooth_font.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_landscape.jpg and ./docs/images/examples/pibooth_landscape.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_landscape_without_text.jpg and ./docs/images/examples/pibooth_landscape_without_text.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_one_photo.jpg and ./docs/images/examples/pibooth_one_photo.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_overlay.jpg and ./docs/images/examples/pibooth_overlay.jpg differ
Binary files ../pibooth_local_copy/docs/images/examples/pibooth_without_text.jpg and ./docs/images/examples/pibooth_without_text.jpg differ
Binary files ../pibooth_local_copy/docs/images/gallery.png and ./docs/images/gallery.png differ
Binary files ../pibooth_local_copy/docs/images/origin/background_samples.xcf and ./docs/images/origin/background_samples.xcf differ
Binary files ../pibooth_local_copy/docs/images/origin/documentation.xcf and ./docs/images/origin/documentation.xcf differ
Binary files ../pibooth_local_copy/docs/images/origin/pibooth.xcf and ./docs/images/origin/pibooth.xcf differ
Binary files ../pibooth_local_copy/docs/images/origin/sketch.fzz and ./docs/images/origin/sketch.fzz differ
diff -ruN ../pibooth_local_copy/docs/images/origin/state_sequence.xml ./docs/images/origin/state_sequence.xml
--- ../pibooth_local_copy/docs/images/origin/state_sequence.xml	1969-12-31 19:00:00
+++ ./docs/images/origin/state_sequence.xml	2025-05-16 14:02:41
@@ -0,0 +1 @@
+<mxfile host="app.diagrams.net" modified="2021-08-04T20:25:01.332Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Safari/605.1.15" etag="hFl3HrHHwNDZc0BrhJyB" version="14.9.4" type="device"><diagram id="de4ad0c1-add1-0f31-78a5-e48fb5f67ab4" name="Page-1">7V1bd5u4Fv41Weuch3gB4vrYpEk7M+lp56Qr0+nLWdiWbVoMLsaxM7/+AEYYXQDZCIHj5KE1AgRof3tr37R1BW6Xuw+Ru1p8CqfQv9KU6e4KvL/SNEPXkn/Thpd9AzD0fcM88qb7JvXQ8Oj9A/NGJW/deFO4xi6Mw9CPvRXeOAmDAE5irM2NonCLXzYLffypK3cOqYbHievTrX9503iRt6qmczjxEXrzRf5oW7P2J8bu5Oc8CjdB/rwrDcyyv/3ppYv6yj90vXCn4bbUBO6uwG0UhvH+13J3C/10aNGw7e+7rzhbvHcEg5jnhunHmf50Z+6Wf/76MPn+dfz88vDjWs+/8tn1N/mAPMA5TL4p6Q28y988fkGjlXzEKv0ZhHHy38124cXwceVO0rZtgo+kbREv/eRITX4ehujzJva9AObtUzf6+Tm5y4tT0CgjxUga13EU/oS3oR9G2bOAk/0lZ2ZhELPaXd+bB0mbD2fJCNw8wyj2EsK+y5vjMH0depjykUsvh7tSUz5sH2C4hHH0klySn7V1sL8FQdzKIb4tAQbkZF6UsAL0vNHNQTov+j4QKvmR04pNN307/uP7ty9f1/a3z/q3J+9/n3ara1XRKNrAaQLs/DCM4kU4DwPXvzu03mSkgGm/CXFvDtc8hOlQZaT5AeP4JedSdxOHOEHhzou/ZSQz8qO/S2fe7/Kes4OX/CClXt6hqqUng2QASp2kh0Uv6cGhm+wI9VNJyHW4iSawZrCcnHyxG81hXHOhbu4vTEeyFhgR9N3Ye8ZFCIvI+a1fQi956QJQqqNggNINgHexf9P8LgIqxWucjh40ICWup9B0wIrazOglGlslxpwkpIIRi7fv721FqaUqP3vqAB9NUwUUewKTwZ52V9xp22fPnGqZNUucKpw5bYOTOQ1bDnPqKg4nw5HLnGhAXidz6k7vzPmqhR+wJI6vqjOG0vRTZWyc/JjH2TfuG9JRwgbZ/LUJ0YnrdTZ+ib6pqMpqdziJevnL9WLUU/JW+87wByTNJz/UZj2z+JSI8Sj8DdrCpwSOBBnK/b0YcGi6jYFDVZ2RQcHDZmmuItDBIcgSS+NdasSl/OK767U3Iea0QllkzEf5fIdmOPwMe747fZ5SDZOeqBADNM5JpeE2GMON2lpOXZqCGyoq0BG9USf776QmL1pFtQjo2A7Zlbh5ECBk03JkvXKDU7naZHH1w937VMog+1a5efjtP380ixb8PQgUJ+wY47iNYPIa7ji7IMXdKh2lbNyMmyvjPWuaIM3XpTedZoqh746hf1OY0iVZkfsbmLBGzEcKi8KTkr/dVdkbwRIi18pIx6BwrQoBq4l3SnYQzmZr2BZYqtWXCOISNEh8lEUKGJZIcRyMTBqgxACvRAEm3hVDOAmUKCwlrw+JclAe9pdp6DLTXaaKQDBep/+dJIVo9eQM5BLiSBFySdU1AlNCMG8Q4o6CvBDZpFVPekLh+DnRJpvAqJB4ZN7Eq/72KFEBS6IanBL1ACxFMfE5Dznx5QhdHVii9DjdauyqQuoeuiLmfbFcwDIhB4QnhncKOMfhKYGT6uDajioVToZJ6PKnw8lUGrtqhJNY/LA0vPJE35GZUDUTn/g4ge/MqWHUGjR9cpxDcxyKMR/BcYaNA1WuADcdYYa4BRq7ksxxdMiYxk8p2gH9cbgtBzqyhuQEUiwzCPHijREzrAx7ZI7Z/C0ULvAhoJ3k4ymrD6QKKRV9Fok+82T0kT3ZvOBLyOm+lC7LDY2aOarqSQek7vvsEtugHso8gTuugBwjkMcM+HGBluVF4AYtN9R4vb6ApdCVzRqRYQEq2vAI/TRJKBmMBaw1YKhQQdHguy/hJq67tMI+7zhOUB1GIiIIIsNLwMbDS3IjCIAVQWjGEsoxQ2hROYBz667iTQTT2+GvDQwmcHgIqKJzpwFGQ7X6RABL2ahGgOCo45conMBEGwnmJ8QezzdsaPYaNkQ6mASmf1wkKmc6B643/pvEz5VHy+mT+EY3CphW1sAKo7V8rjBiRatnTBcSr0tSuHrGjm2jxMd+EtaOCeDXeh5qEtTIRDcu0tUmiTYmrKFEo64T1oDujJzyH8a/OrJpJKWvoeF5ywka5uSukQl5hiVPujPzOjsS+Z3a3O0kg/g881YUQDP+RUh/qxWJWUlgzAtNbVAkNqqlsgSvzO0iDNfDN6hFillDJ8SsQuflShWzKkqyGz6XV68YOo7rW7C5xcnmKncwWBKfV4dDJfhLCifaBTlLDMJeNlAXfTG6o/fJ58csPurflkNrihr53BFuy7Vjc7tPNr9QtyggF4bZPU/pjnYunD6ANcCstBKm4i48csr22tjolmLVqoN30ZjVgTL8bDDC0w1Mi+iqItp/dIxeIRba2kbtm5l27fV4RF/Y2ub27oTzMWbbTn/9MUW76a/nqGCG8gua+Uhj1tR71nHRgtZXFCZqZ4eiCwfCoHZ7+ki3QUYUfaV4FG3e4iT2wGKGAnLlLsafhLzBzf4kTXiVi3aCVjtqphXvN17D4KL8xubQ/Mb2W2oAP5vzyvKBTddm9WpZCVz+JYLPHtxeFJvrhGncu9dYBb3WrDozPmdk3FdM58MynNGL98Po917grRcXxefkdN675awal2SaZXx+NHmb+Z+3Zt3AEn3M09ZTiGJ/1/PX7uyy8kDIdDvAqH8nVQBYvfrHRfB/U5DoFNfMdmXfzJXtu9+37x9unz49PD3/2l7rvGwuPtlLSHxG14+LzxDXdxOfsehMtBe4pjBJl67BV0MEYVpN+mbm+T7RxF/AhiUVcKTzQukIxd/BY3U6cviU5IHOkAdaZ/Y9rRLiiygVtCBy6BQqJnsky+rWzAkgpaHjpOQuC94dLauzvw4+Nc6Fjm/Urqc2q5CtXGo7Z5PQ2b/Fzp3+gULLXad/GApeEchEGdoNORvC0iQ4lulwLI98kxKklCDIyqhFL1lKWOei74vjdps3bG4Pyw+PpFSJKVdpsknKEPcUGaNFuBxv1nzmbV2BchFqLdJ9Cj8XrQsZGgP2ekdDqSp0TOOS7AyDSFY1AS2IpNoZqsJTi7d7ydR/MoCqMBaR1TogBiKeihevJaHve6t1FexLhHDXq/1+XjNvlxK0qp4s4kCCbhT7lVk0d+IJ22TBIBwlrFmdwUxqZ8ykaoNkpjZMwZ2LOqylGMWLXzpTGGiBYW9MIWAl+fkYxNYphkwzG6q8KSyOcEO5pUTk2NbnEtjQNPpmQzTwdZRIh3HF//VHF4e3iC0bDYabXTUZo2J2NipKj/jE4Xef/fHglqZQA8mbYdsfAdQeCSBOQLQmAFrNiPFH3/qsxiG9ZcuMogxef5DlKY5/tjIDVBBuSDKDZwuzs5UZ/AQYpszgcCjJlhk6o9K3ZMiySgO8GplRtXvQkGTG6/AHtCbAIGUGSr8dfjRMQPZbW5cccysOOS65k/LfLAUvqYD2FKjKfzM0pe76bvLfVDRjXISXShoEC/t6KP4oRuVyN7ttmopqEgFDiuWaFp7pZGh9x3J1WqcJQmoMX2so17QIMcWIrcsN5eo0ti+IHmRoHTh908PgcW01bLHEu2rm1FU5lQPfrF3wRsElbbJNsCOwAN4F795KpPqhA6Kjjit1q0iIl2Azi8Jl+gbZ3evYjQebMsNtCDECZSLjLxoRfwFG79LgsjOfLLJMHyNZQzJBaDfuBU2X5IoX0+x5xYvKLIYtyUND7elSyKIq1wxnzL8LS0Ald//Siu3/SsTT5BLv0orVd5DkwV32dmDrl1Vm3ds3zm3mXB0tUZXAt7/F5r13Z31abq9/XzxCJfjv3zdFKqvo3e5RJ5UbJ48Lel5P9oOf9hXNx//S0nyx5HuTD1KI3/+mH3TqhtC9vKZGvqbizVJI5YsJEvo+u56fBbnqv6Bpmf0wlBYhWgqxzaGpMKY6tSuemX6c6U935m75568Pk+9fx88vDz+u9drlnG3rMrSr7vDoLVcpepTH1Eg8oRqqoOISUfs+pJSSKLtXBEHWNrURuZicjj47BY7lYJaeoW/D5SodwgNYBA4wxyaonQw9EfY3aJvGkSkq+q3qc25aMXsIVdG6Ltvt5wAiNdUk4ibi3H613/mmQzcxuU0QiuHZk6oPMBx7FOW6TnhyVJ2YdExGyhPKgcGGBYxQYFH8yLyORMl6qh+V8yQXmK8jTbLt8KOMpxERQD80YKYESy87tIonUq+FAE6s133SVN/5DK5SO66QnfBu3mLTm7eQXQnavMVRqp5U9W6Nd7ROkGLjlLYg7oI93VbFIAzPB0GgNN+JuRvrw1YIwhiAkaIj0+xDG3KUibZLt2d+o1lBM5xiDq01yaUYbQbcLkJvMuzcNNvWcIlk0MHdrnLTmMPYb3n8oxKKk4MvMPKS706pQWVq1jFEf1OtYo00YhKy+CplndRXx7a3TSfOxZEbrL3YCwMKSCWCk0JuHMZxuMycJEVa19gPJz+lEJVRu7btbnimRWrNRd7G0XTWm/sSR+fawi0lOmdZv1W1NAWLWIaZT5G5OhJClHLSUdUXCSKWPZg86Ro9FA6S6Pxk8mXHRY33WTLCJbpuOiOn/IeDTbNHSumPzxZqTK0EFqFGncz/yWEUpmGkw+UJky4+hVOYXvF/</diagram></mxfile>
\ No newline at end of file
Binary files ../pibooth_local_copy/docs/images/settings.png and ./docs/images/settings.png differ
Binary files ../pibooth_local_copy/docs/images/sketch.png and ./docs/images/sketch.png differ
Binary files ../pibooth_local_copy/docs/images/state_sequence.png and ./docs/images/state_sequence.png differ
Binary files ../pibooth_local_copy/docs/images/state_sequence_details.png and ./docs/images/state_sequence_details.png differ
diff -ruN ../pibooth_local_copy/docs/index.rst ./docs/index.rst
--- ../pibooth_local_copy/docs/index.rst	1969-12-31 19:00:00
+++ ./docs/index.rst	2025-05-16 14:02:41
@@ -0,0 +1,90 @@
+
+Welcome to Pibooth's documentation!
+===================================
+
+|Pibooth|
+
+|PythonVersions| |PypiPackage| |Downloads|
+
+The ``pibooth`` project provides a photobooth application *out-of-the-box* in
+pure Python for Raspberry Pi. Have a look to the `wiki <https://github.com/pibooth/pibooth/wiki>`_
+to discover some realizations from GitHub users, and don't hesitate to send us
+photos of your version.
+
+.. image:: images/background_samples.png
+   :align: center
+   :alt: Background samples
+
+.. note:: Even if designed for a Raspberry Pi, this software may be installed on
+          any Unix/Linux based OS (tested on Ubuntu 16 and Mac OSX 10.14.6).
+
+.. image:: images/gallery.png
+   :align: center
+   :alt: Gallery
+   :target: sources/examples.html
+
+.. toctree::
+   :caption: About
+   :maxdepth: 2
+
+   sources/about.rst
+   sources/examples.rst
+
+.. toctree::
+   :caption: Install
+   :maxdepth: 2
+
+   sources/install.rst
+
+.. toctree::
+   :caption: Start
+   :maxdepth: 2
+
+   sources/start.rst
+   sources/config/config.rst
+   sources/tutorials/dslr_tips.rst
+
+.. toctree::
+   :caption: Scripts and tools
+   :maxdepth: 2
+
+   sources/scripts.rst
+
+.. toctree::
+   :caption: Plugins
+   :maxdepth: 2
+
+   sources/plugins/plugins.rst
+   sources/plugins/hooks.rst
+   sources/plugins/examples.rst
+
+.. toctree::
+   :caption: Developers
+   :hidden:
+
+   sources/dev/install.rst
+   sources/dev/rules.rst
+   sources/dev/release.rst
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
+
+.. |Pibooth| image:: pibooth.png
+   :target: https://www.pibooth.org
+   :align: middle
+
+.. |PythonVersions| image:: https://img.shields.io/badge/python-3.6+-red.svg
+   :target: https://www.python.org/downloads
+   :alt: Python 3.6+
+
+.. |PypiPackage| image:: https://badge.fury.io/py/pibooth.svg
+   :target: https://pypi.org/project/pibooth
+   :alt: PyPi package
+
+.. |Downloads| image:: https://img.shields.io/pypi/dm/pibooth?color=purple
+   :target: https://pypi.org/project/pibooth
+   :alt: PyPi downloads
Binary files ../pibooth_local_copy/docs/pibooth.png and ./docs/pibooth.png differ
diff -ruN ../pibooth_local_copy/docs/requirements.txt ./docs/requirements.txt
--- ../pibooth_local_copy/docs/requirements.txt	1969-12-31 19:00:00
+++ ./docs/requirements.txt	2025-05-16 14:02:41
@@ -0,0 +1,10 @@
+sphinx
+sphinx-rtd-theme
+sphinx-copybutton
+pluggy
+pygame
+pygame-menu
+pygame-vkeyboard
+psutil
+gpiozero
+Pillow==9.2.0
\ No newline at end of file
diff -ruN ../pibooth_local_copy/docs/sources/about.rst ./docs/sources/about.rst
--- ../pibooth_local_copy/docs/sources/about.rst	1969-12-31 19:00:00
+++ ./docs/sources/about.rst	2025-05-16 14:02:41
@@ -0,0 +1,46 @@
+Features
+--------
+
+* Interface available in Danish, Dutch, English, French, German, Hungarian, Norwegian and Spanish (customizable)
+* Capture from 1 to 4 photos and concatenate them in a final picture
+* Support all cameras compatible with gPhoto2, OpenCV and Raspberry Pi
+* Support for hardware buttons and lamps on Raspberry Pi GPIO
+* Fully driven from hardware buttons / keyboard / mouse / touchscreen
+* Auto-start at the Raspberry Pi startup
+* Animate captures from the last sequence during idle time
+* Store final pictures and the individual captures
+* Printing final pictures using CUPS server (printing queue indication)
+* Custom texts can be added on the final picture (customizable fonts, colors, alignments)
+* Custom background(s) and overlay(s) can be added on the final picture
+* All settings available in a configuration file (most common options in a graphical interface)
+* Highly customizable thanks to its plugin system, you can develop your own plugin
+
+GDPR advices
+------------
+
+``pibooth`` was developed for a private usage with no connection to a professional or commercial activity,
+as a consequence GDPR does not apply.
+However if you are using photobooth in Europe, it is your responsability to check that your usage and
+more particularly the usage of the pictures generated by ``pibooth`` follows the GDPR rules, especially make
+sure that the people that will use the ``pibooth`` are aware that the image will be stored on the device.
+
+Terms and conditions
+--------------------
+
+.. include:: ../../LICENSE
+
+See `official license <https://opensource.org/licenses/MIT>`_ for further details.
+
+Credits
+-------
+
+Pibooth icon from `Artcore Illustrations <https://www.iconspedia.com/icon/photobooth-icon-29464.html>`_
+
+Icons from the Noun Project (https://thenounproject.com/)
+
+- Polaroid by icon 54
+- Up hand drawn arrow by Kid A
+- Cameraman and Friends Posing For Camera by Gan Khoon Lay
+- Camera by Alfa Design
+- Print Photo by Kmg Design
+- Pointer hand by Peter van Driel
diff -ruN ../pibooth_local_copy/docs/sources/config/config.rst ./docs/sources/config/config.rst
--- ../pibooth_local_copy/docs/sources/config/config.rst	1969-12-31 19:00:00
+++ ./docs/sources/config/config.rst	2025-05-16 14:02:41
@@ -0,0 +1,18 @@
+Default configuration
+---------------------
+
+**Relative paths:**
+
+Relative path (path which doesn't start by a ``/``) can be used. In this
+case, the path is considered starting from the configuration file location.
+
+**List of elements:**
+
+Option with mention ``list of quoted ...`` indicated means that a list of 2 or
+more elements can be provided. A list starts and finishes with parenthesis
+``(...)``. Each element is separated by a comma ``,``.
+
+:download:`pibooth.cfg<default.cfg>`
+
+.. literalinclude:: ./default.cfg
+    :language: ini
diff -ruN ../pibooth_local_copy/docs/sources/config/default.cfg ./docs/sources/config/default.cfg
--- ../pibooth_local_copy/docs/sources/config/default.cfg	1969-12-31 19:00:00
+++ ./docs/sources/config/default.cfg	2025-05-16 14:02:41
@@ -0,0 +1,164 @@
+[GENERAL]
+# User interface language: 'br', 'de', 'dk', 'en', 'es', 'fr', 'hu', 'it', 'nl', 'no', 'pt' or 'se'
+language = en
+
+# Path to save pictures (list of quoted paths accepted)
+directory = ~/Pictures/pibooth
+
+# Start pibooth at Raspberry Pi startup
+autostart = False
+
+# How long to wait in seconds before start pibooth at Raspberry Pi startup
+autostart_delay = 0
+
+# In debug mode, exceptions are not caught, logs are more verbose, pictures are cleared at startup
+debug = False
+
+# Path to custom plugin(s) not installed with pip (list of quoted paths accepted)
+plugins = 
+
+# Plugin names to be disabled after startup (list of quoted names accepted)
+plugins_disabled = 
+
+# Enable a virtual keyboard in the settings interface
+vkeyboard = False
+
+[WINDOW]
+# The (width, height) of the display window or 'fullscreen'
+size = (800, 480)
+
+# Background RGB color or image path
+background = (0, 0, 0)
+
+# Font name or file path used for app texts
+font = Amatic-Bold
+
+# Text RGB color
+text_color = (255, 255, 255)
+
+# Blinking background when a capture is taken
+flash = True
+
+# Animate the last taken picture by displaying captures one by one
+animate = False
+
+# How long is displayed the capture in seconds before switching to the next one
+animate_delay = 0.2
+
+# On 'finish' state: how long is displayed the final picture in seconds (0 if never shown)
+finish_picture_delay = 0
+
+# On 'wait' state: how long is displayed the final picture in seconds before being hidden (-1 if never hidden)
+wait_picture_delay = -1
+
+# How long is displayed the 'chosen' state:  (0 if never shown)
+chosen_delay = 4
+
+# Show arrows to indicate physical buttons: 'bottom', 'top', 'hidden' or 'touchscreen'
+arrows = bottom
+
+# Apply horizontal offset to arrows position
+arrows_x_offset = 0
+
+# How long is the preview in seconds
+preview_delay = 3
+
+# Show a countdown timer during the preview
+preview_countdown = True
+
+# Stop the preview before taking the capture
+preview_stop_on_capture = False
+
+[PICTURE]
+# Orientation of the final picture: 'auto', 'portrait' or 'landscape'
+orientation = auto
+
+# Possible choice(s) of captures numbers (numbers between 1 to 4)
+captures = (4, 1)
+
+# Effect applied to the captures (list of quoted names accepted)
+captures_effects = none
+
+# Crop each capture border in order to fit the paper size
+captures_cropping = False
+
+# Thick (in pixels) between captures and picture borders/texts
+margin_thick = 100
+
+# Main text displayed
+footer_text1 = Footer 1
+
+# Secondary text displayed
+footer_text2 = Footer 2
+
+# RGB colors used for footer texts (list of tuples accepted)
+text_colors = (0, 0, 0)
+
+# Fonts name or file path used for footer texts (list of quoted names accepted)
+text_fonts = ('Amatic-Bold', 'AmaticSC-Regular')
+
+# Alignments used for footer texts: 'left', 'center' or 'right' (list of quoted names accepted)
+text_alignments = center
+
+# Overlay path (PNG file) with same aspect ratio than final picture (list of quoted paths accepted)
+overlays = 
+
+# Background RGB color or image path (list of tuples or quoted paths accepted)
+backgrounds = (255, 255, 255)
+
+[CAMERA]
+# Adjust ISO for lighting issues, can be different for preview and capture (list of integers accepted)
+iso = 100
+
+# Flip horizontally the capture
+flip = False
+
+# Rotation of the camera: 0, 90, 180 or 270, can be different for preview and capture (list of integers accepted)
+rotation = 0
+
+# Resolution for camera captures (preview will have same aspect ratio)
+resolution = (1934, 2464)
+
+# Delete captures from camera internal memory (when applicable)
+delete_internal_memory = False
+
+[PRINTER]
+# Name of the printer defined in CUPS (or use the 'default' one)
+printer_name = default
+
+# Print options passed to the printer, shall be a valid Python dictionary
+printer_options = {}
+
+# How long is the print view in seconds (0 to skip it)
+printer_delay = 10
+
+# Number of pages automatically sent to the printer (or use 'max' to reach max duplicate)
+auto_print = 0
+
+# Maximum number of printed pages before warning on paper/ink levels (-1 = infinite)
+max_pages = -1
+
+# Maximum number of duplicate pages sent to the printer (avoid paper waste)
+max_duplicates = 3
+
+# Print 1, 2, 3 or 4 picture copies per page
+pictures_per_page = 1
+
+[CONTROLS]
+# How long to press a single hardware button in seconds
+debounce_delay = 0.3
+
+# How long to press multiple hardware buttons in seconds
+multi_press_delay = 0.5
+
+# Physical GPIO IN pin to take a picture
+picture_btn_pin = 11
+
+# Physical GPIO OUT pin to light a LED when picture button is pressed
+picture_led_pin = 7
+
+# Physical GPIO IN pin to print a picture
+print_btn_pin = 13
+
+# Physical GPIO OUT pin to light a LED when print button is pressed
+print_led_pin = 15
\ No newline at end of file
diff -ruN ../pibooth_local_copy/docs/sources/dev/install.rst ./docs/sources/dev/install.rst
--- ../pibooth_local_copy/docs/sources/dev/install.rst	1969-12-31 19:00:00
+++ ./docs/sources/dev/install.rst	2025-05-16 14:02:41
@@ -0,0 +1,32 @@
+.. _install_developing_version:
+
+Install developing version
+--------------------------
+
+.. warning:: Be aware that the code on the `master` branch may be unstable.
+
+If you want to use an **unofficial version** of the ``pibooth`` application, you
+need to work from a clone of this ``git`` repository. Replace the step 8. of the
+:ref:`install` procedure by the following actions:
+
+1. Clone from github :
+
+.. code-block:: bash
+
+    git clone https://github.com/pibooth/pibooth.git
+
+2. Go in the cloned directory :
+
+.. code-block:: bash
+
+    cd pibooth
+
+3. Install ``pibooth`` in editable mode :
+
+.. code-block:: bash
+
+    sudo pip3 install -e .[dslr,printer]
+
+4. Start the application exactly in the same way as installed from pypi. All
+   modifications performed in the cloned repository are taken into account when
+   the application starts.
diff -ruN ../pibooth_local_copy/docs/sources/dev/release.rst ./docs/sources/dev/release.rst
--- ../pibooth_local_copy/docs/sources/dev/release.rst	1969-12-31 19:00:00
+++ ./docs/sources/dev/release.rst	2025-05-16 14:02:41
@@ -0,0 +1,41 @@
+Release for Pypi
+----------------
+
+1. Install packaging libraries:
+
+   ::
+
+        $ sudo pip install setuptools wheel twine
+
+2. Update the version number in the ``pibooth/__init__.py`` file.
+
+3. Check the rendering of the README by generating the HTML page:
+
+   ::
+
+        $ python setup.py --long-description | rst2html.py > output.html
+
+4. Clean previous packages (avoid upload of older package):
+
+   ::
+
+        $ rm -rf build/ dist/
+
+5. Generate the package:
+
+   ::
+
+        $ python setup.py bdist_wheel
+
+6. Check the package integrity:
+
+   ::
+
+        $ twine check dist/*
+
+7. Upload the package on Pypi (replace XXXXXX by username and password of your
+   Pypi account):
+
+   ::
+
+        $ twine upload -u XXXXXX -p XXXXXX dist/*
diff -ruN ../pibooth_local_copy/docs/sources/dev/rules.rst ./docs/sources/dev/rules.rst
--- ../pibooth_local_copy/docs/sources/dev/rules.rst	1969-12-31 19:00:00
+++ ./docs/sources/dev/rules.rst	2025-05-16 14:02:41
@@ -0,0 +1,26 @@
+Coding rules
+------------
+
+Here is a small user guide and rules applied to develop ``pibooth``. They
+will be updated as we go along.
+
+1. **Conventions**
+
+The ``PEP8`` naming rules are applied.
+
+2. **Capture / Picture / Image**
+
+In the code and the configuration file:
+
+- ``capture`` is used for variables related to a raw image from the camera.
+- ``picture`` is used for variables related to the final image which is
+  a concatenation of capture(s) and text(s).
+- ``image`` shall be used for pictograms displayed in Pygame view or
+  intermediate PIL/OpenCv objects.
+
+3. **Configuration options naming**
+
+Option relative to a specific state shall have an name starting with the
+state name.
+
+Option relative to a timeout shall have an name ending with ``_delay```.
diff -ruN ../pibooth_local_copy/docs/sources/examples.rst ./docs/sources/examples.rst
--- ../pibooth_local_copy/docs/sources/examples.rst	1969-12-31 19:00:00
+++ ./docs/sources/examples.rst	2025-05-16 14:02:41
@@ -0,0 +1,72 @@
+.. _gallery_examples:
+
+Output pictures examples
+------------------------
+
+Here some examples of pictures generated with ``pibooth``.
+Note that images size have been reduced for display purpose.
+
+
+------
+
+**Made with default config**
+
+.. figure :: ../images/examples/pibooth_default.jpg
+   :align: center
+   :alt: Default config
+
+------
+
+**With a custom background and text color**
+
+.. figure :: ../images/examples/pibooth_background.jpg
+   :align: center
+   :alt: With a background
+
+------
+
+**With a custom font and text alignment**
+
+.. figure :: ../images/examples/pibooth_font.jpg
+   :align: center
+   :alt: With another font and alignment
+
+------
+
+**With a custom overlay**
+
+.. figure :: ../images/examples/pibooth_overlay.jpg
+   :align: center
+   :alt: With an overlay
+
+------
+
+**Without any text**
+
+.. figure :: ../images/examples/pibooth_without_text.jpg
+   :align: center
+   :alt: Without any text
+
+------
+
+**With only one photo**
+
+.. figure :: ../images/examples/pibooth_one_photo.jpg
+   :align: center
+   :alt: Without one photo
+
+------
+
+**Landscape**
+
+.. figure :: ../images/examples/pibooth_landscape.jpg
+   :align: center
+   :alt: Landscape
+
+------
+
+**Landscape without text**
+
+.. figure :: ../images/examples/pibooth_landscape_without_text.jpg
+   :align: center
+   :alt: Landscape without text
diff -ruN ../pibooth_local_copy/docs/sources/install.rst ./docs/sources/install.rst
--- ../pibooth_local_copy/docs/sources/install.rst	1969-12-31 19:00:00
+++ ./docs/sources/install.rst	2025-05-16 14:02:41
@@ -0,0 +1,141 @@
+Requirements
+------------
+
+The requirements listed below are the ones used for the development of ``pibooth``,
+but other configuration may work fine. **All hardware buttons, lights and printer
+are optional**, the application can be entirely controlled using a keyboard, a
+mouse or a touchscreen.
+
+.. warning:: Using a Pi Camera, the preview is visible only on a screen connected
+             to the HDMI or DSI connectors (the preview is an overlay managed at
+             GPU low level). It also means that ``pibooth`` can not be started
+             throught SSH tuneling. Even with X11 forwarding enabled (``ssh -X ...``)
+             the preview will not be visible.
+
+Hardware
+^^^^^^^^
+
+* 1 Raspberry Pi 3 Model B (or higher)
+* 1 Camera (Raspberry Pi Camera v2.1 8 MP 1080p
+  or any DSLR camera `compatible with gPhoto2 <http://www.gphoto.org/proj/libgphoto2/support.php>`_
+  or any webcam `compatible with OpenCV <https://opencv.org>`_ )
+* 2 push buttons
+* 2 LEDs
+* 2 resistors of 100 Ohm
+* 1 printer
+
+Software
+^^^^^^^^
+
+* Raspberry Pi OS **Buster** (32 bit) with desktop (`could be downloaded here <https://downloads.raspberrypi.org/raspios_oldstable_armhf/images/>`_)
+* Python ``3.7.3``
+* libsdl2 ``2.0``
+* libgphoto2 ``2.5.27``
+* libcups ``2.2.10``
+
+
+Install
+-------
+
+Here is a brief description on how to set-up a Raspberry Pi to use this software.
+
+If you intend to develop on ``pibooth``, an editable/customizable version can be
+installed. Instead of doing step 8. of the below procedure, follow
+:ref:`instructions here<install_developing_version>`.
+
+Manual procedure
+^^^^^^^^^^^^^^^^
+
+1. Download the Raspbian image and set-up an SD-card. You can follow
+   `these instructions <https://www.raspberrypi.org/documentation/installation/installing-images/README.md>`_.
+
+2. Insert the SD-card into the Raspberry Pi and fire it up. Use the
+   ``raspi-config`` tool to configure your system (e.g., expand partition,
+   change hostname, password, enable SSH, configure to boot into GUI, etc.).
+
+   .. hint:: Don't forget to enable the camera in raspi-config.
+
+3. Upgrade all installed software:
+
+   .. code-block:: bash
+
+        sudo apt-get update
+        sudo apt-get full-upgrade
+
+4. Install SDL2 (and extras) which is required by ``pygame 2+``:
+
+   .. code-block:: bash
+
+        sudo apt-get install libsdl2-*
+
+5. Optionally install the last stable ``gPhoto2`` version (required only for
+   DSLR camera):
+
+   .. code-block:: bash
+
+        wget https://raw.githubusercontent.com/gonzalo/gphoto2-updater/master/gphoto2-updater.sh
+        wget https://raw.githubusercontent.com/gonzalo/gphoto2-updater/master/.env
+        chmod +x gphoto2-updater.sh
+        sudo ./gphoto2-updater.sh
+
+6. Optionally install ``CUPS`` to handle printers (more instructions to add a
+   new printer can be found `here <https://www.howtogeek.com/169679/how-to-add-a-printer-to-your-raspberry-pi-or-other-linux-computer>`_
+   ):
+
+   .. code-block:: bash
+
+        sudo apt-get install cups libcups2-dev
+
+7. Optionally install ``OpenCV`` to improve images generation efficiency or if a
+   Webcam is used:
+
+   .. code-block:: bash
+
+        sudo apt-get install python3-opencv
+
+8. Install ``pibooth`` from the `pypi repository <https://pypi.org/project/pibooth/>`_:
+
+   .. code-block:: bash
+
+        sudo pip3 install pibooth[dslr,printer]
+
+   .. hint:: If you don't have ``gPhoto2`` and/or ``CUPS`` installed (steps 5. and/
+          or 6. skipped), remove **printer** and/or **dslr** under the ``[]``.
+
+          As a consequence if you only want to use gphoto2 (step 6 skipped):
+
+          ``sudo pip3 install pibooth[dslr]`` 
+          
+          Or if you only want to use the printer (step 5 skipped):
+
+          ``sudo pip3 install pibooth[printer]``
+
+          The classic command ``sudo pip3 install pibooth`` will install ``pibooth`` without these two dependencies (step 5 and 6 skipped).
+
+Automated procedure
+^^^^^^^^^^^^^^^^^^^
+
+Alternatively, you can use Ansible to install pibooth automatically.
+`A playbook can be found here <https://github.com/TiJof/pibooth_ansible>`_
+(thank you **TiJof**).
+
+
+Circuit diagram
+---------------
+
+Here is the diagram for hardware connections. Please refer to the
+:ref:`default configuration file<Default configuration>`.
+to know the default pins used (`physical pin numbering <https://pinout.xyz>`_).
+
+.. image:: ../images/sketch.png
+   :align: center
+   :alt: Electronic sketch
+
+An extra button can be added to start and shutdown properly the Raspberry Pi.
+Edit the file ``/boot/config.txt`` and set the line:
+
+.. code-block:: bash
+
+    dtoverlay=gpio-shutdown
+
+Then connect a push button between physical *pin 5* and *pin 6*.
diff -ruN ../pibooth_local_copy/docs/sources/plugins/examples.rst ./docs/sources/plugins/examples.rst
--- ../pibooth_local_copy/docs/sources/plugins/examples.rst	1969-12-31 19:00:00
+++ ./docs/sources/plugins/examples.rst	2025-05-16 14:02:41
@@ -0,0 +1,51 @@
+
+Examples Codes
+--------------
+
+Hello from plugin
+^^^^^^^^^^^^^^^^^
+
+:download:`pibooth_hello.py<pibooth_hello.py>`
+
+.. literalinclude:: pibooth_hello.py
+    :language: python
+
+Upload to FTP
+^^^^^^^^^^^^^
+
+:download:`pibooth_ftp.py<pibooth_ftp.py>`
+
+.. literalinclude:: pibooth_ftp.py
+    :language: python
+
+Control a RGB LED
+^^^^^^^^^^^^^^^^^
+
+:download:`pibooth_rgb_led.py<pibooth_rgb_led.py>`
+
+.. literalinclude:: pibooth_rgb_led.py
+    :language: python
+
+Add 'Get Ready' text before captures sequence
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+:download:`pibooth_getready_text.py<pibooth_getready_text.py>`
+
+.. literalinclude:: pibooth_getready_text.py
+    :language: python
+
+Setup a custom camera
+^^^^^^^^^^^^^^^^^^^^^
+
+:download:`pibooth_custom_camera.py<pibooth_custom_camera.py>`
+
+.. literalinclude:: pibooth_custom_camera.py
+    :language: python
+
+Setup a custom picture factory
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+:download:`pibooth_custom_factory.py<pibooth_custom_factory.py>`
+
+.. literalinclude:: pibooth_custom_factory.py
+    :language: python
diff -ruN ../pibooth_local_copy/docs/sources/plugins/hooks.rst ./docs/sources/plugins/hooks.rst
--- ../pibooth_local_copy/docs/sources/plugins/hooks.rst	1969-12-31 19:00:00
+++ ./docs/sources/plugins/hooks.rst	2025-05-16 14:02:41
@@ -0,0 +1,22 @@
+.. _hooks:
+
+Hooks specification
+-------------------
+
+The ``pibooth`` application provide a decorator to implement specific hooks.
+Each hook have to be decorated has follow:
+
+.. code-block:: python
+
+    import pibooth
+
+    @pibooth.hookimpl
+    def pibooth_configure(cfg):
+        ...
+
+.. note:: Hooks specification defines all arguments that can be used by the hook
+          implementation. But there is no need to put in the hook signature
+          the arguments that are not used in the code.
+
+.. automodule:: pibooth.plugins.hookspecs
+   :members:
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_custom_camera.py ./docs/sources/plugins/pibooth_custom_camera.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_custom_camera.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_custom_camera.py	2025-05-16 14:02:41
@@ -0,0 +1,48 @@
+"""Plugin to handle retry in case of exception with DSLR/gPhoto2 camera."""
+
+import time
+import pibooth
+from pibooth.utils import LOGGER
+from pibooth import camera
+
+__version__ = "4.0.2"
+
+
+class GpCameraRetry(camera.GpCamera):
+
+    def capture(self, effect=None):
+        """Capture a new picture.
+        """
+        retry = 0
+        max_retry = 2
+        while retry < max_retry:
+            try:
+                return super(GpCameraRetry, self).capture(effect)
+            except Exception:
+                LOGGER.warning("Gphoto2 fails to capture, trying again...")
+            retry += 1
+        raise EnvironmentError("Gphoto2 fails to capture {} times".format(max_retry))
+
+
+class HybridRpiCameraRetry(camera.HybridRpiCamera):
+
+    def __init__(self, rpi_camera_proxy, gp_camera_proxy):
+        super(HybridRpiCamera, self).__init__(rpi_camera_proxy)
+        self._gp_cam = GpCameraRetry(gp_camera_proxy)
+        self._gp_cam._captures = self._captures  # Same dict for both cameras
+
+
+@pibooth.hookimpl
+def pibooth_setup_camera(cfg):
+    rpi_cam_proxy = camera.get_rpi_camera_proxy()
+    gp_cam_proxy = camera.get_gp_camera_proxy()
+
+    if rpi_cam_proxy and gp_cam_proxy:
+        LOGGER.info("Configuring hybrid camera with retry (Picamera + gPhoto2) ...")
+        return HybridRpiCameraRetry(rpi_cam_proxy, gp_cam_proxy)
+    elif gp_cam_proxy:
+        LOGGER.info("Configuring gPhoto2 camera with retry ...")
+        return GpCameraRetry(gp_cam_proxy)
+    elif rpi_cam_proxy:
+        LOGGER.info("Configuring Picamera camera ...")
+        return camera.RpiCamera(rpi_cam_proxy)
\ No newline at end of file
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_custom_factory.py ./docs/sources/plugins/pibooth_custom_factory.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_custom_factory.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_custom_factory.py	2025-05-16 14:02:41
@@ -0,0 +1,18 @@
+"""Pibooth plugin which return the first raw capture as final picture."""
+
+import pibooth
+from pibooth.pictures.factory import PictureFactory
+
+
+__version__ = "1.0.0"
+
+
+class IdlePictureFactory(PictureFactory):
+
+    def build(self, rebuild=False):
+        return self._images[0]
+
+
+@pibooth.hookimpl
+def pibooth_setup_picture_factory(factory):
+    return IdlePictureFactory(factory.width, factory.height, *factory._images)
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_ftp.py ./docs/sources/plugins/pibooth_ftp.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_ftp.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_ftp.py	2025-05-16 14:02:41
@@ -0,0 +1,25 @@
+"""Plugin to upload pictures on a FTP server."""
+
+import os
+from ftplib import FTP
+import pibooth
+
+__version__ = "0.0.2"
+
+@pibooth.hookimpl
+def pibooth_startup(app):
+    app.ftp = FTP()
+    app.ftp.set_debuglevel(0)
+    app.ftp.connect("ftp.pibooth.org", 21)
+    app.ftp.login("pibooth", "1h!gR4/opK")
+
+@pibooth.hookimpl
+def state_processing_exit(app):
+    name = os.path.basename(app.previous_picture_file)
+
+    with open(app.previous_picture_file, 'rb') as fp:
+        app.ftp.storbinary('STOR {}'.format(name), fp, 1024)
+
+@pibooth.hookimpl
+def pibooth_cleanup(app):
+    app.ftp.close()
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_getready_text.py ./docs/sources/plugins/pibooth_getready_text.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_getready_text.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_getready_text.py	2025-05-16 14:02:41
@@ -0,0 +1,38 @@
+"""Plugin to display 'Get Ready' at screen after 'wait' state."""
+
+import time
+import pygame
+import pibooth
+from pibooth import pictures, fonts
+
+__version__ = "0.0.2"
+
+
+@pibooth.hookimpl
+def state_wait_exit(win):
+    win_rect = win.get_rect()
+    text = "Get Ready!"
+
+    # Get best font size according to window size
+    font = fonts.get_pygame_font(text, fonts.CURRENT,
+                                 win_rect.width//1.5, win_rect.height//1.5)
+
+    # Build a surface to display at screen
+    text_surface = font.render(text, True, win.text_color)
+
+    # Clear screen
+    if isinstance(win.bg_color, (tuple, list)):
+        win.surface.fill(win.bg_color)
+    else:
+        bg_surface = pictures.get_pygame_image(win.bg_color, win_rect.size, crop=True, color=None)
+        win.surface.blit(bg_surface, (0, 0))
+
+    # Draw the surface at screen
+    win.surface.blit(text_surface, text_surface.get_rect(center=win_rect.center).topleft)
+
+    # Force screen update and events process
+    pygame.display.update()
+    pygame.event.pump()
+
+    # Wait 1s
+    time.sleep(1)
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_hello.py ./docs/sources/plugins/pibooth_hello.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_hello.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_hello.py	2025-05-16 14:02:41
@@ -0,0 +1,10 @@
+"""Plugin to log a message when entering in the 'wait' state."""
+
+import pibooth
+from pibooth.utils import LOGGER
+
+__version__ = "1.0.0"
+
+@pibooth.hookimpl
+def state_wait_enter():
+    LOGGER.info("Hello from '%s' plugin", __name__)
diff -ruN ../pibooth_local_copy/docs/sources/plugins/pibooth_rgb_led.py ./docs/sources/plugins/pibooth_rgb_led.py
--- ../pibooth_local_copy/docs/sources/plugins/pibooth_rgb_led.py	1969-12-31 19:00:00
+++ ./docs/sources/plugins/pibooth_rgb_led.py	2025-05-16 14:02:41
@@ -0,0 +1,30 @@
+"""Plugin to manage the RGB lights via GPIO."""
+
+import pibooth
+from gpiozero import RGBLED
+from colorzero import Color
+
+__version__ = "1.1.0"
+
+@pibooth.hookimpl
+def pibooth_startup(app):
+    # GPIOZERO is configured as BCM, use string with "BOARD(pin)" to
+    # convert on BOARD
+    app.rgbled = RGBLED("BOARD36", "BOARD38", "BOARD40")
+
+@pibooth.hookimpl
+def state_wait_enter(app):
+    app.rgbled.color = Color('green')
+
+@pibooth.hookimpl
+def state_choose_enter(app):
+    app.rgbled.blink()
+
+@pibooth.hookimpl
+def state_preview_enter(app):
+    app.rgbled.color = Color('white')
+    app.rgbled.blink()
+
+@pibooth.hookimpl
+def state_capture_exit(app):
+    app.rgbled.color = Color('red')
diff -ruN ../pibooth_local_copy/docs/sources/plugins/plugins.rst ./docs/sources/plugins/plugins.rst
--- ../pibooth_local_copy/docs/sources/plugins/plugins.rst	1969-12-31 19:00:00
+++ ./docs/sources/plugins/plugins.rst	2025-05-16 14:02:41
@@ -0,0 +1,124 @@
+.. _extend_pibooth_functionalities:
+
+Customize using plugins
+-----------------------
+
+The ``pibooth`` application is built on the top of
+`pluggy <https://pluggy.readthedocs.io/en/latest/index.html>`_
+that gives users the ability to extend or modify its behavior thanks to plugins.
+
+Several plugins maintained by the community are available. They add extra features to
+``pibooth``. Have a look to the `plugins on PyPI  <https://pypi.org/search/?q=pibooth>`_.
+
+You can also easily develop your own plugin, and declare it in the ``[GENERAL][plugins]``
+key of the configuration.
+
+What is a plugin?
+-----------------
+
+A plugin is a set of functions (called ``hooks``) defined in a python module
+and participating to the ``pibooth`` execution when they are invoked.
+
+The list of available ``hooks`` are defined :ref:`on this chapter<hooks>`. A plugin
+implements a subset of those functions.
+
+There are 2 families of hooks implemented in `pibooth`:
+
+ - Pibooth state-independent hooks
+ - State dependant hooks (see below)
+
+Influencing states
+^^^^^^^^^^^^^^^^^^
+
+The ``pibooth`` application is built on the principle of states. Each state
+is defined by a specific screen and possible actions available to the user.
+
+The following states are defined:
+
+ - ``wait``       : wait for starting a new capture sequence
+ - ``choose``     : selection of the number of captures
+ - ``chosen``     : confirm the number of captures
+ - ``preview``    : show preview and countdown
+ - ``capture``    : take a capture
+ - ``processing`` : build the final picture
+ - ``print``      : show preview and ask for printing
+ - ``finish``     : thank before going back to wait state
+ - ``failsafe``   : oops message when an exception occurs
+
+.. _state_sequence_details:
+
+.. image:: ../../images/state_sequence_details.png
+    :align: center
+    :alt: State sequence
+
+There are four hooks defined for each state.
+
+ - ``state_<name>_enter``
+
+   Invoked one time when the state is activating.
+
+ - ``state_<name>_do``
+
+   Invoked in a loop until the state is switching to an other one.
+
+ - ``state_<name>_validate``
+
+   Invoked in a loop, returns the name of the next state if all conditions
+   are met (else return ``None``).
+
+ - ``state_<name>_exit``
+
+   Invoked one time when the state is exiting.
+
+Code skeleton
+^^^^^^^^^^^^^
+
+A plugin is generally a Python module called ``pibooth_[...].py``. For a better
+configuration management, it should have the constant ``__version__`` set to the
+plugin version:
+
+.. code-block:: python
+
+    __version__ = "1.0.0"
+
+The ``pibooth_configure`` hook permits to define some new configuration options.
+At this step of the starting process, only the pre-loaded configuration is
+available (application is not created yet).
+
+.. code-block:: python
+
+    @pibooth.hookimpl
+    def pibooth_configure(cfg):
+        cfg.add_option('CONTROLS', 'startup_led_pin', 29,
+                       "Physical GPIO OUT pin to light a LED at pibooth startup")
+
+The new objects, which should persist between states, can be created and attached
+to the application instance in the ``pibooth_startup`` hook:
+
+.. code-block:: python
+
+    @pibooth.hookimpl
+    def pibooth_startup(cfg, app):
+        app.led_startup = LED("BOARD" + cfg.get('CONTROLS', 'startup_led_pin'))
+
+Access to internal variables
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+cfg
+~~~
+
+.. autoclass:: pibooth.config.parser.PiConfigParser
+   :members: set, get, getint, getfloat, getboolean, gettyped, getpath, gettuple, add_option, join_path
+   :undoc-members:
+
+app
+~~~
+
+.. autoclass:: pibooth.booth.PiApplication
+   :members:
+
+win
+~~~
+
+.. autoclass:: pibooth.view.window.PiWindow
+   :members:
diff -ruN ../pibooth_local_copy/docs/sources/scripts.rst ./docs/sources/scripts.rst
--- ../pibooth_local_copy/docs/sources/scripts.rst	1969-12-31 19:00:00
+++ ./docs/sources/scripts.rst	2025-05-16 14:02:41
@@ -0,0 +1,135 @@
+.. _scripts:
+
+List available fonts
+--------------------
+
+The available fonts can be listed using the following the command:
+
+.. code-block:: bash
+
+    pibooth-fonts
+
+*Output example*::
+
+    INFO:pibooth:Listing all fonts available...
+    acaslonprobold            gurmukhi                    prestigeelitestdbd
+    acaslonprobolditalic      gurmukhimn                  ptmono
+    acaslonproitalic          gurmukhisangammn            ptsans
+    acaslonproregular         hellohoney                  ptserif
+    acaslonprosemibold        helvetica                   ptserifcaption
+    ...
+
+Regenerate pictures
+-------------------
+
+To regenerate the final pictures afterwards, from the originals captures present in the
+``raw`` folder, use the command:
+
+.. code-block:: bash
+
+    pibooth-regen
+
+It permits to adjust the configuration to enhance the previous pictures with better
+parameters (title, more effects, etc...)
+
+Like with the ``pibooth`` application a configuration directory can be chosen.
+
+.. code-block:: bash
+
+    pibooth-regen myconfig1/
+
+Manage counters
+---------------
+
+Several counters are registered during ``pibooth`` usage to keep in track the
+number of:
+
+- **taken** pictures since last reset
+- **printed** pictures since last reset
+- **forgotten** pictures since last reset
+- remaining duplicate for the currently displayed picture
+
+Pictures counters can be displayed using the command:
+
+.. code-block:: bash
+
+    pibooth-count
+
+*Output example*::
+
+    Listing current counters:
+
+     -> Taken.................... :  126
+     -> Printed.................. :   17
+     -> Forgotten................ :    2
+     -> Remaining_duplicates..... :    3
+
+The output can be formatted in **json** using the ``--json`` option:
+
+.. code-block:: bash
+
+    pibooth-count --json
+
+*Output example*::
+
+    {"taken": 126, "printed": 17, "forgotten": 2, "remaining_duplicates": 3}
+
+The counters can be updated/rest using the ``--update`` option:
+
+.. code-block:: bash
+
+    pibooth-count --update
+
+Errors diagnosis
+----------------
+
+Use the following command to generate a debug report on your Raspberry-Pi, then
+paste it in a GitHb issue to gives details about your ``pibooth`` environment:
+
+.. code-block:: bash
+
+    pibooth-diag
+
+List printer options
+--------------------
+
+Use the following command to list all options as defined in the
+`PPD <https://www.cups.org/doc/spec-ppd.html>`_ file of the printer defined
+in the configuration:
+
+.. code-block:: bash
+
+    pibooth-printcfg
+
+*Output example*::
+
+    INFO:pibooth:Connected to printer 'EPSON_XP_6100_Series'
+    EPIJ_PSrc = 2
+         Description: Page Setup
+         Choices:     2 = Standard
+                      3 = Borderless
+                      25 = CD/DVD
+
+    EPIJ_Size = 1
+         Description: Paper Size
+         Choices:     1 = A4
+                      74 = 10 x 15 cm (4 x 6 in)
+                      76 = 13 x 18 cm (5 x 7 in)
+                      6 = A6
+                      23 = A5
+    ...
+
+The current values can be formatted in **json** using the ``--json`` option, the
+generated output can be pasted (after update of the wanted values) in the 
+``[PRINTER][printer_options]`` option:
+
+.. code-block:: bash
+
+    pibooth-printcfg --json
+
+*Output example*::
+
+    {"EPIJ_PSrc": "2", "EPIJ_Size": "1", "EPIJ_FdSo": "11", "EPIJ_Medi": "0", "EPIJ_Ink_": "1",
+    "EPIJ_DSPT": "0", "EPIJ_OpAv": "0", "EPIJProfileSpec": "0", "ColorModel": "RGB",
+    "MediaType": "0", "Resolution": "360x360dpi", "PageSize": "A4", "PageRegion": "A4",
+    "EPIJ_PGEx": "0", "EPIJ_BSSv": "0", "EPIJ_Silt": "0", "EPIJ_BkPr": "1", "EPIJ_AuCS": "1"}
diff -ruN ../pibooth_local_copy/docs/sources/start.rst ./docs/sources/start.rst
--- ../pibooth_local_copy/docs/sources/start.rst	1969-12-31 19:00:00
+++ ./docs/sources/start.rst	2025-05-16 14:02:41
@@ -0,0 +1,260 @@
+Run ``pibooth``
+---------------
+
+Start the ``pibooth`` application using the command:
+
+.. code-block:: bash
+
+    pibooth
+
+All pictures taken are stored in the folder defined in ``[GENERAL][directory]``.
+They are named **YYYY-mm-dd-hh-mm-ss_pibooth.jpg** which is the time when first
+capture of the sequence was taken. A subfolder **raw/YYYY-mm-dd-hh-mm-ss** is
+created to store the single raw captures.
+
+.. note:: if you have both ``Pi`` and ``DSLR`` cameras connected to the Raspberry
+          Pi, **both are used**, this is called the **Hybrid** mode. The preview
+          is taken using the ``Pi`` one for a better video rendering and the
+          capture is taken using the ``DSLR`` one for better picture rendering.
+
+You can display a basic help on application options by using the command:
+
+.. code-block:: bash
+
+    pibooth --help
+
+States and lights management
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+The application follows the states sequence defined in the simplified diagram
+below:
+
+.. image:: ../images/state_sequence.png
+   :align: center
+   :alt: State sequence
+
+The states of the **LED 1** and **LED 2** are modified depending on the actions
+available for the user.
+
+Detailed state diagram can be found :ref:`on this page section<state_sequence_details>`.
+
+Controls
+^^^^^^^^
+
+After the graphical interface is started, the following actions are available:
+
+======================= ================ ===================== =====================
+Action                  Keyboard key     Physical button       Touch event
+======================= ================ ===================== =====================
+Toggle Full screen      Ctrl + F         \-                    \-
+Choose layout           LEFT or RIGHT    Button 1 or Button 2  Tap 1 finger
+Take pictures           P                Button 1              Tap 1 finger
+Export Printer/Cloud    Ctrl + E         Button 2              Tap 1 finger
+Open/close settings     ESC              Button 1 + Button 2   Tap 4 finger
+Select option           UP or DOWN       Button 1              Tap 1 finger
+Change option value     LEFT or RIGHT    Button 2              Tap 1 finger
+======================= ================ ===================== =====================
+
+Configure
+---------
+
+At the first run, a configuration file is generated in ``~/.config/pibooth/pibooth.cfg``
+by default. This file permits to configure the behavior of the application.
+
+A quick configuration GUI menu (see `Controls`_ ) gives access to the most common options:
+
+.. image:: ../images/settings.png
+   :align: center
+   :alt: Settings
+
+More options are available by editing the configuration file which is easily
+done using the command:
+
+.. code-block:: bash
+
+    pibooth --config
+
+The default configuration can be restored with the command (strongly recommended when
+upgrading ``pibooth``):
+
+.. code-block:: bash
+
+    pibooth --reset
+
+The configuration directory can be chosen at startup. This feature gives the possibility
+to keep several configurations on the same Raspberry Pi and quickly switch from one
+configuration to another. The following command will start ``pibooth`` using configuration
+files from ``myconfig1/`` directory:
+
+.. code-block:: bash
+
+    pibooth myconfig1/
+
+:ref:`See the default configuration file for further details<Default configuration>`.
+
+Final picture resolution
+^^^^^^^^^^^^^^^^^^^^^^^^
+
+The ``pibooth`` application handle the rendering of the final picture using 2
+variables defined in the configuration (see :ref:`Configure` below):
+
+* ``[CAMERA][resolution] = (width, height)`` is the resolution of the captured
+  picture in pixels. As explained in the configuration file, the preview size is
+  directly dependent from this parameter.
+* ``[PICTURE][orientation] = auto/landscape/portrait`` is the orientation of the
+  final picture (after concatenation of all captures). If the value is **auto**,
+  the orientation is automatically chosen depending on the resolution.
+
+.. note:: The resolution is an important parameter, it is responsible for the quality of the final
+          picture. For ``Raspberry Pi`` camera, see the list of
+          `picamera possible resolutions <http://picamera.readthedocs.io/en/latest/fov.html#sensor-modes>`_ .
+
+          For ``gphoto2`` camera, the possible resolutions can be listed by executeing
+          the following command (adapt device path as needed)::
+
+            v4l2-ctl --list-formats-ext -d /dev/video0
+
+Captures effects
+^^^^^^^^^^^^^^^^
+
+Image effects can be applied on the capture using the ``[PICTURE][effect]`` variable defined in the
+configuration.
+
+.. code-block:: ini
+
+    [PICTURE]
+
+    # Effect applied on all captures
+    captures_effects = film
+
+Instead of one effect name, a list of names can be provided. In this case, the effects are applied
+sequentially on the captures sequence.
+
+.. code-block:: ini
+
+    [PICTURE]
+
+    # Define a rolling sequence of effects. For each capture the corresponding effect is applied.
+    captures_effects = ('film', 'cartoon', 'washedout', 'film')
+
+Have a look to the predefined effects available depending on the camera used:
+
+* `picamera effects <https://picamera.readthedocs.io/en/latest/api_camera.html#picamera.PiCamera.image_effect>`_
+* `gPhoto2 effects (PIL based) <https://pillow.readthedocs.io/en/latest/reference/ImageFilter.html>`_
+
+Texts and fonts
+^^^^^^^^^^^^^^^
+
+Texts can be defined by setting the option ``[PICTURE][footer_text1]`` and ``[PICTURE][footer_text2]``
+(lets them empty to hide any text). Some text can be inserted dynamically using some state variables.
+Available variables to forge the footer texts are:
+
+ - **date** : `datetime <https://docs.python.org/3/library/datetime.html#datetime-objects>`_ of the first capture of the current sequence
+ - **count** : current counters (see counters in configuration menu)
+
+For instance, insert the date in the footer text:
+
+.. code-block:: ini
+
+    [PICTURE]
+
+    footer_text1 = The full date is {date}
+
+    footer_text2 = A custom date is {date.year}-{date.month}-{date.day}
+
+For each text, the font, the color and the alignment can be chosen. For instance, to change the font:
+
+.. code-block:: ini
+
+    [PICTURE]
+
+    # Same font applied on footer_text1 and footer_text2
+    text_fonts = Amatic-Bold
+
+Different fonts can be defined for each text. It is achieved by setting two names (or TTF file paths)
+in the ``[PICTURE][text_fonts]`` option:
+
+.. code-block:: ini
+
+    [PICTURE]
+
+    # 'arial' font applied on footer_text1, 'Roboto-BoldItalic' font on footer_text2
+    text_fonts = ('arial', 'Roboto-BoldItalic')
+
+Here is the list of the fonts installed with ``pibooth``:
+
+- Amatic-Bold
+- AmaticSC-Regular
+- DancingScript-Bold
+- DancingScript-Regular
+- Monoid-Bold
+- Monoid-Regular
+- Monoid-Retina
+- Roboto-BoldItalic
+- Roboto-LightItalic
+
+Use the script :ref:`pibooth-fonts<scripts>` to list all available system fonts.
+
+GUI translations
+^^^^^^^^^^^^^^^^
+
+The graphical interface texts are available in 9 languages by default: Danish, Dutch, English,
+French, German, Hungarian, Italian, Norwegian, Spanish and Swedish. The default translations can be easily edited using the command:
+
+.. code-block:: bash
+
+    pibooth --translate
+
+A new language can be added by adding a new section (``[alpha-2-code]``).
+If you want to have ``pibooth`` in your language feel free to send us the corresponding keywords via a GitHub issue.
+
+Printer
+^^^^^^^
+
+The print button (see `Controls`_) and print states are automatically activated/shown if:
+
+* `pycups <https://pypi.python.org/pypi/pycups>`_ and `pycups-notify <https://github.com/anxuae/pycups-notify>`_ are installed
+* at least one printer is configured in `CUPS <http://localhost:631/printers>`_
+* the key ``[PRINTER][printer_name]`` is equal to ``default`` or an existing printer name
+
+To avoid paper waste, set the option ``[PRINTER][max_duplicates]`` to the maximum
+of identical pictures that can be sent to the printer.
+
+Set the option ``[PRINTER][max_pages]`` to the number of paper sheets available on the
+printer. When this number is reached, the print function will be disabled and an icon
+indicates the printer failure. To reset the counter, open then close the settings
+graphical interface (see `Controls`_).
+
+Here is the default configuration used for this project in CUPS, it may depend on
+the printer used:
+
+================ =============================
+Options          Value
+================ =============================
+Media Size       10cm x 15cm
+Color Model      CMYK
+Media Type       Glossy Photo Paper
+Resolution       Automatic
+2-Sided Printing Off
+Shrink page ...  Shrink (print the whole page)
+================ =============================
+
+
+Plugins
+^^^^^^^
+
+Plugins installed via pip are enabled automatically at startup but two options are available in the config to handle specific cases.
+
+.. code-block:: ini
+
+    # Path to custom plugin(s) not installed with pip (list of quoted paths accepted)
+    plugins = 
+
+    # Plugin names to be disabled after startup (list of quoted names accepted)
+    plugins_disabled = 
+
+The first option allows to add a plugin which is not a pip package (could be useful for development). In this case, put the path to the plugin Python file.
+
+The second option allows to disable a plugin without needing to uninstall it. The plugin name to be used is the Python module name (e.g. ``pibooth_qrcode`` for ``pibooth-qrcode`` plugin)
+
+.. note:: Even if the plugin is disabled it will be listed in the ``Installed plugin`` section in the logs
diff -ruN ../pibooth_local_copy/docs/sources/tutorials/dslr_tips.rst ./docs/sources/tutorials/dslr_tips.rst
--- ../pibooth_local_copy/docs/sources/tutorials/dslr_tips.rst	1969-12-31 19:00:00
+++ ./docs/sources/tutorials/dslr_tips.rst	2025-05-16 14:02:41
@@ -0,0 +1,31 @@
+DSLR first configuration
+^^^^^^^^^^^^^^^^^^^^^^^^
+
+- Disable "auto-sleep" or "auto-off" to prevent errors while running pibooth.
+- Disable Wifi feature to solve gphoto2 troubles to detect hardware.
+- Disable the autofocus to avoid gphoto2 troubles to take a picture.
+- Put a SD card on the camera (the captures will be kept also on the camera side)
+
+DSLR settings
+^^^^^^^^^^^^^
+
+Most common settings for DSLR::
+
+    Shutter speed: 1/60
+    Focal Opening: F10
+    ISO: 3200
+
+    Shutter speed: 1/125
+    Focal Opening: F8
+    ISO: 3200
+
+Credits goes to https://fotomax.fr/canon-camera-settings-with-a-magic-mirror-photobooth/, alternative settings are also available, mainly depending on natural light conditions.
+
+DSLR Troubleshooting
+^^^^^^^^^^^^^^^^^^^^
+
+If the DLSR don't manage to take the photo Pibooth will show the "Oops something went wrong" screen. Most of the issues that our users encountered are either linked to:
+
+- Not enough light (or no light at all when the lens cap has not been removed)
+- Camera didn't manage to focus (that's why we advise to disable the autofocus and manually set it at the beginning)
+- No SD card in the camera (as all the captures are downloaded in the processing stage)
\ No newline at end of file
Binary files ../pibooth_local_copy/fonts/Amatic-Bold.ttf and ./fonts/Amatic-Bold.ttf differ
Binary files ../pibooth_local_copy/fonts/AmaticSC-Regular.ttf and ./fonts/AmaticSC-Regular.ttf differ
Binary files ../pibooth_local_copy/fonts/DancingScript-Bold.ttf and ./fonts/DancingScript-Bold.ttf differ
Binary files ../pibooth_local_copy/fonts/DancingScript-Regular.ttf and ./fonts/DancingScript-Regular.ttf differ
Binary files ../pibooth_local_copy/fonts/Monoid-Bold.ttf and ./fonts/Monoid-Bold.ttf differ
Binary files ../pibooth_local_copy/fonts/Monoid-Regular.ttf and ./fonts/Monoid-Regular.ttf differ
Binary files ../pibooth_local_copy/fonts/Monoid-Retina.ttf and ./fonts/Monoid-Retina.ttf differ
Binary files ../pibooth_local_copy/fonts/Roboto-BoldItalic.ttf and ./fonts/Roboto-BoldItalic.ttf differ
Binary files ../pibooth_local_copy/fonts/Roboto-LightItalic.ttf and ./fonts/Roboto-LightItalic.ttf differ
diff -ruN ../pibooth_local_copy/fonts/__init__.py ./fonts/__init__.py
--- ../pibooth_local_copy/fonts/__init__.py	2025-05-16 13:26:46
+++ ./fonts/__init__.py	1969-12-31 19:00:00
@@ -1,111 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import os
-import os.path as osp
-import fnmatch
-from difflib import SequenceMatcher
-import pygame
-from PIL import ImageFont
-
-
-EMBEDDED_FONT_PATH = osp.dirname(osp.abspath(__file__))
-
-
-def get_available_fonts():
-    """Return the list of available fonts.
-    """
-    fonts_list = []
-    for font_file in os.listdir(EMBEDDED_FONT_PATH):
-        if fnmatch.fnmatch(font_file, '*.ttf'):
-            fonts_list.append(osp.splitext(osp.basename(font_file))[0])
-
-    fonts_list.extend(pygame.font.get_fonts())
-
-    return sorted(fonts_list, key=lambda s: s.lower())
-
-
-def get_filename(name):
-    """Return absolute path to a font definition file located in the current
-    package.
-    """
-    if osp.isfile(name):
-        return name
-
-    embedded_path = osp.join(osp.dirname(osp.abspath(__file__)), name)
-    if embedded_path and osp.isfile(embedded_path):
-        return embedded_path
-
-    elif embedded_path and osp.isfile(embedded_path + '.ttf'):
-        return embedded_path + '.ttf'
-
-    system_path = pygame.font.match_font(name)
-    if system_path and osp.isfile(system_path):
-        return system_path
-
-    # Show available fonts
-    most_similar = None
-    most_similar_ratio = 0
-    for font_name in get_available_fonts():
-        sim = SequenceMatcher(None, font_name, name).ratio()  # Similarity
-        if sim > most_similar_ratio:
-            most_similar = font_name
-            most_similar_ratio = sim
-    raise ValueError('System font "{0}" unknown, maybe you mean "{1}"'.format(name, most_similar))
-
-
-def get_pil_font(text, font_name, max_width, max_height):
-    """Create the PIL font object which fit the text to the given rectangle.
-
-    :param text: text to draw
-    :type text: str
-    :param font_name: name or path to font definition file
-    :type font_name: str
-    :param max_width: width of the rect to fit
-    :type max_width: int
-    :param max_height: height of the rect to fit
-    :type max_height: int
-
-    :return: PIL.Font instance
-    :rtype: object
-    """
-    start, end = 0, int(max_height * 2)
-    while start < end:
-        k = (start + end) // 2
-        font = ImageFont.truetype(font_name, k)
-        font_size = font.getsize(text)
-        if font_size[0] > max_width or font_size[1] > max_height:
-            end = k
-        else:
-            start = k + 1
-    return ImageFont.truetype(font_name, start)
-
-
-def get_pygame_font(text, font_name, max_width, max_height):
-    """Create the pygame font object which fit the text to the given rectangle.
-
-    :param text: text to draw
-    :type text: str
-    :param font_name: name or path to font definition file
-    :type font_name: str
-    :param max_width: width of the rect to fit
-    :type max_width: int
-    :param max_height: height of the rect to fit
-    :type max_height: int
-
-    :return: pygame.Font instance
-    :rtype: object
-    """
-    start, end = 0, int(max_height * 2)
-    while start < end:
-        k = (start + end) // 2
-        font = pygame.font.Font(get_filename(font_name), k)
-        font_size = font.size(text)
-        if font_size[0] > max_width or font_size[1] > max_height:
-            end = k
-        else:
-            start = k + 1
-        del font  # Run garbage collector, to avoid opening too many files
-    return pygame.font.Font(get_filename(font_name), start)
-
-
-CURRENT = get_filename('Amatic-Bold')  # Dynamically set at startup
Binary files ../pibooth_local_copy/fonts/__pycache__/__init__.cpython-37.pyc and ./fonts/__pycache__/__init__.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/language.py ./language.py
--- ../pibooth_local_copy/language.py	2025-05-16 13:26:44
+++ ./language.py	1969-12-31 19:00:00
@@ -1,278 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth language handling.
-"""
-
-import io
-import os
-import os.path as osp
-from configparser import ConfigParser
-from pibooth.utils import LOGGER, open_text_editor
-
-
-PARSER = ConfigParser()
-
-CURRENT = 'en'  # Dynamically set at startup
-
-DEFAULT = {
-    'br': {
-        'intro': "Tirar foto",
-        'intro_print': 'Ainda tem como\nimprimir esta\nfoto',
-        'choose': "Escolha o formato",
-        '1': "1 foto",
-        '2': "2 fotos",
-        '3': "3 fotos",
-        '4': "4 fotos",
-        'chosen': "Vamos!",
-        'smile': "Sorria!",
-        'processing': "Processando...",
-        'print': "Imprimir foto?",
-        'print_forget': "Por favor\nremova\nesta foto",
-        'finished': "Obrigado!",
-        'oops': "Opa! Ocorreu um erro.",
-    },
-    'de': {
-        'intro': "Foto aufnehmen",
-        'intro_print': "Du kannst dieses\nFoto immer noch\nausdrucken",
-        'choose': "Wähle Dein Layout",
-        '1': "1 Foto",
-        '2': "2 Fotos",
-        '3': "3 Fotos",
-        '4': "4 Fotos",
-        'chosen': "Los geht's!",
-        'smile': "Bitte lächeln!",
-        'processing': "Bearbeitung...",
-        'print': "Foto drucken?",
-        'print_forget': "Dieses Foto\nbitte löschen",
-        'finished': "Danke",
-        'oops': "Ups! Etwas ist schiefgelaufen",
-    },
-    'dk': {
-        'intro': "Tag et foto",
-        'intro_print': 'Eller du kan\nstadig udskrive\ndette foto',
-        'choose': "Vælg dit layout",
-        '1': "1 Foto",
-        '2': "2 Fotos",
-        '3': "3 Fotos",
-        '4': "4 Fotos",
-        'chosen': "Gør dig klar!",
-        'smile': "Smil !",
-        'processing': "Fremkalder Foto...",
-        'print': "Print foto?",
-        'print_forget': "Venligst\nglem dette\nfoto",
-        'finished': "Tak",
-        'oops': "Ups! Noget gik galt",
-    },
-    'en': {
-        'intro': "Take a photo",
-        'intro_print': "Or you can\nstill print\nthis photo",
-        'choose': "Choose your layout",
-        '1': "1 photo",
-        '2': "2 photos",
-        '3': "3 photos",
-        '4': "4 photos",
-        'chosen': "Let's go!",
-        'smile': "Smile !",
-        'processing': "Processing...",
-        'print': "Print the photo?",
-        'print_forget': "Please\nforget this\nphoto",
-        'finished': "Thanks",
-        'oops': "Oops something went wrong",
-    },
-    'es': {
-        'intro': "Sacate Una Foto",
-        'intro_print': "O Puedes\nTodavia Imprimir\nEsta Foto",
-        'choose': "Elige el tipo de foto",
-        '1': "1 Foto",
-        '2': "2 Fotos",
-        '3': "3 Fotos",
-        '4': "4 Fotos",
-        'chosen': "Adelante!!",
-        'smile': "Sonríe!!",
-        'processing': "Procesando...",
-        'print': "¿Imprimir esta foto?",
-        'print_forget': "Por favor\nolvida\nesta foto",
-        'finished': "Gracias",
-        'oops': "Maldición! Algo salió mal",
-    },
-    'fr': {
-        'intro': "Faire une photo",
-        'intro_print': "Ou sinon\ntu peux toujours\nimprimer\ncette photo",
-        'choose': "Choisis ton format",
-        '1': "1 photo",
-        '2': "2 photos",
-        '3': "3 photos",
-        '4': "4 photos",
-        'chosen': "C'est parti !",
-        'smile': "Souriez !",
-        'processing': "Préparation du montage",
-        'print': "Imprimer la photo ?",
-        'print_forget': "Oublie\ncette photo\ns'il te plait",
-        'finished': "Merci",
-        'oops': "Oups quelque chose s'est mal passé",
-    },
-    'hu': {
-        'intro': "Akarsz egy képet",
-        'intro_print': 'Vagy\nkinyomtathatja\nezt a fényképet',
-        'choose': "Kérlek válassz",
-        '1': "1 kép",
-        '2': "2 kép",
-        '3': "3 kép",
-        '4': "4 kép",
-        'chosen': "Készülj!",
-        'smile': "Csiizzz!",
-        'processing': "Feldolgozás...",
-        'print': "Nyomtatod a képet?",
-        'print_forget': "Kérjük,\nfelejtsd el ezt\na képet",
-        'finished': "Köszi",
-        'oops': "Sajnos valami hiba történt",
-    },
-    'it': {
-        'intro': "Scatta una foto",
-        'intro_print': 'Oppure puoi\nstampare\nquesta foto',
-        'choose': "Scegli il formato",
-        '1': "1 foto",
-        '2': "2 foto",
-        '3': "3 foto",
-        '4': "4 foto",
-        'chosen': "Andiamo!",
-        'smile': "Sorridi!",
-        'processing': "Elaborazione...",
-        'print': "Stampo la foto?",
-        'print_forget': "Per favore\nignora questa\nfoto",
-        'finished': "Grazie",
-        'oops': "Oops qualcosa è andato storto",
-    },
-    'nl': {
-        'intro': "Neem een foto",
-        'intro_print': "Of je kan\nnog altijd \ndeze foto printen",
-        'choose': "Kies een ontwerp",
-        '1': "1 foto",
-        '2': "2 foto’s",
-        '3': "3 foto’s",
-        '4': "4 foto’s",
-        'chosen': "We gaan ervoor!",
-        'smile': "Lachen!",
-        'processing': "Verwerken...",
-        'print': "Print de foto?",
-        'print_forget': "Vergeet\ndeze foto\nalstublieft",
-        'finished': "Bedankt",
-        'oops': "Oeps er ging iets mis",
-    },
-    'no': {
-        'intro': "Ta et bilde",
-        'intro_print': 'Eller du kan\nfremdeles printe\ndette bildet',
-        'choose': "Velg ditt utseende",
-        '1': "1 bilde",
-        '2': "2 bilder",
-        '3': "3 bilder",
-        '4': "4 bilder",
-        'chosen': "Start!",
-        'smile': "Smil !",
-        'processing': "Behandler...",
-        'print': "Printe bildet?",
-        'print_forget': "Glem\ndette\nbildet",
-        'finished': "Takk",
-        'oops': "Ops, noe gikk galt",
-    },
-    'pt': {
-        'intro': "Tira uma foto",
-        'intro_print': 'Ainda podes\nimprimir esta\nfoto',
-        'choose': "Escolhe o teu formato",
-        '1': "1 foto",
-        '2': "2 fotos",
-        '3': "3 fotos",
-        '4': "4 fotos",
-        'chosen': "Vamos!",
-        'smile': "Sorri!",
-        'processing': "A processar...",
-        'print': "Imprimir foto?",
-        'print_forget': "Por favor\nesqueçe-te\ndesta foto",
-        'finished': "Obrigado!",
-        'oops': "Oops, ocorreu um erro.",
-    },
-}
-
-
-def init(filename, clear=False):
-    """Initialize the translation system.
-
-    :param filename: path to the translations file
-    :type filename: str
-    :param clear: restore default translations
-    :type clear: bool
-    """
-    PARSER.filename = osp.abspath(osp.expanduser(filename))
-
-    if not osp.isfile(PARSER.filename) or clear:
-        LOGGER.info("Generate the translation file in '%s'", PARSER.filename)
-        dirname = osp.dirname(PARSER.filename)
-        if not osp.isdir(dirname):
-            os.makedirs(dirname)
-
-        with io.open(PARSER.filename, 'w', encoding="utf-8") as fp:
-            for section, options in DEFAULT.items():
-                fp.write("[{}]\n".format(section))
-                for name, value in options.items():
-                    value = value.splitlines()
-                    fp.write("{} = {}\n".format(name, value[0]))
-                    if len(value) > 1:
-                        for part in value[1:]:
-                            fp.write("    {}\n".format(part))
-                fp.write("\n\n")
-
-    PARSER.read(PARSER.filename, encoding='utf-8')
-
-    # Update the current file with missing language(s) and key(s)
-    changed = False
-    for section, options in DEFAULT.items():
-        if not PARSER.has_section(section):
-            changed = True
-            LOGGER.debug("Add [%s] to available language list", section)
-            PARSER.add_section(section)
-
-        for option, value in options.items():
-            if not PARSER.has_option(section, option):
-                changed = True
-                LOGGER.debug("Add [%s][%s] to available translations", section, option)
-                PARSER.set(section, option, value)
-
-    if changed:
-        with io.open(PARSER.filename, 'w', encoding="utf-8") as fp:
-            PARSER.write(fp)
-
-
-def edit():
-    """Open a text editor to edit the translations.
-    """
-    if not getattr(PARSER, 'filename', None):
-        raise EnvironmentError("Translation system is not initialized")
-
-    open_text_editor(PARSER.filename)
-
-
-def get_supported_languages():
-    """Return the list of supported language.
-    """
-    if getattr(PARSER, 'filename', None):
-        return list(sorted(lang for lang in PARSER.sections()))
-    return list(sorted(DEFAULT.keys()))
-
-
-def get_translated_text(key):
-    """Return the text corresponding to the key in the language defined in the config.
-
-    :param key: key in the translation file
-    :type key: str
-    """
-    if not getattr(PARSER, 'filename', None):
-        raise EnvironmentError("Translation system is not initialized")
-
-    if PARSER.has_section(CURRENT) and PARSER.has_option(CURRENT, key):
-        return PARSER.get(CURRENT, key).strip('"')
-    elif PARSER.has_option('en', key):
-        LOGGER.warning("Unsupported language '%s', fallback to English", CURRENT)
-        return PARSER.get('en', key).strip('"')
-
-    LOGGER.debug("No translation defined for '%s/%s' key", CURRENT, key)
-    return None
diff -ruN ../pibooth_local_copy/pibooth/__init__.py ./pibooth/__init__.py
--- ../pibooth_local_copy/pibooth/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+
+"""A photo booth application in pure Python for the Raspberry Pi."""
+
+__version__ = "2.0.8"
+
+try:
+
+    import pluggy
+
+    # Marker to be imported and used in plugins (and for own implementations)
+    hookimpl = pluggy.HookimplMarker('pibooth')
+
+except ImportError:
+    pass  # When running the setup.py, pluggy is not yet installed
diff -ruN ../pibooth_local_copy/pibooth/booth.py ./pibooth/booth.py
--- ../pibooth_local_copy/pibooth/booth.py	1969-12-31 19:00:00
+++ ./pibooth/booth.py	2025-05-16 14:02:41
@@ -0,0 +1,495 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+"""Pibooth main module.
+"""
+
+import os
+import os.path as osp
+import tempfile
+import shutil
+import logging
+import argparse
+import multiprocessing
+from warnings import filterwarnings
+
+import pygame
+from gpiozero import Device, ButtonBoard, LEDBoard, pi_info
+from gpiozero.exc import BadPinFactory, PinFactoryFallback
+
+import pibooth
+from pibooth import fonts
+from pibooth import language
+from pibooth.counters import Counters
+from pibooth.utils import (LOGGER, PoolingTimer, configure_logging, get_crash_message,
+                           set_logging_level, get_event_pos)
+from pibooth.states import StateMachine
+from pibooth.plugins import create_plugin_manager
+from pibooth.view import PiWindow
+from pibooth.config import PiConfigParser, PiConfigMenu
+from pibooth.printer import PRINTER_TASKS_UPDATED, Printer
+
+
+# Set the default pin factory to a mock factory if pibooth is not started a Raspberry Pi
+try:
+    filterwarnings("ignore", category=PinFactoryFallback)
+    GPIO_INFO = "on Raspberry pi {0}".format(pi_info().model)
+except BadPinFactory:
+    from gpiozero.pins.mock import MockFactory
+    Device.pin_factory = MockFactory()
+    GPIO_INFO = "without physical GPIO, fallback to GPIO mock"
+
+
+BUTTONDOWN = pygame.USEREVENT + 1
+
+
+class PiApplication(object):
+
+    """Main class representing the ``pibooth`` software.
+    The following attributes are available for use in plugins:
+
+    :attr capture_nbr: number of capture to be done in the current sequence
+    :type capture_nbr: int
+    :attr capture_date: date (%Y-%m-%d-%H-%M-%S) of the first capture of the current sequence
+    :type capture_date: str
+    :attr capture_choices: possible choices of captures numbers.
+    :type capture_choices: tuple
+    :attr previous_picture: picture generated during last sequence
+    :type previous_picture: :py:class:`PIL.Image`
+    :attr previous_animated: infinite list of picture to display during animation
+    :type previous_animated: :py:func:`itertools.cycle`
+    :attr previous_picture_file: file name of the picture generated during last sequence
+    :type previous_picture_file: str
+    :attr count: holder for counter values
+    :type count: :py:class:`pibooth.counters.Counters`
+    :attr camera: camera used
+    :type camera: :py:class:`pibooth.camera.base.BaseCamera`
+    :attr buttons: access to hardware buttons ``capture`` and ``printer``
+    :type buttons: :py:class:`gpiozero.ButtonBoard`
+    :attr leds: access to hardware LED ``capture`` and ``printer``
+    :attr leds: :py:class:`gpiozero.LEDBoard`
+    :attr printer: printer used
+    :type printer: :py:class:`pibooth.printer.Printer`
+    """
+
+    def __init__(self, config, plugin_manager):
+        self._pm = plugin_manager
+        self._config = config
+
+        # Create directories where pictures are saved
+        for savedir in config.gettuple('GENERAL', 'directory', 'path'):
+            if osp.isdir(savedir) and config.getboolean('GENERAL', 'debug'):
+                shutil.rmtree(savedir)
+            if not osp.isdir(savedir):
+                os.makedirs(savedir)
+
+        # Create window of (width, height)
+        init_size = self._config.gettyped('WINDOW', 'size')
+        init_debug = self._config.getboolean('GENERAL', 'debug')
+        init_color = self._config.gettyped('WINDOW', 'background')
+        init_text_color = self._config.gettyped('WINDOW', 'text_color')
+        if not isinstance(init_color, (tuple, list)):
+            init_color = self._config.getpath('WINDOW', 'background')
+
+        title = 'Pibooth v{}'.format(pibooth.__version__)
+        if not isinstance(init_size, str):
+            self._window = PiWindow(title, init_size, color=init_color,
+                                    text_color=init_text_color, debug=init_debug)
+        else:
+            self._window = PiWindow(title, color=init_color,
+                                    text_color=init_text_color, debug=init_debug)
+
+        self._menu = None
+        self._multipress_timer = PoolingTimer(config.getfloat('CONTROLS', 'multi_press_delay'), False)
+        self._fingerdown_events = []
+
+        # Define states of the application
+        self._machine = StateMachine(self._pm, self._config, self, self._window)
+        self._machine.add_state('wait')
+        self._machine.add_state('choose')
+        self._machine.add_state('chosen')
+        self._machine.add_state('preview')
+        self._machine.add_state('capture')
+        self._machine.add_state('processing')
+        self._machine.add_state('print')
+        self._machine.add_state('finish')
+
+        # ---------------------------------------------------------------------
+        # Variables shared with plugins
+        # Change them may break plugins compatibility
+        self.capture_nbr = None
+        self.capture_date = None
+        self.capture_choices = (4, 1)
+        self.previous_picture = None
+        self.previous_animated = None
+        self.previous_picture_file = None
+
+        self.count = Counters(self._config.join_path("counters.pickle"),
+                              taken=0, printed=0, forgotten=0,
+                              remaining_duplicates=self._config.getint('PRINTER', 'max_duplicates'))
+
+        self.camera = self._pm.hook.pibooth_setup_camera(cfg=self._config)
+
+        self.buttons = ButtonBoard(capture="BOARD" + config.get('CONTROLS', 'picture_btn_pin'),
+                                   printer="BOARD" + config.get('CONTROLS', 'print_btn_pin'),
+                                   hold_time=config.getfloat('CONTROLS', 'debounce_delay'),
+                                   pull_up=True)
+        self.buttons.capture.when_held = self._on_button_capture_held
+        self.buttons.printer.when_held = self._on_button_printer_held
+
+        self.leds = LEDBoard(capture="BOARD" + config.get('CONTROLS', 'picture_led_pin'),
+                             printer="BOARD" + config.get('CONTROLS', 'print_led_pin'))
+
+        self.printer = Printer(config.get('PRINTER', 'printer_name'),
+                               config.getint('PRINTER', 'max_pages'),
+                               config.gettyped('PRINTER', 'printer_options'),
+                               self.count)
+        # ---------------------------------------------------------------------
+
+    def _initialize(self):
+        """Restore the application with initial parameters defined in the
+        configuration file.
+        Only parameters that can be changed at runtime are restored.
+        """
+        # Handle the language configuration
+        language.CURRENT = self._config.get('GENERAL', 'language')
+        fonts.CURRENT = fonts.get_filename(self._config.get('WINDOW', 'font'))
+
+        # Set the captures choices
+        choices = self._config.gettuple('PICTURE', 'captures', int)
+        for chx in choices:
+            if chx not in [1, 2, 3, 4]:
+                LOGGER.warning("Invalid captures number '%s' in config, fallback to '%s'",
+                               chx, self.capture_choices)
+                choices = self.capture_choices
+                break
+        self.capture_choices = choices
+
+        # Handle autostart of the application
+        self._config.handle_autostart()
+
+        self._window.arrow_location = self._config.get('WINDOW', 'arrows')
+        self._window.arrow_offset = self._config.getint('WINDOW', 'arrows_x_offset')
+        self._window.text_color = self._config.gettyped('WINDOW', 'text_color')
+        self._window.drop_cache()
+
+        # Handle window size
+        size = self._config.gettyped('WINDOW', 'size')
+        if isinstance(size, str) and size.lower() == 'fullscreen':
+            if not self._window.is_fullscreen:
+                self._window.toggle_fullscreen()
+        else:
+            if self._window.is_fullscreen:
+                self._window.toggle_fullscreen()
+        self._window.debug = self._config.getboolean('GENERAL', 'debug')
+
+        # Handle debug mode
+        if not self._config.getboolean('GENERAL', 'debug'):
+            set_logging_level()  # Restore default level
+            self._machine.add_failsafe_state('failsafe')
+        else:
+            set_logging_level(logging.DEBUG)
+            self._machine.remove_state('failsafe')
+
+        # Reset the print counter (in case of max_pages is reached)
+        self.printer.max_pages = self._config.getint('PRINTER', 'max_pages')
+
+    def _on_button_capture_held(self):
+        """Called when the capture button is pressed.
+        """
+        if all(self.buttons.value):
+            self.buttons.capture.hold_repeat = True
+            if self._multipress_timer.elapsed() == 0:
+                self._multipress_timer.start()
+            if self._multipress_timer.is_timeout():
+                # Capture was held while printer was pressed
+                if self._menu and self._menu.is_shown():
+                    # Convert HW button events to keyboard events for menu
+                    event = self._menu.create_back_event()
+                    LOGGER.debug("BUTTONDOWN: generate MENU-ESC event")
+                else:
+                    event = pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
+                                               button=self.buttons)
+                    LOGGER.debug("BUTTONDOWN: generate DOUBLE buttons event")
+                self.buttons.capture.hold_repeat = False
+                self._multipress_timer.reset()
+                pygame.event.post(event)
+        else:
+            # Capture was held but printer not pressed
+            if self._menu and self._menu.is_shown():
+                # Convert HW button events to keyboard events for menu
+                event = self._menu.create_next_event()
+                LOGGER.debug("BUTTONDOWN: generate MENU-NEXT event")
+            else:
+                event = pygame.event.Event(BUTTONDOWN, capture=1, printer=0,
+                                           button=self.buttons.capture)
+                LOGGER.debug("BUTTONDOWN: generate CAPTURE button event")
+            self.buttons.capture.hold_repeat = False
+            self._multipress_timer.reset()
+            pygame.event.post(event)
+
+    def _on_button_printer_held(self):
+        """Called when the printer button is pressed.
+        """
+        if all(self.buttons.value):
+            # Printer was held while capture was pressed
+            # but don't do anything here, let capture_held handle it instead
+            pass
+        else:
+            # Printer was held but capture not pressed
+            if self._menu and self._menu.is_shown():
+                # Convert HW button events to keyboard events for menu
+                event = self._menu.create_click_event()
+                LOGGER.debug("BUTTONDOWN: generate MENU-APPLY event")
+            else:
+                event = pygame.event.Event(BUTTONDOWN, capture=0, printer=1,
+                                           button=self.buttons.printer)
+                LOGGER.debug("BUTTONDOWN: generate PRINTER event")
+            pygame.event.post(event)
+
+    @property
+    def picture_filename(self):
+        """Return the final picture file name.
+        """
+        if not self.capture_date:
+            raise EnvironmentError("The 'capture_date' attribute is not set yet")
+        return "{}_pibooth.jpg".format(self.capture_date)
+
+    def find_quit_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.QUIT:
+                return event
+        return None
+
+    def find_settings_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
+                return event
+            if event.type == BUTTONDOWN and event.capture and event.printer:
+                return event
+            if event.type == pygame.FINGERDOWN:
+                # Press but not release
+                self._fingerdown_events.append(event)
+            if event.type == pygame.FINGERUP:
+                # Resetting touch_events
+                self._fingerdown_events = []
+            if len(self._fingerdown_events) > 3:
+                # 4 fingers on the screen trigger the menu
+                self._fingerdown_events = []
+                return pygame.event.Event(BUTTONDOWN, capture=1, printer=1,
+                                          button=self.buttons)
+        return None
+
+    def find_fullscreen_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.KEYDOWN and \
+                    event.key == pygame.K_f and pygame.key.get_mods() & pygame.KMOD_CTRL:
+                return event
+        return None
+
+    def find_resize_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.VIDEORESIZE:
+                return event
+        return None
+
+    def find_capture_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.KEYDOWN and event.key == pygame.K_p:
+                return event
+            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+                pos = get_event_pos(self._window.display_size, event)
+                rect = self._window.get_rect()
+                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
+                    return event
+            if event.type == BUTTONDOWN and event.capture:
+                return event
+        return None
+
+    def find_print_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.KEYDOWN and event.key == pygame.K_e\
+                    and pygame.key.get_mods() & pygame.KMOD_CTRL:
+                return event
+            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+                pos = get_event_pos(self._window.display_size, event)
+                rect = self._window.get_rect()
+                if pygame.Rect(rect.width // 2, 0, rect.width // 2, rect.height).collidepoint(pos):
+                    return event
+            if event.type == BUTTONDOWN and event.printer:
+                return event
+        return None
+
+    def find_print_status_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == PRINTER_TASKS_UPDATED:
+                return event
+        return None
+
+    def find_choice_event(self, events):
+        """Return the first found event if found in the list.
+        """
+        for event in events:
+            if event.type == pygame.KEYDOWN and event.key == pygame.K_LEFT:
+                return event
+            if event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
+                return event
+            if (event.type == pygame.MOUSEBUTTONUP and event.button in (1, 2, 3)) or event.type == pygame.FINGERUP:
+                pos = get_event_pos(self._window.display_size, event)
+                rect = self._window.get_rect()
+                if pygame.Rect(0, 0, rect.width // 2, rect.height).collidepoint(pos):
+                    event.key = pygame.K_LEFT
+                else:
+                    event.key = pygame.K_RIGHT
+                return event
+            if event.type == BUTTONDOWN:
+                if event.capture:
+                    event.key = pygame.K_LEFT
+                else:
+                    event.key = pygame.K_RIGHT
+                return event
+        return None
+
+    def main_loop(self):
+        try:
+            fps = 40
+            clock = pygame.time.Clock()
+            self._initialize()
+            self._pm.hook.pibooth_startup(cfg=self._config, app=self)
+            self._machine.set_state('wait')
+
+            while True:
+                events = list(pygame.event.get())
+
+                if self.find_quit_event(events):
+                    break
+
+                if self.find_fullscreen_event(events):
+                    self._window.toggle_fullscreen()
+
+                event = self.find_resize_event(events)
+                if event:
+                    self._window.resize(event.size)
+
+                if not self._menu and self.find_settings_event(events):
+                    self.camera.stop_preview()
+                    self.leds.off()
+                    self._menu = PiConfigMenu(self._pm, self._config, self, self._window)
+                    self._menu.show()
+                    self.leds.blink(on_time=0.1, off_time=1)
+                elif self._menu and self._menu.is_shown():
+                    self._menu.process(events)
+                elif self._menu and not self._menu.is_shown():
+                    self.leds.off()
+                    self._initialize()
+                    self._machine.set_state('wait')
+                    self._menu = None
+                else:
+                    self._machine.process(events)
+
+                pygame.display.update()
+                clock.tick(fps)  # Ensure the program will never run at more than <fps> frames per second
+
+        except Exception as ex:
+            LOGGER.error(str(ex), exc_info=True)
+            LOGGER.error(get_crash_message())
+        finally:
+            self._pm.hook.pibooth_cleanup(app=self)
+            pygame.quit()
+
+
+def main():
+    """Application entry point.
+    """
+    if hasattr(multiprocessing, 'set_start_method'):
+        # Avoid use 'fork': safely forking a multithreaded process is problematic
+        multiprocessing.set_start_method('spawn')
+
+    parser = argparse.ArgumentParser(usage="%(prog)s [options]", description=pibooth.__doc__)
+
+    parser.add_argument("config_directory", nargs='?', default="~/.config/pibooth",
+                        help=u"path to configuration directory (default: %(default)s)")
+
+    parser.add_argument('--version', action='version', version=pibooth.__version__,
+                        help=u"show program's version number and exit")
+
+    parser.add_argument("--config", action='store_true',
+                        help=u"edit the current configuration and exit")
+
+    parser.add_argument("--translate", action='store_true',
+                        help=u"edit the GUI translations and exit")
+
+    parser.add_argument("--reset", action='store_true',
+                        help=u"restore the default configuration/translations and exit")
+
+    parser.add_argument("--nolog", action='store_true', default=False,
+                        help=u"don't save console output in a file (avoid filling the /tmp directory)")
+
+    group = parser.add_mutually_exclusive_group()
+    group.add_argument("-v", "--verbose", dest='logging', action='store_const', const=logging.DEBUG,
+                       help=u"report more information about operations", default=logging.INFO)
+    group.add_argument("-q", "--quiet", dest='logging', action='store_const', const=logging.WARNING,
+                       help=u"report only errors and warnings", default=logging.INFO)
+
+    options = parser.parse_args()
+
+    if not options.nolog:
+        filename = osp.join(tempfile.gettempdir(), 'pibooth.log')
+    else:
+        filename = None
+    configure_logging(options.logging, '[ %(levelname)-8s] %(name)-18s: %(message)s', filename=filename)
+
+    plugin_manager = create_plugin_manager()
+
+    # Load the configuration
+    config = PiConfigParser(osp.join(options.config_directory, "pibooth.cfg"), plugin_manager, not options.reset)
+
+    # Register plugins
+    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
+                                    config.gettuple('GENERAL', 'plugins_disabled', str))
+    LOGGER.info("Installed plugins: %s", ", ".join(
+        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()]))
+
+    # Load the languages
+    language.init(config.join_path("translations.cfg"), options.reset)
+
+    # Update configuration with plugins ones
+    plugin_manager.hook.pibooth_configure(cfg=config)
+
+    # Ensure config files are present in case of first pibooth launch
+    if not options.reset:
+        if not osp.isfile(config.filename):
+            config.save(default=True)
+        plugin_manager.hook.pibooth_reset(cfg=config, hard=False)
+
+    if options.config:
+        LOGGER.info("Editing the pibooth configuration...")
+        config.edit()
+    elif options.translate:
+        LOGGER.info("Editing the GUI translations...")
+        language.edit()
+    elif options.reset:
+        config.save(default=True)
+        plugin_manager.hook.pibooth_reset(cfg=config, hard=True)
+    else:
+        LOGGER.info("Starting the photo booth application %s", GPIO_INFO)
+        app = PiApplication(config, plugin_manager)
+        app.main_loop()
+
+
+if __name__ == '__main__':
+    main()
diff -ruN ../pibooth_local_copy/pibooth/camera/__init__.py ./pibooth/camera/__init__.py
--- ../pibooth_local_copy/pibooth/camera/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/camera/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+
+from pibooth.utils import LOGGER
+from pibooth.camera.rpi import RpiCamera, get_rpi_camera_proxy
+from pibooth.camera.gphoto import GpCamera, get_gp_camera_proxy
+from pibooth.camera.opencv import CvCamera, get_cv_camera_proxy
+from pibooth.camera.hybrid import HybridRpiCamera, HybridCvCamera
+
+
+def close_proxy(rpi_cam_proxy, gp_cam_proxy, cv_cam_proxy):
+    """Close proxy drivers.
+    """
+    if rpi_cam_proxy:
+        RpiCamera(rpi_cam_proxy).quit()
+    if gp_cam_proxy:
+        GpCamera(gp_cam_proxy).quit()
+    if cv_cam_proxy:
+        CvCamera(cv_cam_proxy).quit()
+
+
+def find_camera():
+    """Initialize the camera depending of the connected one. The priority order
+    is chosen in order to have best rendering during preview and to take captures.
+    The gPhoto2 camera is first (drivers most restrictive) to avoid connection
+    concurence in case of DSLR compatible with OpenCV.
+    """
+    rpi_cam_proxy = get_rpi_camera_proxy()
+    gp_cam_proxy = get_gp_camera_proxy()
+    cv_cam_proxy = get_cv_camera_proxy()
+
+    if rpi_cam_proxy and gp_cam_proxy:
+        LOGGER.info("Configuring hybrid camera (Picamera + gPhoto2) ...")
+        close_proxy(None, None, cv_cam_proxy)
+        return HybridRpiCamera(rpi_cam_proxy, gp_cam_proxy)
+    elif cv_cam_proxy and gp_cam_proxy:
+        LOGGER.info("Configuring hybrid camera (OpenCV + gPhoto2) ...")
+        close_proxy(rpi_cam_proxy, None, None)
+        return HybridCvCamera(cv_cam_proxy, gp_cam_proxy)
+    elif gp_cam_proxy:
+        LOGGER.info("Configuring gPhoto2 camera ...")
+        close_proxy(rpi_cam_proxy, None, cv_cam_proxy)
+        return GpCamera(gp_cam_proxy)
+    elif rpi_cam_proxy:
+        LOGGER.info("Configuring Picamera camera ...")
+        close_proxy(None, gp_cam_proxy, cv_cam_proxy)
+        return RpiCamera(rpi_cam_proxy)
+    elif cv_cam_proxy:
+        LOGGER.info("Configuring OpenCV camera ...")
+        close_proxy(rpi_cam_proxy, gp_cam_proxy, None)
+        return CvCamera(cv_cam_proxy)
+
+    raise EnvironmentError("Neither Raspberry Pi nor GPhoto2 nor OpenCV camera detected")
diff -ruN ../pibooth_local_copy/pibooth/camera/base.py ./pibooth/camera/base.py
--- ../pibooth_local_copy/pibooth/camera/base.py	1969-12-31 19:00:00
+++ ./pibooth/camera/base.py	2025-05-16 14:02:41
@@ -0,0 +1,134 @@
+# -*- coding: utf-8 -*-
+
+import pygame
+from PIL import Image, ImageDraw
+
+from pibooth import fonts
+from pibooth.pictures import sizing
+
+
+class BaseCamera(object):
+
+    def __init__(self, camera_proxy):
+        self._cam = camera_proxy
+        self._border = 50
+        self._window = None
+        self._overlay = None
+        self._captures = []
+
+        self.resolution = None
+        self.delete_internal_memory = False
+        self.preview_rotation, self.capture_rotation = (0, 0)
+        self.preview_iso, self.capture_iso = (100, 100)
+        self.preview_flip, self.capture_flip = (False, False)
+
+    def initialize(self, iso, resolution, rotation=0, flip=False, delete_internal_memory=False):
+        """Initialize the camera.
+        """
+        if not isinstance(rotation, (tuple, list)):
+            rotation = (rotation, rotation)
+        self.preview_rotation, self.capture_rotation = rotation
+        for name in ('preview', 'capture'):
+            rotation = getattr(self, '{}_rotation'.format(name))
+            if rotation not in (0, 90, 180, 270):
+                raise ValueError(
+                    "Invalid {} camera rotation value '{}' (should be 0, 90, 180 or 270)".format(name, rotation))
+        self.resolution = resolution
+        self.capture_flip = flip
+        if not isinstance(iso, (tuple, list)):
+            iso = (iso, iso)
+        self.preview_iso, self.capture_iso = iso
+        self.delete_internal_memory = delete_internal_memory
+        self._specific_initialization()
+
+    def _specific_initialization(self):
+        """Specific camera initialization.
+        """
+        pass
+
+    def _show_overlay(self, text, alpha):
+        """Add an image as an overlay.
+        """
+        self._overlay = text
+
+    def _hide_overlay(self):
+        """Remove any existing overlay.
+        """
+        if self._overlay is not None:
+            self._overlay = None
+
+    def _post_process_capture(self, capture_data):
+        """Rework and return a PIL Image object from capture data.
+        """
+        raise NotImplementedError
+
+    def get_rect(self, max_size=None):
+        """Return a Rect object (as defined in pygame) for resizing preview and images
+        in order to fit to the defined window.
+        """
+        rect = self._window.get_rect(absolute=True)
+        size = (rect.width - 2 * self._border, rect.height - 2 * self._border)
+        if max_size:
+            size = (min(size[0], max_size[0]), min(size[1], max_size[1]))
+        res = sizing.new_size_keep_aspect_ratio(self.resolution, size)
+        return pygame.Rect(rect.centerx - res[0] // 2, rect.centery - res[1] // 2, res[0], res[1])
+
+    def build_overlay(self, size, text, alpha):
+        """Return a PIL image with the given text that can be used
+        as an overlay for the camera.
+        """
+        image = Image.new('RGBA', size)
+        draw = ImageDraw.Draw(image)
+
+        font = fonts.get_pil_font(text, fonts.CURRENT, 0.9 * size[0], 0.9 * size[1])
+        txt_width, txt_height = draw.textsize(text, font=font)
+
+        position = ((size[0] - txt_width) // 2, (size[1] - txt_height) // 2 - size[1] // 10)
+        draw.text(position, text, (255, 255, 255, alpha), font=font)
+        return image
+
+    def preview(self, window, flip=True):
+        """Setup the preview.
+        """
+        raise NotImplementedError
+
+    def preview_countdown(self, timeout, alpha=60):
+        """Show a countdown of `timeout` seconds on the preview.
+        Returns when the countdown is finished.
+        """
+        raise NotImplementedError
+
+    def preview_wait(self, timeout, alpha=60):
+        """Wait the given time and let doing the job.
+        Returns when the timeout is reached.
+        """
+        raise NotImplementedError
+
+    def stop_preview(self):
+        """Stop the preview.
+        """
+        raise NotImplementedError
+
+    def capture(self, effect=None):
+        """Capture a new picture.
+        """
+        raise NotImplementedError
+
+    def get_captures(self):
+        """Return all buffered captures as PIL images (buffer dropped after call).
+        """
+        images = []
+        for data in self._captures:
+            images.append(self._post_process_capture(data))
+        self.drop_captures()
+        return images
+
+    def drop_captures(self):
+        """Delete all buffered captures.
+        """
+        self._captures.clear()
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        raise NotImplementedError
diff -ruN ../pibooth_local_copy/pibooth/camera/gphoto.py ./pibooth/camera/gphoto.py
--- ../pibooth_local_copy/pibooth/camera/gphoto.py	1969-12-31 19:00:00
+++ ./pibooth/camera/gphoto.py	2025-05-16 14:02:41
@@ -0,0 +1,311 @@
+# -*- coding: utf-8 -*-
+
+import io
+import time
+import pygame
+try:
+    import gphoto2 as gp
+except ImportError:
+    gp = None  # gphoto2 is optional
+from PIL import Image, ImageFilter
+from pibooth.pictures import sizing
+from pibooth.utils import LOGGER, PoolingTimer, pkill
+from pibooth.language import get_translated_text
+from pibooth.camera.base import BaseCamera
+
+
+def get_gp_camera_proxy(port=None):
+    """Return camera proxy if a gPhoto2 compatible camera is found
+    else return None.
+
+    .. note:: try to kill any process using gPhoto2 as it may block camera access.
+
+    :param port: look on given port number
+    :type port: str
+    """
+    if not gp:
+        return None  # gPhoto2 is not installed
+
+    pkill('*gphoto2*')
+    if hasattr(gp, 'gp_camera_autodetect'):
+        # gPhoto2 version 2.5+
+        cameras = gp.check_result(gp.gp_camera_autodetect())
+    else:
+        port_info_list = gp.PortInfoList()
+        port_info_list.load()
+        abilities_list = gp.CameraAbilitiesList()
+        abilities_list.load()
+        cameras = abilities_list.detect(port_info_list)
+    if cameras:
+        LOGGER.debug("Found gPhoto2 cameras on ports: '%s'", "' / '".join([p for _, p in cameras]))
+        # Initialize first camera proxy and return it
+        camera = gp.Camera()
+        if port is not None:
+            port_info_list = gp.PortInfoList()
+            port_info_list.load()
+            idx = port_info_list.lookup_path(port)
+            camera.set_port_info(port_info_list[idx])
+
+        try:
+            camera.init()
+            return camera
+        except gp.GPhoto2Error as ex:
+            LOGGER.warning("Could not connect gPhoto2 camera: %s", ex)
+
+    return None
+
+
+def gp_log_callback(level, domain, string, data=None):
+    """Logging callback for gphoto2.
+    """
+    LOGGER.getChild('gphoto2').debug(domain.decode("utf-8") + u': ' + string.decode("utf-8"))
+
+
+class GpCamera(BaseCamera):
+
+    """gPhoto2 camera management.
+    """
+
+    IMAGE_EFFECTS = [u'none',
+                     u'blur',
+                     u'contour',
+                     u'detail',
+                     u'edge_enhance',
+                     u'edge_enhance_more',
+                     u'emboss',
+                     u'find_edges',
+                     u'smooth',
+                     u'smooth_more',
+                     u'sharpen']
+
+    def __init__(self, camera_proxy):
+        super(GpCamera, self).__init__(camera_proxy)
+        self._gp_logcb = None
+        self._preview_compatible = True
+        self._preview_viewfinder = False
+
+    def _specific_initialization(self):
+        """Camera initialization.
+        """
+        self._gp_logcb = gp.check_result(gp.gp_log_add_func(gp.GP_LOG_VERBOSE, gp_log_callback))
+        abilities = self._cam.get_abilities()
+        self._preview_compatible = gp.GP_OPERATION_CAPTURE_PREVIEW ==\
+            abilities.operations & gp.GP_OPERATION_CAPTURE_PREVIEW
+        if not self._preview_compatible:
+            LOGGER.warning("The connected DSLR camera is not compatible with preview")
+        else:
+            try:
+                self.get_config_value('actions', 'viewfinder')
+                self._preview_viewfinder = True
+            except ValueError:
+                self._preview_viewfinder = False
+
+        self.set_config_value('imgsettings', 'iso', self.preview_iso)
+        self.set_config_value('settings', 'capturetarget', 'Memory card')
+
+    def _show_overlay(self, text, alpha):
+        """Add an image as an overlay.
+        """
+        if self._window:  # No window means no preview displayed
+            rect = self.get_rect()
+            self._overlay = self.build_overlay((rect.width, rect.height), str(text), alpha)
+
+    def _rotate_image(self, image, rotation):
+        """Rotate a PIL image, same direction than RpiCamera.
+        """
+        if rotation == 90:
+            return image.transpose(Image.ROTATE_90)
+        elif rotation == 180:
+            return image.transpose(Image.ROTATE_180)
+        elif rotation == 270:
+            return image.transpose(Image.ROTATE_270)
+        return image
+
+    def _get_preview_image(self):
+        """Capture a new preview image.
+        """
+        rect = self.get_rect()
+        if self._preview_compatible:
+            cam_file = self._cam.capture_preview()
+            image = Image.open(io.BytesIO(cam_file.get_data_and_size()))
+            image = self._rotate_image(image, self.preview_rotation)
+            # Crop to keep aspect ratio of the resolution
+            image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
+            # Resize to fit the available space in the window
+            image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, (rect.width, rect.height), 'outer'))
+
+            if self.preview_flip:
+                image = image.transpose(Image.FLIP_LEFT_RIGHT)
+        else:
+            image = Image.new('RGB', (rect.width, rect.height), color=(0, 0, 0))
+
+        if self._overlay:
+            image.paste(self._overlay, (0, 0), self._overlay)
+        return image
+
+    def _post_process_capture(self, capture_data):
+        """Rework capture data.
+
+        :param capture_data: couple (GPhotoPath, effect)
+        :type capture_data: tuple
+        """
+        gp_path, effect = capture_data
+        camera_file = self._cam.file_get(gp_path.folder, gp_path.name, gp.GP_FILE_TYPE_NORMAL)
+        if self.delete_internal_memory:
+            LOGGER.debug("Delete capture '%s' from internal memory", gp_path.name)
+            self._cam.file_delete(gp_path.folder, gp_path.name)
+        image = Image.open(io.BytesIO(camera_file.get_data_and_size()))
+        image = self._rotate_image(image, self.capture_rotation)
+
+        # Crop to keep aspect ratio of the resolution
+        image = image.crop(sizing.new_size_by_croping_ratio(image.size, self.resolution))
+        # Resize to fit the resolution
+        image = image.resize(sizing.new_size_keep_aspect_ratio(image.size, self.resolution, 'outer'))
+
+        if self.capture_flip:
+            image = image.transpose(Image.FLIP_LEFT_RIGHT)
+
+        if effect != 'none':
+            image = image.filter(getattr(ImageFilter, effect.upper()))
+
+        return image
+
+    def set_config_value(self, section, option, value):
+        """Set camera configuration.
+        """
+        try:
+            LOGGER.debug('Setting option %s/%s=%s', section, option, value)
+            config = self._cam.get_config()
+            child = config.get_child_by_name(section).get_child_by_name(option)
+            if child.get_type() == gp.GP_WIDGET_RADIO:
+                choices = [c for c in child.get_choices()]
+            else:
+                choices = None
+            data_type = type(child.get_value())
+            value = data_type(value)  # Cast value
+            if choices and value not in choices:
+                if value == 'Memory card' and 'card' in choices:
+                    value = 'card'  # Fix for Sony ZV-1
+                elif value == 'Memory card' and 'card+sdram' in choices:
+                    value = 'card+sdram'  # Fix for Sony ILCE-6400
+                else:
+                    LOGGER.warning("Invalid value '%s' for option %s (possible choices: %s), trying to set it anyway",
+                                   value, option, choices)
+            child.set_value(value)
+            self._cam.set_config(config)
+        except gp.GPhoto2Error as ex:
+            LOGGER.error('Unsupported option %s/%s=%s (%s), configure your DSLR manually', section, option, value, ex)
+
+    def get_config_value(self, section, option):
+        """Get camera configuration option.
+        """
+        try:
+            config = self._cam.get_config()
+            child = config.get_child_by_name(section).get_child_by_name(option)
+            value = child.get_value()
+            LOGGER.debug('Getting option %s/%s=%s', section, option, value)
+            return value
+        except gp.GPhoto2Error:
+            raise ValueError('Unknown option {}/{}'.format(section, option))
+
+    def preview(self, window, flip=True):
+        """Setup the preview.
+        """
+        self._window = window
+        self.preview_flip = flip
+
+        if self._preview_compatible:
+            if self._preview_viewfinder:
+                self.set_config_value('actions', 'viewfinder', 1)
+            self._window.show_image(self._get_preview_image())
+
+    def preview_countdown(self, timeout, alpha=80):
+        """Show a countdown of `timeout` seconds on the preview.
+        Returns when the countdown is finished.
+        """
+        timeout = int(timeout)
+        if timeout < 1:
+            raise ValueError("Start time shall be greater than 0")
+
+        shown = False
+        first_loop = True
+        timer = PoolingTimer(timeout)
+        while not timer.is_timeout():
+            remaining = int(timer.remaining() + 1)
+            if not self._overlay or remaining != timeout:
+                # Rebluid overlay only if remaining number has changed
+                self._show_overlay(str(remaining), alpha)
+                timeout = remaining
+                shown = False
+
+            updated_rect = None
+            if self._preview_compatible:
+                updated_rect = self._window.show_image(self._get_preview_image())
+            elif not shown:
+                updated_rect = self._window.show_image(self._get_preview_image())
+                shown = True  # Do not update dummy preview until next overlay update
+
+            if first_loop:
+                timer.start()  # Because first preview capture is longer than others
+                first_loop = False
+
+            pygame.event.pump()
+            if updated_rect:
+                pygame.display.update(updated_rect)
+
+        self._show_overlay(get_translated_text('smile'), alpha)
+        self._window.show_image(self._get_preview_image())
+
+    def preview_wait(self, timeout, alpha=80):
+        """Wait the given time.
+        """
+        timeout = int(timeout)
+        if timeout < 1:
+            raise ValueError("Start time shall be greater than 0")
+
+        timer = PoolingTimer(timeout)
+        if self._preview_compatible:
+            while not timer.is_timeout():
+                updated_rect = self._window.show_image(self._get_preview_image())
+                pygame.event.pump()
+                if updated_rect:
+                    pygame.display.update(updated_rect)
+        else:
+            time.sleep(timer.remaining())
+
+        self._show_overlay(get_translated_text('smile'), alpha)
+        self._window.show_image(self._get_preview_image())
+
+    def stop_preview(self):
+        """Stop the preview.
+        """
+        self._hide_overlay()
+        self._window = None
+
+    def capture(self, effect=None):
+        """Capture a new picture.
+        """
+        if self._preview_viewfinder:
+            self.set_config_value('actions', 'viewfinder', 0)
+
+        effect = str(effect).lower()
+        if effect not in self.IMAGE_EFFECTS:
+            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
+
+        if self.capture_iso != self.preview_iso:
+            self.set_config_value('imgsettings', 'iso', self.capture_iso)
+
+        self._captures.append((self._cam.capture(gp.GP_CAPTURE_IMAGE), effect))
+        time.sleep(0.3)  # Necessary to let the time for the camera to save the image
+
+        if self.capture_iso != self.preview_iso:
+            self.set_config_value('imgsettings', 'iso', self.preview_iso)
+
+        self._hide_overlay()  # If stop_preview() has not been called
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        if self._cam:
+            del self._gp_logcb  # Uninstall log callback
+            self._cam.exit()
diff -ruN ../pibooth_local_copy/pibooth/camera/hybrid.py ./pibooth/camera/hybrid.py
--- ../pibooth_local_copy/pibooth/camera/hybrid.py	1969-12-31 19:00:00
+++ ./pibooth/camera/hybrid.py	2025-05-16 14:02:41
@@ -0,0 +1,89 @@
+# -*- coding: utf-8 -*-
+
+from pibooth.camera.rpi import RpiCamera
+from pibooth.camera.opencv import CvCamera
+from pibooth.camera.gphoto import GpCamera
+
+
+class HybridRpiCamera(RpiCamera):
+
+    """Camera management using the Raspberry Pi camera for the preview (better
+    video rendering) and a gPhoto2 compatible camera for the capture (higher
+    resolution)
+    """
+
+    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
+
+    def __init__(self, rpi_camera_proxy, gp_camera_proxy):
+        super(HybridRpiCamera, self).__init__(rpi_camera_proxy)
+        self._gp_cam = GpCamera(gp_camera_proxy)
+        self._gp_cam._captures = self._captures  # Same dict for both cameras
+
+    def initialize(self, *args, **kwargs):
+        """Ensure that both cameras are initialized.
+        """
+        super(HybridRpiCamera, self).initialize(*args, **kwargs)
+        self._gp_cam.initialize(*args, **kwargs)
+
+    def _post_process_capture(self, capture_data):
+        """Rework capture data.
+
+        :param capture_data: couple (GPhotoPath, effect)
+        :type capture_data: tuple
+        """
+        return self._gp_cam._post_process_capture(capture_data)
+
+    def capture(self, effect=None):
+        """Capture a picture in a file.
+        """
+        self._gp_cam.capture(effect)
+
+        self._hide_overlay()  # If stop_preview() has not been called
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        super(HybridRpiCamera, self).quit()
+        self._gp_cam.quit()
+
+
+class HybridCvCamera(CvCamera):
+
+    """Camera management using the OpenCV camera for the preview (better
+    video rendering) and a gPhoto2 compatible camera for the capture (higher
+    resolution)
+    """
+
+    IMAGE_EFFECTS = GpCamera.IMAGE_EFFECTS
+
+    def __init__(self, cv_camera_proxy, gp_camera_proxy):
+        super(HybridCvCamera, self).__init__(cv_camera_proxy)
+        self._gp_cam = GpCamera(gp_camera_proxy)
+        self._gp_cam._captures = self._captures  # Same dict for both cameras
+
+    def initialize(self, *args, **kwargs):
+        """Ensure that both cameras are initialized.
+        """
+        super(HybridCvCamera, self).initialize(*args, **kwargs)
+        self._gp_cam.initialize(*args, **kwargs)
+
+    def _post_process_capture(self, capture_data):
+        """Rework capture data.
+
+        :param capture_data: couple (GPhotoPath, effect)
+        :type capture_data: tuple
+        """
+        return self._gp_cam._post_process_capture(capture_data)
+
+    def capture(self, effect=None):
+        """Capture a picture in a file.
+        """
+        self._gp_cam.capture(effect)
+
+        self._hide_overlay()  # If stop_preview() has not been called
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        super(HybridCvCamera, self).quit()
+        self._gp_cam.quit()
diff -ruN ../pibooth_local_copy/pibooth/camera/opencv.py ./pibooth/camera/opencv.py
--- ../pibooth_local_copy/pibooth/camera/opencv.py	1969-12-31 19:00:00
+++ ./pibooth/camera/opencv.py	2025-05-16 14:02:41
@@ -0,0 +1,239 @@
+# -*- coding: utf-8 -*-
+
+import time
+import pygame
+try:
+    import cv2
+    import numpy as np
+except ImportError:
+    cv2 = None  # OpenCV is optional
+from PIL import Image
+from pibooth.pictures import sizing
+from pibooth.utils import PoolingTimer, LOGGER
+from pibooth.language import get_translated_text
+from pibooth.camera.base import BaseCamera
+
+
+def get_cv_camera_proxy(port=None):
+    """Return camera proxy if an OpenCV compatible camera is found
+    else return None.
+
+    :param port: look on given port number
+    :type port: int
+    """
+    if not cv2:
+        return None  # OpenCV is not installed
+
+    if port is not None:
+        if not isinstance(port, int):
+            raise TypeError("Invalid OpenCV camera port '{}'".format(type(port)))
+        camera = cv2.VideoCapture(port)
+        if camera.isOpened():
+            return camera
+    else:
+        for i in range(3):  # Test 3 first ports
+            camera = cv2.VideoCapture(i)
+            if camera.isOpened():
+                return camera
+
+    return None
+
+
+class CvCamera(BaseCamera):
+
+    """OpenCV camera management.
+    """
+
+    IMAGE_EFFECTS = [u'none',
+                     u'blur',
+                     u'contour',
+                     u'detail',
+                     u'edge_enhance',
+                     u'edge_enhance_more',
+                     u'emboss',
+                     u'find_edges',
+                     u'smooth',
+                     u'smooth_more',
+                     u'sharpen']
+
+    def __init__(self, camera_proxy):
+        super(CvCamera, self).__init__(camera_proxy)
+        self._overlay_alpha = 255
+        self._preview_resolution = None
+
+    def _specific_initialization(self):
+        """Camera initialization.
+        """
+        self._preview_resolution = (self._cam.get(cv2.CAP_PROP_FRAME_WIDTH), self._cam.get(cv2.CAP_PROP_FRAME_HEIGHT))
+        LOGGER.debug("Preview resolution is %s", self._preview_resolution)
+        self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
+
+    def _show_overlay(self, text, alpha):
+        """Add an image as an overlay.
+        """
+        if self._window:  # No window means no preview displayed
+            rect = self.get_rect()
+            self._overlay_alpha = alpha
+            pil_image = self.build_overlay((rect.width, rect.height), str(text), 255)
+            # Remove alpha from overlay
+            self._overlay = cv2.cvtColor(np.array(pil_image), cv2.COLOR_RGBA2RGB)
+
+    def _rotate_image(self, image, rotation):
+        """Rotate an OpenCV image, same direction than RpiCamera.
+        """
+        if rotation == 90:
+            image = cv2.transpose(image)
+            return cv2.flip(image, 1)
+        elif rotation == 180:
+            return cv2.flip(image, -1)
+        elif rotation == 270:
+            image = cv2.transpose(image)
+            return cv2.flip(image, 0)
+        return image
+
+    def _get_preview_image(self):
+        """Capture a new preview image.
+        """
+        rect = self.get_rect()
+
+        ret, image = self._cam.read()
+        if not ret:
+            raise IOError("Can not get camera preview image")
+        image = self._rotate_image(image, self.preview_rotation)
+
+        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
+        # Crop to keep aspect ratio of the resolution
+        height, width = image.shape[:2]
+        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
+        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
+        # Resize to fit the available space in the window
+        height, width = image.shape[:2]
+        size = sizing.new_size_keep_aspect_ratio((width, height), (rect.width, rect.height), 'outer')
+        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
+
+        if self.preview_flip:
+            image = cv2.flip(image, 1)
+
+        if self._overlay is not None:
+            if self._overlay.shape != image.shape:
+                # Previous operations may create a size with one pixel gap
+                self._overlay = cv2.resize(self._overlay, (image.shape[1], image.shape[0]))
+            image = cv2.addWeighted(image, 1, self._overlay, self._overlay_alpha / 255., 0)
+        return Image.fromarray(image)
+
+    def _post_process_capture(self, capture_data):
+        """Rework capture data.
+
+        :param capture_data: couple (frame, effect)
+        :type capture_data: tuple
+        """
+        frame, effect = capture_data
+
+        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
+        # Crop to keep aspect ratio of the resolution
+        height, width = image.shape[:2]
+        cropped = sizing.new_size_by_croping_ratio((width, height), self.resolution)
+        image = image[cropped[1]:cropped[3], cropped[0]:cropped[2]]
+        # Resize to fit the resolution
+        height, width = image.shape[:2]
+        size = sizing.new_size_keep_aspect_ratio((width, height), self.resolution, 'outer')
+        image = cv2.resize(image, size, interpolation=cv2.INTER_AREA)
+
+        if self.capture_flip:
+            image = cv2.flip(image, 1)
+
+        if effect != 'none':
+            LOGGER.warning("Effect with OpenCV camera is not implemented")
+
+        return Image.fromarray(image)
+
+    def preview(self, window, flip=True):
+        """Setup the preview.
+        """
+        self._window = window
+        self.preview_flip = flip
+        self._window.show_image(self._get_preview_image())
+
+    def preview_countdown(self, timeout, alpha=80):
+        """Show a countdown of `timeout` seconds on the preview.
+        Returns when the countdown is finished.
+        """
+        timeout = int(timeout)
+        if timeout < 1:
+            raise ValueError("Start time shall be greater than 0")
+
+        timer = PoolingTimer(timeout)
+        while not timer.is_timeout():
+            remaining = int(timer.remaining() + 1)
+            if self._overlay is None or remaining != timeout:
+                # Rebluid overlay only if remaining number has changed
+                self._show_overlay(str(remaining), alpha)
+                timeout = remaining
+
+            updated_rect = self._window.show_image(self._get_preview_image())
+            pygame.event.pump()
+            if updated_rect:
+                pygame.display.update(updated_rect)
+
+        self._show_overlay(get_translated_text('smile'), alpha)
+        self._window.show_image(self._get_preview_image())
+
+    def preview_wait(self, timeout, alpha=80):
+        """Wait the given time.
+        """
+        timeout = int(timeout)
+        if timeout < 1:
+            raise ValueError("Start time shall be greater than 0")
+
+        timer = PoolingTimer(timeout)
+        while not timer.is_timeout():
+            updated_rect = self._window.show_image(self._get_preview_image())
+            pygame.event.pump()
+            if updated_rect:
+                pygame.display.update(updated_rect)
+
+        self._show_overlay(get_translated_text('smile'), alpha)
+        self._window.show_image(self._get_preview_image())
+
+    def stop_preview(self):
+        """Stop the preview.
+        """
+        self._hide_overlay()
+        self._window = None
+
+    def capture(self, effect=None):
+        """Capture a new picture.
+        """
+        effect = str(effect).lower()
+        if effect not in self.IMAGE_EFFECTS:
+            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
+
+        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self.resolution[0])
+        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self.resolution[1])
+
+        if self.capture_iso != self.preview_iso:
+            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.capture_iso)
+
+        LOGGER.debug("Taking capture at resolution %s", self.resolution)
+        ret, image = self._cam.read()
+        if not ret:
+            raise IOError("Can not capture frame")
+        image = self._rotate_image(image, self.capture_rotation)
+
+        LOGGER.debug("Putting preview resolution back to %s", self._preview_resolution)
+        self._cam.set(cv2.CAP_PROP_FRAME_WIDTH, self._preview_resolution[0])
+        self._cam.set(cv2.CAP_PROP_FRAME_HEIGHT, self._preview_resolution[1])
+
+        if self.capture_iso != self.preview_iso:
+            self._cam.set(cv2.CAP_PROP_ISO_SPEED, self.preview_iso)
+
+        self._captures.append((image, effect))
+        time.sleep(0.5)  # To let time to see "Smile"
+
+        self._hide_overlay()  # If stop_preview() has not been called
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        if self._cam:
+            self._cam.release()
diff -ruN ../pibooth_local_copy/pibooth/camera/rpi.py ./pibooth/camera/rpi.py
--- ../pibooth_local_copy/pibooth/camera/rpi.py	1969-12-31 19:00:00
+++ ./pibooth/camera/rpi.py	2025-05-16 14:02:41
@@ -0,0 +1,169 @@
+# -*- coding: utf-8 -*-
+
+import time
+import subprocess
+from io import BytesIO
+from PIL import Image
+try:
+    import picamera
+except ImportError:
+    picamera = None  # picamera is optional
+from pibooth.language import get_translated_text
+from pibooth.camera.base import BaseCamera
+
+
+def get_rpi_camera_proxy(port=None):
+    """Return camera proxy if a Raspberry Pi compatible camera is found
+    else return None.
+
+    :param port: look on given port number
+    :type port: int
+    """
+    if not picamera:
+        return None  # picamera is not installed
+    try:
+        process = subprocess.Popen(['vcgencmd', 'get_camera'],
+                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
+        stdout, _stderr = process.communicate()
+        if stdout and u'detected=1' in stdout.decode('utf-8'):
+            if port is not None:
+                return picamera.PiCamera(camera_num=port)
+            return picamera.PiCamera()
+    except OSError:
+        pass
+    return None
+
+
+class RpiCamera(BaseCamera):
+
+    """Camera management
+    """
+
+    if picamera:
+        IMAGE_EFFECTS = list(picamera.PiCamera.IMAGE_EFFECTS.keys())
+    else:
+        IMAGE_EFFECTS = []
+
+    def _specific_initialization(self):
+        """Camera initialization.
+        """
+        self._cam.framerate = 15  # Slower is necessary for high-resolution
+        self._cam.video_stabilization = True
+        self._cam.vflip = False
+        self._cam.hflip = self.capture_flip
+        self._cam.resolution = self.resolution
+        self._cam.iso = self.preview_iso
+        self._cam.rotation = self.preview_rotation
+
+    def _show_overlay(self, text, alpha):
+        """Add an image as an overlay.
+        """
+        if self._window:  # No window means no preview displayed
+            rect = self.get_rect(self._cam.MAX_RESOLUTION)
+
+            # Create an image padded to the required size (required by picamera)
+            size = (((rect.width + 31) // 32) * 32, ((rect.height + 15) // 16) * 16)
+
+            image = self.build_overlay(size, str(text), alpha)
+            self._overlay = self._cam.add_overlay(image.tobytes(), image.size, layer=3,
+                                                  window=tuple(rect), fullscreen=False)
+
+    def _hide_overlay(self):
+        """Remove any existing overlay.
+        """
+        if self._overlay:
+            self._cam.remove_overlay(self._overlay)
+            self._overlay = None
+
+    def _post_process_capture(self, capture_data):
+        """Rework capture data.
+
+        :param capture_data: binary data as stream
+        :type capture_data: :py:class:`io.BytesIO`
+        """
+        # "Rewind" the stream to the beginning so we can read its content
+        capture_data.seek(0)
+        return Image.open(capture_data)
+
+    def preview(self, window, flip=True):
+        """Display a preview on the given Rect (flip if necessary).
+        """
+        if self._cam.preview is not None:
+            # Already running
+            return
+
+        self._window = window
+        rect = self.get_rect(self._cam.MAX_RESOLUTION)
+        if self._cam.hflip:
+            if flip:
+                # Don't flip again, already done at init
+                flip = False
+            else:
+                # Flip again because flipped once at init
+                flip = True
+        self._cam.start_preview(resolution=(rect.width, rect.height), hflip=flip,
+                                fullscreen=False, window=tuple(rect))
+
+    def preview_countdown(self, timeout, alpha=60):
+        """Show a countdown of `timeout` seconds on the preview.
+        Returns when the countdown is finished.
+        """
+        timeout = int(timeout)
+        if timeout < 1:
+            raise ValueError("Start time shall be greater than 0")
+        if not self._cam.preview:
+            raise EnvironmentError("Preview shall be started first")
+
+        while timeout > 0:
+            self._show_overlay(timeout, alpha)
+            time.sleep(1)
+            timeout -= 1
+            self._hide_overlay()
+
+        self._show_overlay(get_translated_text('smile'), alpha)
+
+    def preview_wait(self, timeout, alpha=60):
+        """Wait the given time.
+        """
+        time.sleep(timeout)
+        self._show_overlay(get_translated_text('smile'), alpha)
+
+    def stop_preview(self):
+        """Stop the preview.
+        """
+        self._hide_overlay()
+        self._cam.stop_preview()
+        self._window = None
+
+    def capture(self, effect=None):
+        """Capture a new picture in a file.
+        """
+        effect = str(effect).lower()
+        if effect not in self.IMAGE_EFFECTS:
+            raise ValueError("Invalid capture effect '{}' (choose among {})".format(effect, self.IMAGE_EFFECTS))
+
+        try:
+            if self.capture_iso != self.preview_iso:
+                self._cam.iso = self.capture_iso
+            if self.capture_rotation != self.preview_rotation:
+                self._cam.rotation = self.capture_rotation
+
+            stream = BytesIO()
+            self._cam.image_effect = effect
+            self._cam.capture(stream, format='jpeg')
+
+            if self.capture_iso != self.preview_iso:
+                self._cam.iso = self.preview_iso
+            if self.capture_rotation != self.preview_rotation:
+                self._cam.rotation = self.preview_rotation
+
+            self._captures.append(stream)
+        finally:
+            self._cam.image_effect = 'none'
+
+        self._hide_overlay()  # If stop_preview() has not been called
+
+    def quit(self):
+        """Close the camera driver, it's definitive.
+        """
+        self._cam.close()
diff -ruN ../pibooth_local_copy/pibooth/config/__init__.py ./pibooth/config/__init__.py
--- ../pibooth_local_copy/pibooth/config/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/config/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,4 @@
+# -*- coding: utf-8 -*-
+
+from pibooth.config.parser import PiConfigParser
+from pibooth.config.menu import PiConfigMenu
diff -ruN ../pibooth_local_copy/pibooth/config/menu.py ./pibooth/config/menu.py
--- ../pibooth_local_copy/pibooth/config/menu.py	1969-12-31 19:00:00
+++ ./pibooth/config/menu.py	2025-05-16 14:02:41
@@ -0,0 +1,377 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth config menu.
+"""
+
+import pygame
+import pygame_menu as pgm
+import pygame_vkeyboard as vkb
+import pibooth
+from pibooth import fonts
+from pibooth.utils import LOGGER, get_event_pos
+from pibooth.config.parser import DEFAULT
+
+
+pgm.controls.KEY_BACK = pygame.K_ESCAPE
+
+THEME_WHITE = pgm.themes.Theme(
+    background_color=(255, 255, 255),
+    scrollbar_thick=14,
+    scrollbar_slider_pad=2,
+    scrollbar_slider_color=(35, 149, 135),
+    selection_color=(29, 120, 107),
+    title_background_color=(35, 149, 135),
+    title_font=fonts.get_filename("Monoid-Regular"),
+    title_font_size=33,
+    title_font_color=(255, 255, 255),
+    widget_margin=(0, 20),
+    widget_font=fonts.get_filename("Monoid-Retina"),
+    widget_font_size=30,
+    widget_font_color=(0, 0, 0),
+)
+
+SUBTHEME1_WHITE = THEME_WHITE.copy()
+SUBTHEME1_WHITE.background_color = (255, 255, 255)
+SUBTHEME1_WHITE.scrollbar_slider_color = (252, 151, 0)
+SUBTHEME1_WHITE.selection_color = (241, 125, 1)
+SUBTHEME1_WHITE.title_background_color = (252, 151, 0)
+SUBTHEME1_WHITE.widget_alignment = pgm.locals.ALIGN_LEFT
+SUBTHEME1_WHITE.widget_margin = (40, 10)
+SUBTHEME1_WHITE.widget_font_size = 18
+
+SUBTHEME2_WHITE = SUBTHEME1_WHITE.copy()
+SUBTHEME2_WHITE.scrollbar_slider_color = (152, 43, 175)
+SUBTHEME2_WHITE.selection_color = (120, 36, 161)
+SUBTHEME2_WHITE.title_background_color = (152, 43, 175)
+SUBTHEME2_WHITE.widget_alignment = pgm.locals.ALIGN_CENTER
+SUBTHEME2_WHITE.widget_margin = (0, 20)
+
+THEME_DARK = THEME_WHITE.copy()
+THEME_DARK.background_color = (40, 41, 35)
+THEME_DARK.cursor_color = (255, 255, 255)
+THEME_DARK.widget_font_color = (255, 255, 255)
+
+SUBTHEME1_DARK = SUBTHEME1_WHITE.copy()
+SUBTHEME1_DARK.background_color = (40, 41, 35)
+SUBTHEME1_DARK.cursor_color = (255, 255, 255)
+SUBTHEME1_DARK.widget_font_color = (255, 255, 255)
+
+SUBTHEME2_DARK = SUBTHEME2_WHITE.copy()
+SUBTHEME2_DARK.background_color = (40, 41, 35)
+SUBTHEME2_DARK.cursor_color = (255, 255, 255)
+SUBTHEME2_DARK.widget_font_color = (255, 255, 255)
+
+
+def _find(choices, value):
+    """Find index for the given value in choices.
+    """
+    i = 0
+    for val in choices:
+        if val[0] == value:
+            return i
+        i += 1
+    return 0
+
+
+def _counters(counters):
+    """Return the formatted text for counters.
+    """
+    long_name = max(counters.names(), key=len)
+    pattern = '{:.<' + str(max(len(long_name) + 2, 25)) + '} {: >4}'
+    return [pattern.format(name.replace("_", " ").capitalize(), counters[name]) for name in counters]
+
+
+class PiConfigMenu(object):
+
+    def __init__(self, plugins_manager, configuration, application, window, onclose=None):
+        self.app = application
+        self.win = window
+        self.cfg = configuration
+        self.pm = plugins_manager
+        self._changed = False
+        self._close_callback = onclose
+
+        size = self.win.get_rect().size
+        self.size = (min(600, size[0]), min(400, size[1]))
+        self._main_menu = pgm.Menu(title="Settings v{}".format(pibooth.__version__),
+                                   width=self.size[0],
+                                   height=self.size[1],
+                                   theme=THEME_DARK,
+                                   touchscreen=True,
+                                   onclose=self._on_close)
+        self._main_menu.disable()
+        self._main_menu.add.vertical_margin(20)
+
+        self._keyboard = vkb.VKeyboard(self.win.surface,
+                                       self._on_keyboard_event,
+                                       vkb.VKeyboardLayout(vkb.VKeyboardLayout.QWERTY),
+                                       renderer=vkb.VKeyboardRenderer.DARK,
+                                       show_text=True,
+                                       joystick_navigation=True)
+        self._keyboard.disable()
+
+        for name in DEFAULT:
+            submenu = self._build_submenu(name)
+            if len(submenu._widgets) > 2:
+                self._main_menu.add.button(submenu.get_title(), submenu)
+        self._main_menu.add.button('Exit', self._on_exit)
+        self._main_menu.add.vertical_margin(20)
+
+    def _build_submenu(self, section):
+        """Build sub-menu"""
+        length = 0
+        for name, option in DEFAULT[section].items():
+            if option[2] and length < len(option[2]):
+                length = len(option[2])
+        pattern = '{:.<' + str(max(length + 2, 25)) + '} '
+
+        menu = pgm.Menu(title=section.capitalize(),
+                        width=self.size[0],
+                        height=self.size[1],
+                        theme=SUBTHEME1_DARK,
+                        touchscreen=True)
+        menu.add.vertical_margin(20)
+
+        for name, option in DEFAULT[section].items():
+            if option[2]:
+                title = pattern.format(option[2])
+                if isinstance(option[3], str):
+                    menu.add.text_input(title,
+                                        onchange=self._on_text_changed,
+                                        default=self.cfg.get(section, name).strip('"'),
+                                        # Parameters passed to callback:
+                                        section=section,
+                                        option=name)
+                elif isinstance(option[3], (list, tuple)) and len(option[3]) == 3\
+                        and all(isinstance(i, int) for i in option[3]):
+                    menu.add.color_input(title,
+                                         "rgb",
+                                         default=self.cfg.gettyped(section, name),
+                                         input_separator=',',
+                                         onchange=self._on_color_changed,
+                                         previsualization_width=1,
+                                         # Parameters passed to callback:
+                                         section=section,
+                                         option=name)
+                else:
+                    values = [(v,) for v in option[3]]
+                    menu.add.selector(title,
+                                      values,
+                                      onchange=self._on_selector_changed,
+                                      default=_find(values, self.cfg.get(section, name)),
+                                      # Parameters passed to callback:
+                                      section=section,
+                                      option=name)
+
+        if section.lower() == 'general':
+            menu.add.vertical_margin(40)
+            menu.add.button("View counters",
+                            self._build_submenu_counters("Counters"),
+                            margin=(self.size[0] // 2 - 100, 0))
+            menu.add.vertical_margin(20)
+            if self.pm.list_external_plugins():
+                menu.add.button("Manage plugins",
+                                self._build_submenu_plugins("Plugins"),
+                                margin=(self.size[0] // 2 - 105, 0))
+
+        menu.add.vertical_margin(20)
+        return menu
+
+    def _build_submenu_counters(self, title):
+        menu = pgm.Menu(title=title.capitalize(),
+                        width=self.size[0],
+                        height=self.size[1],
+                        theme=SUBTHEME2_DARK,
+                        touchscreen=True)
+        labels = []
+        for text in _counters(self.app.count):
+            labels.append(menu.add.label(text))
+        menu.add.vertical_margin(40)
+        menu.add.button("Reset all", self._on_counters_reset, labels)
+        return menu
+
+    def _build_submenu_plugins(self, title):
+        menu = pgm.Menu(title=title.capitalize(),
+                        width=self.size[0],
+                        height=self.size[1],
+                        theme=SUBTHEME2_DARK,
+                        touchscreen=True)
+
+        plugins = self.pm.list_external_plugins()
+        long_name = max([self.pm.get_friendly_name(p) for p in plugins], key=len)
+        pattern = '{:.<' + str(max(len(long_name) + 2, 25)) + '}'
+
+        for plugin in plugins:
+            enabled = self.pm.is_registered(plugin)
+            menu.add.toggle_switch(pattern.format(self.pm.get_friendly_name(plugin)),
+                                   enabled,
+                                   state_color=((178, 178, 178), SUBTHEME2_DARK.title_background_color),
+                                   onchange=self._on_plugin_toggled,
+                                   # Parameters passed to callback:
+                                   section='GENERAL',
+                                   option='plugins_disabled',
+                                   plugin=plugin)
+        return menu
+
+    def _on_keyboard_event(self, text):
+        """Called after each option changed.
+        """
+        if self._main_menu.is_enabled():  # Menu may have been closed
+            selected = self._main_menu.get_current().get_selected_widget()
+            if isinstance(selected, pgm.widgets.TextInput):
+                if isinstance(selected, pgm.widgets.ColorInput):
+                    try:
+                        selected.set_value(tuple([int(c) for c in text.split(',')]))
+                    except Exception as ex:
+                        LOGGER.error("Invalid color value '%s' (%s)", text, ex)
+                else:
+                    selected.set_value(text)
+                selected.change()
+
+    def _on_selector_changed(self, value, **kwargs):
+        """Called after each option changed.
+        """
+        if self._main_menu.is_enabled():  # Menu may have been closed
+            self.cfg.set(kwargs['section'], kwargs['option'], str(value[0][0]))
+            self._changed = True
+
+    def _on_text_changed(self, value, **kwargs):
+        """Called after each text input changed.
+        """
+        if self._main_menu.is_enabled():  # Menu may have been closed
+            self.cfg.set(kwargs['section'], kwargs['option'], '"{}"'.format(str(value)))
+            self._changed = True
+
+    def _on_color_changed(self, value, **kwargs):
+        """Called after each text input changed.
+        """
+        if self._main_menu.is_enabled():  # Menu may have been closed
+            self.cfg.set(kwargs['section'], kwargs['option'], str(value))
+            self._changed = True
+
+    def _on_counters_reset(self, labels):
+        """Called when the counters are reset.
+        """
+        self.app.count.reset()
+        for label, text in zip(labels, _counters(self.app.count)):
+            label.set_title(text)
+
+    def _on_plugin_toggled(self, activated, **kwargs):
+        """Called when a plugin active state is toggled.
+        """
+        plugin = kwargs['plugin']
+        disabled = self.cfg.gettuple(kwargs['section'], kwargs['option'], str)
+        if activated and not self.pm.is_registered(plugin):
+            self.pm.register(plugin)
+            plugin_name = self.pm.get_name(plugin)
+            disabled = tuple([name for name in disabled if plugin_name != name])
+            self._changed = True
+
+            # Because no hook is called for plugins disabled at pibooth startup, need to
+            # ensure that mandatory hooks have been called when enabling a plugin
+            if 'pibooth_configure' not in self.pm.get_calls_history(plugin):
+                hook = self.pm.subset_hook_caller_for_plugin('pibooth_configure', plugin)
+                hook(cfg=self.cfg)
+            if 'pibooth_startup' not in self.pm.get_calls_history(plugin):
+                hook = self.pm.subset_hook_caller_for_plugin('pibooth_startup', plugin)
+                hook(cfg=self.cfg, app=self.app)
+
+        elif not activated and self.pm.is_registered(plugin):
+            plugin_name = self.pm.get_name(plugin)
+            self.pm.unregister(plugin)
+            if plugin_name not in disabled:
+                disabled += (plugin_name,)
+                self._changed = True
+
+        if not disabled:
+            disabled = ''
+        self.cfg.set(kwargs['section'], kwargs['option'], str(disabled))
+
+    def _on_close(self):
+        """Called when the menu is closed.
+        """
+        self._main_menu.disable()
+        if self._changed:
+            self.cfg.save()
+            self._changed = False
+        if self._close_callback:
+            self._close_callback()
+
+    def _on_exit(self):
+        """Called when the application is exited by menu.
+        """
+        self._on_close()
+        exit(0)
+
+    def show(self):
+        """Show the menu.
+        """
+        self._main_menu.enable()
+
+    def is_shown(self):
+        """Return True if the menu is shown.
+        """
+        return self._main_menu.is_enabled()
+
+    def create_click_event(self):
+        """Create a pygame event to click on the currently selected
+        widget on the menu. If the widget is a button, ENTER event
+        is created, else LEFT event is created.
+        """
+        if isinstance(self._main_menu.get_current().get_selected_widget(), pgm.widgets.Button):
+            event = pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_APPLY,
+                                       unicode='\r', mod=0, scancode=36,
+                                       window=None, test=True)
+        else:
+            event = pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_RIGHT,
+                                       unicode=u'\uf703', mod=0, scancode=124,
+                                       window=None, test=True)
+        return event
+
+    def create_next_event(self):
+        """Create a pygame event to select the next widget.
+        """
+        return pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_MOVE_UP,
+                                  unicode=u'\uf701', mod=0, scancode=125,
+                                  window=None, test=True)
+
+    def create_back_event(self):
+        """Create a pygame event to back to the previous menu.
+        """
+        return pygame.event.Event(pygame.KEYDOWN, key=pgm.controls.KEY_BACK,
+                                  unicode=u'\x1b', mod=0, scancode=53,
+                                  window=None, test=True)
+
+    def process(self, events):
+        """Process the events related to the menu.
+        """
+        if not self._keyboard.is_enabled():
+            self._main_menu.update(events)
+            if self._main_menu.is_enabled():  # Menu may have been closed
+                self._main_menu.draw(self.win.surface)
+                selected = self._main_menu.get_current().get_selected_widget()
+                if isinstance(selected, pgm.widgets.TextInput) and self.cfg.getboolean('GENERAL', 'vkeyboard'):
+                    for event in events:
+                        if (event.type == pygame.MOUSEBUTTONDOWN or event.type == pygame.FINGERDOWN)\
+                                and selected.get_scrollarea().collide(selected, event):
+                            self._keyboard.enable()
+                            if isinstance(selected, pgm.widgets.ColorInput):
+                                self._keyboard.set_text(",".join([str(c) for c in selected.get_value()]))
+                            else:
+                                self._keyboard.set_text(selected.get_value())
+                            return
+        else:
+            for event in events:
+                if (event.type == pygame.MOUSEBUTTONDOWN and event.button in (1, 2, 3)
+                        or event.type == pygame.FINGERDOWN)\
+                        and not self._keyboard.get_rect().collidepoint(get_event_pos(self.win.display_size, event)):
+                    self._keyboard.disable()
+                    self._keyboard.draw()
+                    return
+                elif event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:
+                    self._keyboard.disable()
+                    self._keyboard.draw()
+                    return
+
+            self._keyboard.update(events)
+            self._keyboard.draw(self.win.surface)
diff -ruN ../pibooth_local_copy/pibooth/config/parser.py ./pibooth/config/parser.py
--- ../pibooth_local_copy/pibooth/config/parser.py	1969-12-31 19:00:00
+++ ./pibooth/config/parser.py	2025-05-16 14:02:41
@@ -0,0 +1,533 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth configuration.
+"""
+
+import io
+import ast
+import os
+import os.path as osp
+import itertools
+import inspect
+from configparser import RawConfigParser
+from collections import OrderedDict as odict
+from pibooth.utils import LOGGER, open_text_editor
+from pibooth import language
+
+
+def values_list_repr(values):
+    """Concatenate a list of values to a readable string.
+    """
+    return "'{}' or '{}'".format("', '".join([str(i) for i in values[:-1]]), values[-1])
+
+
+DEFAULT = odict((
+    ("GENERAL",
+        odict((
+            ("language",
+                ("en",
+                 "User interface language: {}".format(values_list_repr(language.get_supported_languages())),
+                 "UI language", language.get_supported_languages())),
+            ("directory",
+                ("~/Pictures/pibooth",
+                 "Path to save pictures (list of quoted paths accepted)",
+                 None, None)),
+            ("autostart",
+                (False,
+                 "Start pibooth at Raspberry Pi startup",
+                 "Auto-start", ['True', 'False'])),
+            ("autostart_delay",
+                (0,
+                 "How long to wait in seconds before start pibooth at Raspberry Pi startup",
+                 "Auto-start delay", [str(i) for i in range(0, 121, 5)])),
+            ("debug",
+                (False,
+                 "In debug mode, exceptions are not caught, logs are more verbose, pictures are cleared at startup",
+                 "Debug mode", ['True', 'False'])),
+            ("plugins",
+                ('',
+                 "Path to custom plugin(s) not installed with pip (list of quoted paths accepted)",
+                 None, None)),
+            ("plugins_disabled",
+                ('',
+                 "Plugin names to be disabled after startup (list of quoted names accepted)",
+                 None, None)),
+            ("vkeyboard",
+                (False,
+                 "Enable a virtual keyboard in the settings interface",
+                 "Virtual keyboard", ['True', 'False'])),
+        ))
+     ),
+    ("WINDOW",
+        odict((
+            ("size",
+                ((800, 480),
+                 "The (width, height) of the display window or 'fullscreen'",
+                 'Startup size', ['(800, 480)', 'fullscreen'])),
+            ("background",
+                ((0, 0, 0),
+                 "Background RGB color or image path",
+                 None, None)),
+            ("font",
+                ('Amatic-Bold',
+                 "Font name or file path used for app texts",
+                 None, None)),
+            ("text_color",
+                ((255, 255, 255),
+                 "Text RGB color",
+                 "Text RGB color", (255, 255, 255))),
+            ("flash",
+                (True,
+                 "Blinking background when a capture is taken",
+                 "Flash on capture", ['True', 'False'])),
+            ("animate",
+                (False,
+                 "Animate the last taken picture by displaying captures one by one",
+                 "Animated picture", ['True', 'False'])),
+            ("animate_delay",
+                (0.2,
+                 "How long is displayed the capture in seconds before switching to the next one",
+                 None, None)),
+            ("finish_picture_delay",
+                (0,
+                 "On 'finish' state: how long is displayed the final picture in seconds (0 if never shown)",
+                 "Finish picture display time", [str(i) for i in range(0, 121, 5)])),
+            ("wait_picture_delay",
+                (-1,
+                 "On 'wait' state: how long is displayed the final picture in seconds before being hidden (-1 if never hidden)",
+                 "Wait picture display time", ['-1'] + [str(i) for i in range(0, 121, 5)])),
+            ("chosen_delay",
+                (4,
+                 "How long is displayed the 'chosen' state:  (0 if never shown)",
+                 "Chosen layout display time", [str(i) for i in range(0, 10)])),
+            ("arrows",
+                ('bottom',
+                 "Show arrows to indicate physical buttons: 'bottom', 'top', 'hidden' or 'touchscreen'",
+                 "Show button arrows", ['bottom', 'top', 'hidden', 'touchscreen'])),
+            ("arrows_x_offset",
+                (0,
+                 "Apply horizontal offset to arrows position",
+                 None, None)),
+            ("preview_delay",
+                (3,
+                 "How long is the preview in seconds",
+                 "Preview delay", [str(i) for i in range(1, 21)])),
+            ("preview_countdown",
+                (True,
+                 "Show a countdown timer during the preview",
+                 "Preview countdown", ['True', 'False'])),
+            ("preview_stop_on_capture",
+                (False,
+                 "Stop the preview before taking the capture",
+                 None, None)),
+        ))
+     ),
+    ("PICTURE",
+        odict((
+            ("orientation",
+                ("auto",
+                 "Orientation of the final picture: 'auto', 'portrait' or 'landscape'",
+                 "Orientation", ['auto', 'portrait', 'landscape'])),
+            ("captures",
+                ((4, 1),
+                 "Possible choice(s) of captures numbers (numbers between 1 to 4)",
+                 "Number of captures", ['1', '2', '3', '4'] + [str(val) for val in itertools.permutations(range(1, 5), 2)])),
+            ("captures_effects",
+                ("none",
+                 "Effect applied to the captures (list of quoted names accepted)",
+                 None, None)),
+            ("captures_cropping",
+                (False,
+                 "Crop each capture border in order to fit the paper size",
+                 "Crop captures",  ['True', 'False'])),
+            ("margin_thick",
+                (100,
+                 "Thick (in pixels) between captures and picture borders/texts",
+                 "Borders width", [str(i) for i in range(0, 210, 10)])),
+            ("footer_text1",
+                ("Footer 1",
+                 "Main text displayed",
+                 "Title", "")),
+            ("footer_text2",
+                ("Footer 2",
+                 "Secondary text displayed",
+                 "Sub-title", "")),
+            ("text_colors",
+                ((0, 0, 0),
+                 "RGB colors used for footer texts (list of tuples accepted)",
+                 None, None)),
+            ("text_fonts",
+                (('Amatic-Bold', 'AmaticSC-Regular'),
+                 "Fonts name or file path used for footer texts (list of quoted names accepted)",
+                 None, None)),
+            ("text_alignments",
+                ('center',
+                 "Alignments used for footer texts: 'left', 'center' or 'right' (list of quoted names accepted)",
+                 None, None)),
+            ("overlays",
+                ('',
+                 "Overlay path (PNG file) with same aspect ratio than final picture (list of quoted paths accepted)",
+                 None, None)),
+            ("backgrounds",
+                ((255, 255, 255),
+                 "Background RGB color or image path (list of tuples or quoted paths accepted)",
+                 None, None)),
+        ))
+     ),
+    ("CAMERA",
+        odict((
+            ("iso",
+                (100,
+                 "Adjust ISO for lighting issues, can be different for preview and capture (list of integers accepted)",
+                 None, None)),
+            ("flip",
+                (False,
+                 "Flip horizontally the capture",
+                 None, None)),
+            ("rotation",
+                (0,
+                 "Rotation of the camera: 0, 90, 180 or 270, can be different for preview and capture (list of integers accepted)",
+                 None, None)),
+            ("resolution",
+                ((1934, 2464),
+                 "Resolution for camera captures (preview will have same aspect ratio)",
+                 None, None)),
+            ("delete_internal_memory",
+                (False,
+                 "Delete captures from camera internal memory (when applicable)",
+                 None, None)),
+        ))
+     ),
+    ("PRINTER",
+        odict((
+            ("printer_name",
+                ("default",
+                 "Name of the printer defined in CUPS (or use the 'default' one)",
+                 None, None)),
+            ("printer_options",
+                ({},
+                 "Print options passed to the printer, shall be a valid Python dictionary",
+                 None, None)),
+            ("printer_delay",
+                (10,
+                 "How long is the print view in seconds (0 to skip it)",
+                 "Time to show print screen", [str(i) for i in range(0, 21)])),
+            ("auto_print",
+                (0,
+                 "Number of pages automatically sent to the printer (or use 'max' to reach max duplicate)",
+                 "Automatically printed pages", [str(i) for i in range(0, 11)] + ['max'])),
+            ("max_pages",
+                (-1,
+                 "Maximum number of printed pages before warning on paper/ink levels (-1 = infinite)",
+                 'Maximum of printed pages', [str(i) for i in range(-1, 1000)])),
+            ("max_duplicates",
+                (3,
+                 "Maximum number of duplicate pages sent to the printer (avoid paper waste)",
+                 'Maximum of printed duplicates', [str(i) for i in range(0, 10)])),
+            ("pictures_per_page",
+                (1,
+                 "Print 1, 2, 3 or 4 picture copies per page",
+                 'Number of copies per page', [str(i) for i in range(1, 5)])),
+        ))
+     ),
+    ("CONTROLS",
+        odict((
+            ("debounce_delay",
+                (0.3,
+                 "How long to press a single hardware button in seconds",
+                 None, None)),
+            ("multi_press_delay",
+                (0.5,
+                 "How long to press multiple hardware buttons in seconds",
+                 None, None)),
+            ("picture_btn_pin",
+                (11,
+                 "Physical GPIO IN pin to take a picture",
+                 None, None)),
+            ("picture_led_pin",
+                (7,
+                 "Physical GPIO OUT pin to light a LED when picture button is pressed",
+                 None, None)),
+            ("print_btn_pin",
+                (13,
+                 "Physical GPIO IN pin to print a picture",
+                 None, None)),
+            ("print_led_pin",
+                (15,
+                 "Physical GPIO OUT pin to light a LED when print button is pressed",
+                 None, None)),
+        ))
+     ),
+))
+
+
+class PiConfigParser(RawConfigParser):
+
+    """Class to parse and store the configuration values.
+    The following attributes are available for use in plugins:
+
+    :attr filename: absolute path to the laoded config file
+    :type filename: str
+    """
+
+    def __init__(self, filename, plugin_manager, load=True):
+        super(PiConfigParser, self).__init__()
+        self._pm = plugin_manager
+        self.filename = osp.abspath(osp.expanduser(filename))
+
+        if osp.isfile(self.filename) and load:
+            self.load()
+
+    def _get_abs_path(self, path):
+        """Return absolute path. In case of relative path given, the absolute
+        one is created using config file path as reference path.
+        """
+        if not path:  # Empty string, don't process it as it is not a path
+            return path
+        path = osp.expanduser(path)
+        if not osp.isabs(path):
+            path = osp.join(osp.relpath(osp.dirname(self.filename), '.'), path)
+        return osp.abspath(path)
+
+    def save(self, default=False):
+        """Save the current or default values into the configuration file.
+        """
+        LOGGER.info("Generate the configuration file in '%s'", self.filename)
+
+        dirname = osp.dirname(self.filename)
+        if not osp.isdir(dirname):
+            os.makedirs(dirname)
+
+        with io.open(self.filename, 'w', encoding="utf-8") as fp:
+            for section, options in DEFAULT.items():
+                fp.write("[{}]\n".format(section))
+                for name, value in options.items():
+                    if default:
+                        val = value[0]
+                    else:
+                        val = self.get(section, name)
+                    fp.write("# {}\n{} = {}\n\n".format(value[1], name, val))
+
+        self.handle_autostart()
+
+    def load(self):
+        """Load configuration from file.
+        """
+        self.read(self.filename, encoding="utf-8")
+        self.handle_autostart()
+
+    def edit(self):
+        """Open a text editor to edit the configuration.
+        """
+        if open_text_editor(self.filename):
+            # Reload config to check if autostart has changed
+            self.load()
+
+    def handle_autostart(self):
+        """Handle desktop file to start pibooth at the Raspberry Pi startup.
+        """
+        filename = osp.expanduser('~/.config/autostart/pibooth.desktop')
+        dirname = osp.dirname(filename)
+        enable = self.getboolean('GENERAL', 'autostart')
+        delay = self.getint('GENERAL', 'autostart_delay')
+        if enable:
+            regenerate = True
+            if osp.isfile(filename):
+                with open(filename, 'r') as fp:
+                    txt = fp.read()
+                    if delay > 0 and f"sleep {delay}" in txt or delay <= 0 and "sleep" not in txt:
+                        regenerate = False
+
+            if regenerate:
+                if not osp.isdir(dirname):
+                    os.makedirs(dirname)
+
+                LOGGER.info("Generate the auto-startup file in '%s'", dirname)
+                with open(filename, 'w') as fp:
+                    fp.write("[Desktop Entry]\n")
+                    fp.write("Name=pibooth\n")
+                    if delay > 0:
+                        fp.write(f"Exec=bash -c \"sleep {delay} && pibooth\"\n")
+                    else:
+                        fp.write("Exec=pibooth\n")
+                    fp.write("Type=application\n")
+
+        elif not enable and osp.isfile(filename):
+            LOGGER.info("Remove the auto-startup file in '%s'", dirname)
+            os.remove(filename)
+
+    def join_path(self, *names):
+        """Return the directory path of the configuration file
+        and join it the given names.
+
+        :param names: names to join to the directory path
+        :type names: str
+        """
+        return osp.join(osp.dirname(self.filename), *names)
+
+    def add_option(self, section, option, default, description, menu_name=None, menu_choices=None):
+        """Add a new option to the configuration and defines its default value.
+
+        :param section: section in which the option is declared
+        :type section: str
+        :param option: option name
+        :type option: str
+        :param default: default value of the option
+        :type default: any
+        :param description: description to put in the configuration
+        :type description: str
+        :param menu_name: option label on graphical menu (hidden if None)
+        :type menu_name: str
+        :param menu_choices: option possible choices on graphical menu
+        :type menu_choices: any
+        """
+        assert section, "Section name can not be empty string"
+        assert option, "Option name can not be empty string"
+        assert description, "Description can not be empty string"
+
+        # Find the caller plugin
+        stack = inspect.stack()
+        if len(stack) < 2:
+            plugin_name = "Unknown"
+        else:
+            plugin = inspect.getmodule(inspect.stack()[1][0])
+            plugin_name = self._pm.get_friendly_name(plugin, False)
+
+        # Check that the option is not already created
+        if section in DEFAULT and option in DEFAULT[section]:
+            raise ValueError("The plugin '{}' try to define the option [{}][{}] "
+                             "which is already defined.".format(plugin_name, section, option))
+
+        # Add the option to the default dictionary
+        description = "{}\n# Required by '{}' plugin".format(description, plugin_name)
+        DEFAULT.setdefault(section, odict())[option] = (default, description, menu_name, menu_choices)
+
+    def get(self, section, option, **kwargs):
+        """Get a value from config. Return the default value if the section
+        or option is not defined.
+
+        :param section: config section name
+        :type section: str
+        :param option: option name
+        :type option: str
+
+        :return: value
+        :rtype: str
+        """
+        if self.has_section(section) and self.has_option(section, option):
+            return super(PiConfigParser, self).get(section, option, **kwargs)
+        return str(DEFAULT[section][option][0])
+
+    def set(self, section, option, value=None):
+        """Set a value to config. Create the section if it is not defined.
+
+        :param section: config section name
+        :type section: str
+        :param option: option name
+        :type option: str
+        :param value: value to set
+        :type value: str
+        """
+        if not self.has_section(section):
+            self.add_section(section)
+        super(PiConfigParser, self).set(section, option, value)
+
+    def gettyped(self, section, option):
+        """Get a value from config and try to convert it in a native Python
+        type (using the :py:mod:`ast` module).
+
+        :param section: config section name
+        :type section: str
+        :param option: option name
+        :type option: str
+        """
+        value = self.get(section, option)
+        try:
+            return ast.literal_eval(value)
+        except (ValueError, SyntaxError):
+            return value
+
+    def getpath(self, section, option):
+        """Get a path from config, evaluate the absolute path from configuration
+        file path.
+
+        :param section: config section name
+        :type section: str
+        :param option: option name
+        :type option: str
+        """
+        return self._get_abs_path(self.get(section, option))
+
+    @staticmethod
+    def _get_authorized_types(types):
+        """Get a tuple of authorized types and if the color and path are accepted
+        """
+        if not isinstance(types, (tuple, list)):
+            types = [types]
+        else:
+            types = list(types)
+
+        color = False
+        if 'color' in types:
+            types.remove('color')
+            types.append(tuple)
+            types.append(list)
+            color = True  # Option accept color tuples
+
+        path = False
+        if 'path' in types:
+            types.remove('path')
+            types.append(str)
+            path = True  # Option accept file path
+
+        types = tuple(types)
+
+        return types, color, path
+
+    def gettuple(self, section, option, types, extend=0):
+        """Get a list of values from config. The values type shall be in the
+        list of authorized types. This method permits to get severals values
+        from the same configuration option.
+
+        If the option contains one value (with acceptable type), a tuple
+        with one element is created and returned.
+
+        :param section: config section name
+        :type section: str
+        :param option: option name
+        :type option: str
+        :param types: list of authorized types
+        :type types: list
+        :param extend: extend the tuple with the last value until length is reached
+        :type extend: int
+        """
+        values = self.gettyped(section, option)
+        types, color, path = self._get_authorized_types(types)
+
+        if not isinstance(values, (tuple, list)):
+            if not isinstance(values, types):
+                raise ValueError("Invalid config value [{}][{}]={}".format(section, option, values))
+            if values == '' and extend == 0:
+                # Empty config key and empty tuple accepted
+                values = ()
+            else:
+                values = (values,)
+        else:
+            # Check if one value is given or if it is a list of value
+            if color and len(values) == 3 and all(isinstance(elem, int) for elem in values):
+                values = (values,)
+            elif not all(isinstance(elem, types) for elem in values):
+                raise ValueError("Invalid config value [{}][{}]={}".format(section, option, values))
+
+        if path:
+            new_values = []
+            for v in values:
+                if isinstance(v, str):
+                    new_values.append(self._get_abs_path(v))
+                else:
+                    new_values.append(v)
+            values = tuple(new_values)
+
+        while len(values) < extend:
+            values += (values[-1],)
+        return values
diff -ruN ../pibooth_local_copy/pibooth/counters.py ./pibooth/counters.py
--- ../pibooth_local_copy/pibooth/counters.py	1969-12-31 19:00:00
+++ ./pibooth/counters.py	2025-05-16 14:02:41
@@ -0,0 +1,66 @@
+# -*- coding: utf-8 -*-
+
+import pickle
+import os.path as osp
+
+
+class Counters(object):
+
+    def __init__(self, filename='', **kwargs):
+        self.data = kwargs.copy()
+        self.default = kwargs
+        self.filename = osp.abspath(osp.expanduser(filename))
+        if osp.isfile(self.filename):
+            self.load()
+
+    def __str__(self):
+        return ", ".join("{}:{}".format(key, value) for key, value in self.data.items())
+
+    def __iter__(self):
+        """Iterate over counters names.
+        """
+        return iter(self.data)
+
+    def __getitem__(self, name):
+        """Get value from counter name.
+        """
+        return self.__getattr__(name)
+
+    def __getattr__(self, name):
+        """Called only when an attribute does not exist.
+        """
+        if name not in self.data:
+            raise AttributeError("No counter with name '{}'".format(name))
+        return self.data[name]
+
+    def __setattr__(self, name, value):
+        """Called each time an attribute is set.
+        """
+        if name != 'data' and name in self.data:
+            self.data[name] = value
+            self.save()
+        else:
+            super(Counters, self).__setattr__(name, value)
+
+    def names(self):
+        """Return the list of counters.
+        """
+        return [key for key in self.data]
+
+    def load(self):
+        """Load the saved counters.
+        """
+        with open(self.filename, 'rb') as fp:
+            self.data.update(pickle.load(fp))
+
+    def reset(self):
+        """Reset all counters.
+        """
+        self.data = self.default.copy()
+        self.save()
+
+    def save(self):
+        """Save the current counters in a file.
+        """
+        with open(self.filename, 'wb') as fp:
+            pickle.dump(self.data, fp, pickle.HIGHEST_PROTOCOL)
diff -ruN ../pibooth_local_copy/pibooth/fonts/Amatic Open Font License.txt ./pibooth/fonts/Amatic Open Font License.txt
--- ../pibooth_local_copy/pibooth/fonts/Amatic Open Font License.txt	1969-12-31 19:00:00
+++ ./pibooth/fonts/Amatic Open Font License.txt	2025-05-16 14:02:41
@@ -0,0 +1,44 @@
+Copyright (c) 2011 by vernon adams (vern@newtypography.co.uk),
+with Reserved Font Names "Amatic" "Amatic Bold" and "Amatic Regular"
+
+This Font Software is licensed under the SIL Open Font License, Version 1.1.
+This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL
+
+-----------------------------------------------------------
+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
+-----------------------------------------------------------
+
+PREAMBLE
+The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.
+
+The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.
+
+DEFINITIONS
+"Font Software" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.
+
+"Reserved Font Name" refers to any names specified as such after the copyright statement(s).
+
+"Original Version" refers to the collection of Font Software components as distributed by the Copyright Holder(s).
+
+"Modified Version" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.
+
+"Author" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.
+
+PERMISSION & CONDITIONS
+Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:
+
+1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.
+
+2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.
+
+3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.
+
+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.
+
+5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.
+
+TERMINATION
+This license becomes null and void if any of the above conditions are not met.
+
+DISCLAIMER
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.
\ No newline at end of file
Binary files ../pibooth_local_copy/pibooth/fonts/Amatic-Bold.ttf and ./pibooth/fonts/Amatic-Bold.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/AmaticSC-Regular.ttf and ./pibooth/fonts/AmaticSC-Regular.ttf differ
diff -ruN ../pibooth_local_copy/pibooth/fonts/DancingScript Open Font License.txt ./pibooth/fonts/DancingScript Open Font License.txt
--- ../pibooth_local_copy/pibooth/fonts/DancingScript Open Font License.txt	1969-12-31 19:00:00
+++ ./pibooth/fonts/DancingScript Open Font License.txt	2025-05-16 14:02:41
@@ -0,0 +1,45 @@
+Copyright (c) 2010, Pablo Impallari (www.impallari.com|impallari@gmail.com),
+Copyright (c) 2010, Igino Marini. (www.ikern.com|mail@iginomarini.com),
+with Reserved Font Name Dancing Script.
+
+This Font Software is licensed under the SIL Open Font License, Version 1.1.
+This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL
+
+-----------------------------------------------------------
+SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
+-----------------------------------------------------------
+
+PREAMBLE
+The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others.
+
+The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives.
+
+DEFINITIONS
+"Font Software" refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation.
+
+"Reserved Font Name" refers to any names specified as such after the copyright statement(s).
+
+"Original Version" refers to the collection of Font Software components as distributed by the Copyright Holder(s).
+
+"Modified Version" refers to any derivative made by adding to, deleting, or substituting -- in part or in whole -- any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment.
+
+"Author" refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software.
+
+PERMISSION & CONDITIONS
+Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions:
+
+1) Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself.
+
+2) Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user.
+
+3) No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users.
+
+4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission.
+
+5) The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software.
+
+TERMINATION
+This license becomes null and void if any of the above conditions are not met.
+
+DISCLAIMER
+THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.
\ No newline at end of file
Binary files ../pibooth_local_copy/pibooth/fonts/DancingScript-Bold.ttf and ./pibooth/fonts/DancingScript-Bold.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/DancingScript-Regular.ttf and ./pibooth/fonts/DancingScript-Regular.ttf differ
diff -ruN ../pibooth_local_copy/pibooth/fonts/Monoid  Open Font License.txt ./pibooth/fonts/Monoid  Open Font License.txt
--- ../pibooth_local_copy/pibooth/fonts/Monoid  Open Font License.txt	1969-12-31 19:00:00
+++ ./pibooth/fonts/Monoid  Open Font License.txt	2025-05-16 14:02:41
@@ -0,0 +1,10 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta http-equiv="refresh" content="0; url=https://github.com/larsenwork/monoid#readme">
+</head>
+
+<body>
+  <p>You can find the readme on <a href="https://github.com/larsenwork/monoid#readme">this page</a></p>
+</body>
+</html>
Binary files ../pibooth_local_copy/pibooth/fonts/Monoid-Bold.ttf and ./pibooth/fonts/Monoid-Bold.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/Monoid-Regular.ttf and ./pibooth/fonts/Monoid-Regular.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/Monoid-Retina.ttf and ./pibooth/fonts/Monoid-Retina.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/Roboto-BoldItalic.ttf and ./pibooth/fonts/Roboto-BoldItalic.ttf differ
Binary files ../pibooth_local_copy/pibooth/fonts/Roboto-LightItalic.ttf and ./pibooth/fonts/Roboto-LightItalic.ttf differ
diff -ruN ../pibooth_local_copy/pibooth/fonts/__init__.py ./pibooth/fonts/__init__.py
--- ../pibooth_local_copy/pibooth/fonts/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/fonts/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,111 @@
+# -*- coding: utf-8 -*-
+
+import os
+import os.path as osp
+import fnmatch
+from difflib import SequenceMatcher
+import pygame
+from PIL import ImageFont
+
+
+EMBEDDED_FONT_PATH = osp.dirname(osp.abspath(__file__))
+
+
+def get_available_fonts():
+    """Return the list of available fonts.
+    """
+    fonts_list = []
+    for font_file in os.listdir(EMBEDDED_FONT_PATH):
+        if fnmatch.fnmatch(font_file, '*.ttf'):
+            fonts_list.append(osp.splitext(osp.basename(font_file))[0])
+
+    fonts_list.extend(pygame.font.get_fonts())
+
+    return sorted(fonts_list, key=lambda s: s.lower())
+
+
+def get_filename(name):
+    """Return absolute path to a font definition file located in the current
+    package.
+    """
+    if osp.isfile(name):
+        return name
+
+    embedded_path = osp.join(osp.dirname(osp.abspath(__file__)), name)
+    if embedded_path and osp.isfile(embedded_path):
+        return embedded_path
+
+    elif embedded_path and osp.isfile(embedded_path + '.ttf'):
+        return embedded_path + '.ttf'
+
+    system_path = pygame.font.match_font(name)
+    if system_path and osp.isfile(system_path):
+        return system_path
+
+    # Show available fonts
+    most_similar = None
+    most_similar_ratio = 0
+    for font_name in get_available_fonts():
+        sim = SequenceMatcher(None, font_name, name).ratio()  # Similarity
+        if sim > most_similar_ratio:
+            most_similar = font_name
+            most_similar_ratio = sim
+    raise ValueError('System font "{0}" unknown, maybe you mean "{1}"'.format(name, most_similar))
+
+
+def get_pil_font(text, font_name, max_width, max_height):
+    """Create the PIL font object which fit the text to the given rectangle.
+
+    :param text: text to draw
+    :type text: str
+    :param font_name: name or path to font definition file
+    :type font_name: str
+    :param max_width: width of the rect to fit
+    :type max_width: int
+    :param max_height: height of the rect to fit
+    :type max_height: int
+
+    :return: PIL.Font instance
+    :rtype: object
+    """
+    start, end = 0, int(max_height * 2)
+    while start < end:
+        k = (start + end) // 2
+        font = ImageFont.truetype(font_name, k)
+        font_size = font.getsize(text)
+        if font_size[0] > max_width or font_size[1] > max_height:
+            end = k
+        else:
+            start = k + 1
+    return ImageFont.truetype(font_name, start)
+
+
+def get_pygame_font(text, font_name, max_width, max_height):
+    """Create the pygame font object which fit the text to the given rectangle.
+
+    :param text: text to draw
+    :type text: str
+    :param font_name: name or path to font definition file
+    :type font_name: str
+    :param max_width: width of the rect to fit
+    :type max_width: int
+    :param max_height: height of the rect to fit
+    :type max_height: int
+
+    :return: pygame.Font instance
+    :rtype: object
+    """
+    start, end = 0, int(max_height * 2)
+    while start < end:
+        k = (start + end) // 2
+        font = pygame.font.Font(get_filename(font_name), k)
+        font_size = font.size(text)
+        if font_size[0] > max_width or font_size[1] > max_height:
+            end = k
+        else:
+            start = k + 1
+        del font  # Run garbage collector, to avoid opening too many files
+    return pygame.font.Font(get_filename(font_name), start)
+
+
+CURRENT = get_filename('Amatic-Bold')  # Dynamically set at startup
diff -ruN ../pibooth_local_copy/pibooth/language.py ./pibooth/language.py
--- ../pibooth_local_copy/pibooth/language.py	1969-12-31 19:00:00
+++ ./pibooth/language.py	2025-05-16 14:02:41
@@ -0,0 +1,294 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth language handling.
+"""
+
+import io
+import os
+import os.path as osp
+from configparser import ConfigParser
+from pibooth.utils import LOGGER, open_text_editor
+
+
+PARSER = ConfigParser()
+
+CURRENT = 'en'  # Dynamically set at startup
+
+DEFAULT = {
+    'br': {
+        'intro': "Tirar foto",
+        'intro_print': 'Ainda tem como\nimprimir esta\nfoto',
+        'choose': "Escolha o formato",
+        '1': "1 foto",
+        '2': "2 fotos",
+        '3': "3 fotos",
+        '4': "4 fotos",
+        'chosen': "Vamos!",
+        'smile': "Sorria!",
+        'processing': "Processando...",
+        'print': "Imprimir foto?",
+        'print_forget': "Por favor\nremova\nesta foto",
+        'finished': "Obrigado!",
+        'oops': "Opa! Ocorreu um erro.",
+    },
+    'de': {
+        'intro': "Foto aufnehmen",
+        'intro_print': "Du kannst dieses\nFoto immer noch\nausdrucken",
+        'choose': "Wähle Dein Layout",
+        '1': "1 Foto",
+        '2': "2 Fotos",
+        '3': "3 Fotos",
+        '4': "4 Fotos",
+        'chosen': "Los geht's!",
+        'smile': "Bitte lächeln!",
+        'processing': "Bearbeitung...",
+        'print': "Foto drucken?",
+        'print_forget': "Dieses Foto\nbitte löschen",
+        'finished': "Danke",
+        'oops': "Ups! Etwas ist schiefgelaufen",
+    },
+    'dk': {
+        'intro': "Tag et foto",
+        'intro_print': 'Eller du kan\nstadig udskrive\ndette foto',
+        'choose': "Vælg dit layout",
+        '1': "1 Foto",
+        '2': "2 Fotos",
+        '3': "3 Fotos",
+        '4': "4 Fotos",
+        'chosen': "Gør dig klar!",
+        'smile': "Smil !",
+        'processing': "Fremkalder Foto...",
+        'print': "Print foto?",
+        'print_forget': "Venligst\nglem dette\nfoto",
+        'finished': "Tak",
+        'oops': "Ups! Noget gik galt",
+    },
+    'en': {
+        'intro': "Take a photo",
+        'intro_print': "Or you can\nstill print\nthis photo",
+        'choose': "Choose your layout",
+        '1': "1 photo",
+        '2': "2 photos",
+        '3': "3 photos",
+        '4': "4 photos",
+        'chosen': "Let's go!",
+        'smile': "Smile !",
+        'processing': "Processing...",
+        'print': "Print the photo?",
+        'print_forget': "Please\nforget this\nphoto",
+        'finished': "Thanks",
+        'oops': "Oops something went wrong",
+    },
+    'es': {
+        'intro': "Sacate Una Foto",
+        'intro_print': "O Puedes\nTodavia Imprimir\nEsta Foto",
+        'choose': "Elige el tipo de foto",
+        '1': "1 Foto",
+        '2': "2 Fotos",
+        '3': "3 Fotos",
+        '4': "4 Fotos",
+        'chosen': "Adelante!!",
+        'smile': "Sonríe!!",
+        'processing': "Procesando...",
+        'print': "¿Imprimir esta foto?",
+        'print_forget': "Por favor\nolvida\nesta foto",
+        'finished': "Gracias",
+        'oops': "Maldición! Algo salió mal",
+    },
+    'fr': {
+        'intro': "Faire une photo",
+        'intro_print': "Ou sinon\ntu peux toujours\nimprimer\ncette photo",
+        'choose': "Choisis ton format",
+        '1': "1 photo",
+        '2': "2 photos",
+        '3': "3 photos",
+        '4': "4 photos",
+        'chosen': "C'est parti !",
+        'smile': "Souriez !",
+        'processing': "Préparation du montage",
+        'print': "Imprimer la photo ?",
+        'print_forget': "Oublie\ncette photo\ns'il te plait",
+        'finished': "Merci",
+        'oops': "Oups quelque chose s'est mal passé",
+    },
+    'hu': {
+        'intro': "Akarsz egy képet",
+        'intro_print': 'Vagy\nkinyomtathatja\nezt a fényképet',
+        'choose': "Kérlek válassz",
+        '1': "1 kép",
+        '2': "2 kép",
+        '3': "3 kép",
+        '4': "4 kép",
+        'chosen': "Készülj!",
+        'smile': "Csiizzz!",
+        'processing': "Feldolgozás...",
+        'print': "Nyomtatod a képet?",
+        'print_forget': "Kérjük,\nfelejtsd el ezt\na képet",
+        'finished': "Köszi",
+        'oops': "Sajnos valami hiba történt",
+    },
+    'it': {
+        'intro': "Scatta una foto",
+        'intro_print': 'Oppure puoi\nstampare\nquesta foto',
+        'choose': "Scegli il formato",
+        '1': "1 foto",
+        '2': "2 foto",
+        '3': "3 foto",
+        '4': "4 foto",
+        'chosen': "Andiamo!",
+        'smile': "Sorridi!",
+        'processing': "Elaborazione...",
+        'print': "Stampo la foto?",
+        'print_forget': "Per favore\nignora questa\nfoto",
+        'finished': "Grazie",
+        'oops': "Oops qualcosa è andato storto",
+    },
+    'nl': {
+        'intro': "Neem een foto",
+        'intro_print': "Of je kan\nnog altijd \ndeze foto printen",
+        'choose': "Kies een ontwerp",
+        '1': "1 foto",
+        '2': "2 foto’s",
+        '3': "3 foto’s",
+        '4': "4 foto’s",
+        'chosen': "We gaan ervoor!",
+        'smile': "Lachen!",
+        'processing': "Verwerken...",
+        'print': "Print de foto?",
+        'print_forget': "Vergeet\ndeze foto\nalstublieft",
+        'finished': "Bedankt",
+        'oops': "Oeps er ging iets mis",
+    },
+    'no': {
+        'intro': "Ta et bilde",
+        'intro_print': 'Eller du kan\nfremdeles printe\ndette bildet',
+        'choose': "Velg ditt utseende",
+        '1': "1 bilde",
+        '2': "2 bilder",
+        '3': "3 bilder",
+        '4': "4 bilder",
+        'chosen': "Start!",
+        'smile': "Smil !",
+        'processing': "Behandler...",
+        'print': "Printe bildet?",
+        'print_forget': "Glem\ndette\nbildet",
+        'finished': "Takk",
+        'oops': "Ops, noe gikk galt",
+    },
+    'pt': {
+        'intro': "Tira uma foto",
+        'intro_print': 'Ainda podes\nimprimir esta\nfoto',
+        'choose': "Escolhe o teu formato",
+        '1': "1 foto",
+        '2': "2 fotos",
+        '3': "3 fotos",
+        '4': "4 fotos",
+        'chosen': "Vamos!",
+        'smile': "Sorri!",
+        'processing': "A processar...",
+        'print': "Imprimir foto?",
+        'print_forget': "Por favor\nesqueçe-te\ndesta foto",
+        'finished': "Obrigado!",
+        'oops': "Oops, ocorreu um erro.",
+    },
+    'se': {
+        'intro': "Ta en bild",
+        'intro_print': 'Eller så kan du\fortfarande\skriva ut den här bilden',
+        'choose': "Välj layout",
+        '1': "1 bild",
+        '2': "2 bilder",
+        '3': "3 bilder",
+        '4': "4 bilder",
+        'chosen': "Kör!",
+        'smile': "Smile!",
+        'processing': "Jobbar...",
+        'print': "Skriv ut bilden!",
+        'print_forget': "Glöm\den här\bilden",
+        'finished': "Tack",
+        'oops': "Oops, nånting blev fel",
+    },    
+}
+
+
+def init(filename, clear=False):
+    """Initialize the translation system.
+
+    :param filename: path to the translations file
+    :type filename: str
+    :param clear: restore default translations
+    :type clear: bool
+    """
+    PARSER.filename = osp.abspath(osp.expanduser(filename))
+
+    if not osp.isfile(PARSER.filename) or clear:
+        LOGGER.info("Generate the translation file in '%s'", PARSER.filename)
+        dirname = osp.dirname(PARSER.filename)
+        if not osp.isdir(dirname):
+            os.makedirs(dirname)
+
+        with io.open(PARSER.filename, 'w', encoding="utf-8") as fp:
+            for section, options in DEFAULT.items():
+                fp.write("[{}]\n".format(section))
+                for name, value in options.items():
+                    value = value.splitlines()
+                    fp.write("{} = {}\n".format(name, value[0]))
+                    if len(value) > 1:
+                        for part in value[1:]:
+                            fp.write("    {}\n".format(part))
+                fp.write("\n\n")
+
+    PARSER.read(PARSER.filename, encoding='utf-8')
+
+    # Update the current file with missing language(s) and key(s)
+    changed = False
+    for section, options in DEFAULT.items():
+        if not PARSER.has_section(section):
+            changed = True
+            LOGGER.debug("Add [%s] to available language list", section)
+            PARSER.add_section(section)
+
+        for option, value in options.items():
+            if not PARSER.has_option(section, option):
+                changed = True
+                LOGGER.debug("Add [%s][%s] to available translations", section, option)
+                PARSER.set(section, option, value)
+
+    if changed:
+        with io.open(PARSER.filename, 'w', encoding="utf-8") as fp:
+            PARSER.write(fp)
+
+
+def edit():
+    """Open a text editor to edit the translations.
+    """
+    if not getattr(PARSER, 'filename', None):
+        raise EnvironmentError("Translation system is not initialized")
+
+    open_text_editor(PARSER.filename)
+
+
+def get_supported_languages():
+    """Return the list of supported language.
+    """
+    if getattr(PARSER, 'filename', None):
+        return list(sorted(lang for lang in PARSER.sections()))
+    return list(sorted(DEFAULT.keys()))
+
+
+def get_translated_text(key):
+    """Return the text corresponding to the key in the language defined in the config.
+
+    :param key: key in the translation file
+    :type key: str
+    """
+    if not getattr(PARSER, 'filename', None):
+        raise EnvironmentError("Translation system is not initialized")
+
+    if PARSER.has_section(CURRENT) and PARSER.has_option(CURRENT, key):
+        return PARSER.get(CURRENT, key).strip('"')
+    elif PARSER.has_option('en', key):
+        LOGGER.warning("Unsupported language '%s', fallback to English", CURRENT)
+        return PARSER.get('en', key).strip('"')
+
+    LOGGER.debug("No translation defined for '%s/%s' key", CURRENT, key)
+    return None
diff -ruN ../pibooth_local_copy/pibooth/pictures/__init__.py ./pibooth/pictures/__init__.py
--- ../pibooth_local_copy/pibooth/pictures/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/pictures/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,192 @@
+# -*- coding: utf-8 -*-
+
+import os.path as osp
+from PIL import Image, ImageOps
+import pygame
+from pibooth import language
+from pibooth import fonts
+from pibooth.pictures import factory
+from pibooth.pictures import sizing
+
+
+AUTO = 'auto'
+PORTRAIT = 'portrait'
+LANDSCAPE = 'landscape'
+
+
+def get_filename(name):
+    """Return absolute path to a picture located in the current package.
+
+    :param name: name of an image located in language folders
+    :type name: str
+
+    :return: absolute image path
+    :rtype: str
+    """
+    return osp.join(osp.dirname(osp.abspath(__file__)), 'assets', name)
+
+
+def colorize_pil_image(pil_image, color, bg_color=None):
+    """Convert a picto in white to the corresponding color.
+
+    :param pil_image: PIL image to be colorized
+    :type pil_image: :py:class:`PIL.Image`
+    :param color: RGB color to convert the picto
+    :type color: tuple
+    :param bg_color: RGB color to use for the picto's background
+    :type bg_color: tuple
+    """
+    if not bg_color:
+        bg_color = (abs(color[0] - 255), abs(color[1] - 255), abs(color[2] - 255))
+    _, _, _, alpha = pil_image.split()
+    gray_pil_image = pil_image.convert('L')
+    new_pil_image = ImageOps.colorize(gray_pil_image, black=bg_color, white=color)
+    new_pil_image.putalpha(alpha)
+    return new_pil_image
+
+
+def get_pygame_main_color(surface):
+    """Return the main color of the given pygame surface.
+    """
+    monopixel_surface = pygame.transform.scale(surface, (1, 1))
+    return tuple(monopixel_surface.get_at((0, 0)))
+
+
+def get_pygame_image(name, size=None, antialiasing=True, hflip=False, vflip=False,
+                     crop=False, angle=0, color=(255, 255, 255), bg_color=None):
+    """Return a Pygame image. If a size is given, the image is
+    resized keeping the original image's aspect ratio.
+
+    :param name: name of an image located in language folders
+    :type name: str
+    :param size: resize image to this size
+    :type size: tuple
+    :param antialiasing: use antialiasing algorithm when resize
+    :type antialiasing: bool
+    :param hflip: apply an horizontal flip
+    :type hflip: bool
+    :param vflip: apply a vertical flip
+    :type vflip: bool
+    :param crop: crop image to fit aspect ration of the size
+    :type crop: bool
+    :param angle: angle of rotation of the image
+    :type angle: int
+    :param color: recolorize the image with this RGB color
+    :type color: tuple
+    :param bg_color: recolorize the image background with this RGB color
+    :type bg_color: tuple
+
+    :return: pygame.Surface with image
+    :rtype: object
+    """
+    path = get_filename(name)
+    if not size and not color:
+        image = pygame.image.load(path).convert()
+    else:
+        if osp.isfile(path):
+            pil_image = Image.open(path)
+        else:
+            pil_image = Image.new('RGBA', size, (0, 0, 0, 0))
+
+        if color:
+            pil_image = colorize_pil_image(pil_image, color, bg_color)
+
+        if crop:
+            pil_image = pil_image.crop(sizing.new_size_by_croping_ratio(pil_image.size, size))
+        pil_image = pil_image.resize(sizing.new_size_keep_aspect_ratio(pil_image.size, size),
+                                     Image.ANTIALIAS if antialiasing else Image.NEAREST)
+
+        image = pygame.image.frombuffer(pil_image.tobytes(), pil_image.size, pil_image.mode)
+
+    if hflip or vflip:
+        image = pygame.transform.flip(image, hflip, vflip)
+    if angle != 0:
+        image = pygame.transform.rotate(image, angle)
+    return image
+
+
+def get_pygame_layout_image(text_color, bg_color, layout_number, size):
+    """Generate the layout image with the corresponding text.
+
+    :param text_color: RGB color for texts
+    :type text_color: tuple
+    :param layout_number: number of captures on the layout
+    :type layout_number: int
+    :param size: maximum size of the layout surface
+    :type size: tuple
+
+    :return: surface
+    :rtype: :py:class:`pygame.Surface`
+    """
+    layout_image = get_pygame_image("layout{0}.png".format(layout_number),
+                                    size, color=text_color, bg_color=bg_color)
+    text = language.get_translated_text(str(layout_number))
+    if text:
+        rect = layout_image.get_rect()
+        rect = pygame.Rect(rect.x + rect.width * 0.3 / 2,
+                           rect.y + rect.height * 0.76,
+                           rect.width * 0.7, rect.height * 0.20)
+        text_font = fonts.get_pygame_font(text, fonts.CURRENT, rect.width, rect.height)
+        surface = text_font.render(text, True, bg_color)
+        layout_image.blit(surface, surface.get_rect(center=rect.center))
+    return layout_image
+
+
+def get_best_orientation(captures):
+    """Return the most adapted orientation (PORTRAIT or LANDSCAPE),
+    depending on the resolution of the given captures.
+
+    It use the size of the first capture to determine the orientation.
+
+    :param captures: list of captures to concatenate
+    :type captures: list
+
+    :return: orientation PORTRAIT or LANDSCAPE
+    :rtype: str
+    """
+    is_portrait = captures[0].size[0] < captures[0].size[1]
+    if len(captures) == 1 or len(captures) == 4:
+        if is_portrait:
+            orientation = PORTRAIT
+        else:
+            orientation = LANDSCAPE
+    elif len(captures) == 2 or len(captures) == 3:
+        if is_portrait:
+            orientation = LANDSCAPE
+        else:
+            orientation = PORTRAIT
+    else:
+        raise ValueError("List of max 4 pictures expected, got {}".format(len(captures)))
+    return orientation
+
+
+def get_picture_factory(captures, orientation=AUTO, paper_format=(4, 6), force_pil=False, dpi=600):
+    """Return the picture factory use to concatenate the captures.
+
+    :param captures: list of captures to concatenate
+    :type captures: list
+    :param orientation: paper orientation
+    :type orientation: str
+    :param paper_format: paper size in inches
+    :type paper_format: tuple
+    :param force_pil: force use PIL implementation
+    :type force_pil: bool
+    :param dpi: dot-per-inche resolution
+    :type dpi: int
+    """
+    assert orientation in (AUTO, PORTRAIT, LANDSCAPE), "Unknown orientation '{}'".format(orientation)
+    if orientation == AUTO:
+        orientation = get_best_orientation(captures)
+
+    # Ensure paper format is given in portrait (don't manage orientation with it)
+    if paper_format[0] > paper_format[1]:
+        paper_format = (paper_format[1], paper_format[0])
+
+    size = (paper_format[0] * dpi, paper_format[1] * dpi)
+    if orientation == LANDSCAPE:
+        size = (size[1], size[0])
+
+    if not factory.cv2 or force_pil:
+        return factory.PilPictureFactory(size[0], size[1], *captures)
+
+    return factory.OpenCvPictureFactory(size[0], size[1], *captures)
Binary files ../pibooth_local_copy/pibooth/pictures/assets/arrow.png and ./pibooth/pictures/assets/arrow.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/camera.png and ./pibooth/pictures/assets/camera.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/capture_left.png and ./pibooth/pictures/assets/capture_left.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/capture_right.png and ./pibooth/pictures/assets/capture_right.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/finished_left.png and ./pibooth/pictures/assets/finished_left.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/finished_right.png and ./pibooth/pictures/assets/finished_right.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/hand.png and ./pibooth/pictures/assets/hand.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/layout1.png and ./pibooth/pictures/assets/layout1.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/layout2.png and ./pibooth/pictures/assets/layout2.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/layout3.png and ./pibooth/pictures/assets/layout3.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/layout4.png and ./pibooth/pictures/assets/layout4.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/arrow.xcf and ./pibooth/pictures/assets/origin/arrow.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/capture.xcf and ./pibooth/pictures/assets/origin/capture.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/finished.xcf and ./pibooth/pictures/assets/origin/finished.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/layout.xcf and ./pibooth/pictures/assets/origin/layout.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/printer.xcf and ./pibooth/pictures/assets/origin/printer.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/origin/processing.xcf and ./pibooth/pictures/assets/origin/processing.xcf differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/printer.png and ./pibooth/pictures/assets/printer.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/printer_failure.png and ./pibooth/pictures/assets/printer_failure.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/printer_touch.png and ./pibooth/pictures/assets/printer_touch.png differ
Binary files ../pibooth_local_copy/pibooth/pictures/assets/processing.png and ./pibooth/pictures/assets/processing.png differ
diff -ruN ../pibooth_local_copy/pibooth/pictures/factory.py ./pibooth/pictures/factory.py
--- ../pibooth_local_copy/pibooth/pictures/factory.py	1969-12-31 19:00:00
+++ ./pibooth/pictures/factory.py	2025-05-16 14:02:41
@@ -0,0 +1,528 @@
+# -*- coding: utf-8 -*-
+
+import os
+import os.path as osp
+from pibooth import fonts
+from pibooth.utils import LOGGER
+from pibooth.pictures import sizing
+from PIL import Image, ImageDraw
+
+try:
+    import cv2
+    import numpy as np
+except ImportError:
+    cv2 = None
+
+
+class PictureFactory(object):
+
+    """
+    Concatenate up to 4 PIL images in portrait orientation...
+
+         +---------+           +---------+           +---+-+---+           +---------+
+         |         |           |   +-+   |           |   |1|   |           | +-+ +-+ |
+         |         |           |   |1|   |           |   +-+   |           | |1| |2| |
+         |   +-+   |           |   +-+   |           |   +-+   |           | +-+ +-+ |
+         |   |1|   |           |         |           |   |2|   |           |         |
+         |   +-+   |           |   +-+   |           |   +-+   |           | +-+ +-+ |
+         |         |           |   |2|   |           |   +-+   |           | |3| |4| |
+         |         |           |   +-+   |           |   |3|   |           | +-+ +-+ |
+         +---------+           +---------+           +---+-+---+           +---------+
+
+    ...or landscape orientation
+
+      +---------------+     +---------------+     +---------------+     +----+-+-+-+----+
+      |      +-+      |     |    +-+  +-+   |     |  +-+ +-+ +-+  |     |    |1| |2|    |
+      |      |1|      |     |    |1|  |2|   |     |  |1| |2| |3|  |     |    +-+ +-+    |
+      |      +-+      |     |    +-+  +-+   |     |  +-+ +-+ +-+  |     |    +-+ +-+    |
+      |               |     |               |     |               |     |    |3| |4|    |
+      +---------------+     +---------------+     +---------------+     +----+-+-+-+----+
+    """
+
+    CENTER = 'center'
+    RIGHT = 'right'
+    LEFT = 'left'
+
+    def __init__(self, width, height, *images):
+        assert len(images) in range(1, 5), "1 to 4 images can be concatenated"
+        self._texts = []
+        self._texts_height = 0
+        self._final = None
+        self._margin = 100
+        self._margin_text = self._margin
+        self._crop = False
+        self._outlines = False
+        self._images = images
+        self._overlay_image = None
+        self._background_color = (255, 255, 255)
+        self._background_image = None
+
+        self.name = self.__class__.__name__
+        self.width = width
+        self.height = height
+        self.is_portrait = self.width < self.height
+
+    def _iter_images(self):
+        """Yield source images to concatenate.
+        """
+        raise NotImplementedError
+
+    def _iter_images_rects(self):
+        """Yield top-left coordinates and max size rectangle for each source image.
+
+        :return: (image_x, image_y, image_width, image_height)
+        :rtype: tuple
+        """
+        image_x = self._margin
+        image_y = self._margin
+        total_width = self.width - 2 * self._margin
+        total_height = self.height - self._texts_height - 2 * self._margin
+
+        if len(self._images) == 1:
+            image_width = total_width
+            image_height = total_height
+        elif 2 <= len(self._images) < 4:
+            if self.is_portrait:
+                image_width = total_width
+                image_height = (total_height - (len(self._images) - 1) * self._margin) // len(self._images)
+            else:
+                image_width = (total_width - (len(self._images) - 1) * self._margin) // len(self._images)
+                image_height = total_height
+        else:
+            image_width = (total_width - self._margin) // 2
+            image_height = (total_height - self._margin) // 2
+
+        yield image_x, image_y, image_width, image_height
+
+        if 2 <= len(self._images) < 4:
+            if self.is_portrait:
+                image_y += image_height + self._margin
+            else:
+                image_x += image_width + self._margin
+            yield image_x, image_y, image_width, image_height
+
+        if 3 <= len(self._images) < 4:
+            if self.is_portrait:
+                image_y += image_height + self._margin
+            else:
+                image_x += image_width + self._margin
+            yield image_x, image_y, image_width, image_height
+
+        if len(self._images) == 4:
+            image_x += image_width + self._margin
+            yield image_x, image_y, image_width, image_height
+            image_y += image_height + self._margin
+            image_x = self._margin
+            yield image_x, image_y, image_width, image_height
+            image_x += image_width + self._margin
+            yield image_x, image_y, image_width, image_height
+
+    def _iter_texts_rects(self, interline=None):
+        """Yield top-left coordinates and max size rectangle for each text.
+
+        :param interline: margin between each text line
+        :type interline: int
+
+        :return: (text_x, text_y, text_width, text_height)
+        :rtype: tuple
+        """
+        if not interline:
+            interline = 20
+
+        text_x = self._margin_text
+        text_y = self.height - self._texts_height
+        total_width = self.width - 2 * self._margin_text
+        total_height = self._texts_height - self._margin_text
+
+        if self.is_portrait:
+            text_height = (total_height - interline * (len(self._texts) - 1)) // (len(self._texts) + 1)
+            for i in range(len(self._texts)):
+                if i == 0:
+                    yield text_x, text_y, total_width, 2 * text_height
+                elif i == 1:
+                    text_y += interline + 2 * text_height
+                    yield text_x, text_y, total_width, text_height
+                else:
+                    text_y += interline + text_height
+                    yield text_x, text_y, total_width, text_height
+        else:
+            text_width = (total_width - interline * (len(self._texts) - 1)) // len(self._texts)
+            text_height = total_height // 2
+            for i in range(len(self._texts)):
+                if i == 0:
+                    yield text_x, text_y, text_width, 2 * text_height
+                else:
+                    text_x += interline + text_width
+                    yield text_x, text_y + (total_height - text_height) // 2, text_width, text_height
+
+    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
+        """Resize an image to fixed dimensions while keeping its aspect ratio.
+        If crop = True, the image will be cropped to fit in the target dimensions.
+
+        :return: image object, new width, new height
+        :rtype: tuple
+        """
+        raise NotImplementedError
+
+    def _image_paste(self, image, dest_image, pos_x, pos_y):
+        """Paste the given image on the destination one.
+        """
+        raise NotImplementedError
+
+    def _build_background(self):
+        """Create an image with the given background.
+
+        :return: image object which depends on the child class implementation.
+        :rtype: object
+        """
+        raise NotImplementedError
+
+    def _build_matrix(self, image):
+        """Draw the images matrix on the given image.
+
+        :param image: image object which depends on the child class implementation.
+        :type image: object
+
+        :return: image object which depends on the child class implementation.
+        :rtype: object
+        """
+        offset_generator = self._iter_images_rects()
+        count = 1
+        for src_image in self._iter_images():
+            pos_x, pos_y, max_w, max_h = next(offset_generator)
+            src_image, width, height = self._image_resize_keep_ratio(src_image, max_w, max_h, self._crop)
+            # Adjust position to have identical margin between borders and images
+            if len(self._images) < 4:
+                pos_x, pos_y = pos_x + (max_w - width) // 2, pos_y + (max_h - height) // 2
+            elif count == 1:
+                pos_x, pos_y = pos_x + (max_w - width) * 2 // 3, pos_y + (max_h - height) * 2 // 3
+            elif count == 2:
+                pos_x, pos_y = pos_x + (max_w - width) // 3, pos_y + (max_h - height) * 2 // 3
+            elif count == 3:
+                pos_x, pos_y = pos_x + (max_w - width) * 2 // 3, pos_y + (max_h - height) // 3
+            else:
+                pos_x, pos_y = pos_x + (max_w - width) // 3, pos_y + (max_h - height) // 3
+
+            self._image_paste(src_image, image, pos_x, pos_y)
+            count += 1
+        return image
+
+    def _build_final_image(self, image):
+        """Create the final PIL image and set it to the _final attribute.
+
+        :param image: image object which depends on the child class implementation.
+        :type image: object
+
+        :return: PIL.Image instance
+        :rtype: object
+        """
+        raise NotImplementedError
+
+    def _build_texts(self, image):
+        """Draw texts on a PIL image (PIL is used instead of OpenCV
+        because it is able to draw any fonts without ext).
+
+        :param image: PIL.Image instance
+        :type image: object
+        """
+        offset_generator = self._iter_texts_rects()
+        draw = ImageDraw.Draw(image)
+        for text, font_name, color, align in self._texts:
+            text_x, text_y, max_width, max_height = next(offset_generator)
+            if not text:  # Empty string: go to next text position
+                continue
+            # Use PIL to draw text because better support for fonts than OpenCV
+            font = fonts.get_pil_font(text, font_name, max_width, max_height)
+            _, text_height = font.getsize(text)
+            (text_width, _baseline), (offset_x, offset_y) = font.font.getsize(text)
+            if align == self.CENTER:
+                text_x += (max_width - text_width) // 2
+            elif align == self.RIGHT:
+                text_x += (max_width - text_width)
+
+            draw.text((text_x - offset_x // 2,
+                       text_y + (max_height - text_height) // 2 - offset_y // 2),
+                      text, color, font=font)
+
+    def _build_outlines(self, image):
+        """Build rectangle around each elements. This method is only for
+        debuging purpose.
+
+        :param image: PIL.Image instance
+        :type image: object
+        """
+        draw = ImageDraw.Draw(image)
+        for x, y, w, h in self._iter_images_rects():
+            draw.rectangle(((x, y), (x + w, y + h)), outline='red')
+        if self._texts:
+            for x, y, w, h in self._iter_texts_rects():
+                draw.rectangle(((x, y), (x + w, y + h)), outline='red')
+
+    def add_text(self, text, font_name, color, align=CENTER):
+        """Add a new text.
+
+        :param text: text to draw
+        :type text: str
+        :param font_name: name or path to font file
+        :type font_name: str
+        :param color: RGB tuple
+        :type color: tuple
+        :param align: text alignment: left, right or center
+        :type align: str
+        """
+        assert align in [self.CENTER, self.RIGHT, self.LEFT], "Unknown aligment '{}'".format(align)
+        self._texts.append((text, fonts.get_filename(font_name), color, align))
+        if self.is_portrait:
+            self._texts_height = int(self.height // 6)
+        else:
+            self._texts_height = int(self.height // 8)
+        self._final = None  # Force rebuild
+
+    def set_background(self, color_or_path):
+        """Set background color (RGB tuple) or path to an image that used to
+        fill the background.
+
+        :param color_or_path: RGB color tuple or image path
+        :type color_or_path: tuple or str
+        """
+        if isinstance(color_or_path, (tuple, list)):
+            assert len(color_or_path) == 3, "Length of 3 is required for RGB tuple"
+            self._background_color = color_or_path
+        else:
+            if not osp.isfile(color_or_path):
+                raise ValueError("Invalid background image '{}'".format(color_or_path))
+            self._background_image = color_or_path
+        self._final = None  # Force rebuild
+
+    def set_overlay(self, image_path):
+        """Set an image that will be paste over the final picture.
+
+        :param image_path: image path
+        :type image_path: str
+        """
+        if not osp.isfile(image_path):
+            raise ValueError("Invalid background image '{}'".format(image_path))
+        self._overlay_image = image_path
+        self._final = None  # Force rebuild
+
+    def set_margin(self, margin, margin_text=None):
+        """Set margin between concatenated images.
+
+        :param margin: margin in pixels
+        :type margin: int
+        :param margin_text: margin between texts in pixels
+        :type margin_text: int
+        """
+        self._margin = margin
+        if margin_text is None:
+            self._margin_text = margin
+        else:
+            self._margin_text = margin_text
+        self._final = None  # Force rebuild
+
+    def set_cropping(self, crop=True):
+        """Enable the cropping of source images it order to fit to the final
+        size. However some parts of the images will be lost.
+
+        :param crop: enable / disable cropping
+        :type crop: bool
+        """
+        self._crop = crop
+        self._final = None  # Force rebuild
+
+    def set_outlines(self, outlines=True):
+        """Draw outlines for each rectangle available for drawing
+        images and texts.
+
+        :param outlines: enable / disable outlines
+        :type outlines: bool
+        """
+        self._outlines = outlines
+        self._final = None  # Force rebuild
+
+    def build(self, rebuild=False):
+        """Build the final image or doas nothing if the final image
+        has already been built previously.
+
+        :param rebuild: force re-build image
+        :type rebuild: bool
+
+        :return: PIL.Image instance
+        :rtype: object
+        """
+        if not self._final or rebuild:
+
+            LOGGER.info("Use %s to create background", self.name)
+            image = self._build_background()
+
+            LOGGER.info("Use %s to concatenate images", self.name)
+            image = self._build_matrix(image)
+
+            LOGGER.info("Use %s to assemble final image", self.name)
+            self._final = self._build_final_image(image)
+
+            LOGGER.info("Use %s to draw texts", self.name)
+            self._build_texts(self._final)
+
+            if self._outlines:
+                LOGGER.info("Use %s to outline boundary borders", self.name)
+                self._build_outlines(self._final)
+
+        return self._final
+
+    def save(self, path):
+        """Build if not already done and save final image in a file.
+
+        :param path: path to save
+        :type path: str
+
+        :return: PIL.Image instance
+        :rtype: object
+        """
+        dirname = osp.dirname(osp.abspath(path))
+        if not osp.isdir(dirname):
+            os.mkdir(dirname)
+        image = self.build()
+        LOGGER.info("Save image '%s'", path)
+        image.save(path)
+        return image
+
+
+class PilPictureFactory(PictureFactory):
+
+    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
+        """See upper class description.
+        """
+        if crop:
+            width, height = sizing.new_size_keep_aspect_ratio(image.size, (max_w, max_h), 'outer')
+            image = image.resize((width, height), Image.ANTIALIAS)
+            image = image.crop(sizing.new_size_by_croping(image.size, (max_w, max_h)))
+        else:
+            width, height = sizing.new_size_keep_aspect_ratio(image.size, (max_w, max_h), 'inner')
+            image = image.resize((width, height), Image.ANTIALIAS)
+        return image, image.size[0], image.size[1]
+
+    def _image_paste(self, image, dest_image, pos_x, pos_y):
+        """See upper class description.
+        """
+        dest_image.paste(image, (pos_x, pos_y))
+
+    def _iter_images(self):
+        """See upper class description.
+        """
+        for image in self._images:
+            yield image
+
+    def _build_final_image(self, image):
+        """See upper class description.
+        """
+        if self._overlay_image:
+            overlay = Image.open(self._overlay_image).convert('RGBA')
+            overlay, _, _ = self._image_resize_keep_ratio(overlay, self.width, self.height, True)
+            image = Image.alpha_composite(image.convert('RGBA'), overlay)
+            image = image.convert('RGB')
+        return image
+
+    def _build_background(self):
+        """See upper class description.
+        """
+        if self._background_image:
+            bg = Image.open(self._background_image)
+            image, _, _ = self._image_resize_keep_ratio(bg, self.width, self.height, True)
+        else:
+            image = Image.new('RGB', (self.width, self.height), color=self._background_color)
+        return image
+
+
+class OpenCvPictureFactory(PictureFactory):
+
+    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
+        """See upper class description.
+        """
+        inter = cv2.INTER_AREA
+        height, width = image.shape[:2]
+
+        source_aspect_ratio = float(width) / height
+        target_aspect_ratio = float(max_w) / max_h
+
+        if crop:
+            if source_aspect_ratio <= target_aspect_ratio:
+                h_cropped = int(width / target_aspect_ratio)
+                x_offset = 0
+                y_offset = int((float(height) - h_cropped) / 2)
+                cropped = image[y_offset:(y_offset + h_cropped), x_offset:width]
+            else:
+                w_cropped = int(height * target_aspect_ratio)
+                x_offset = int((float(width) - w_cropped) / 2)
+                y_offset = 0
+                cropped = image[y_offset:height, x_offset:(x_offset + w_cropped)]
+            image = cv2.resize(cropped, (max_w, max_h), interpolation=inter)
+        else:
+            width, height = sizing.new_size_keep_aspect_ratio((width, height), (max_w, max_h), 'inner')
+            image = cv2.resize(image, (width, height), interpolation=cv2.INTER_AREA)
+        return image, image.shape[1], image.shape[0]
+
+    def _image_paste(self, image, dest_image, pos_x, pos_y):
+        """See upper class description.
+        """
+        height, width = image.shape[:2]
+        dest_image[pos_y:(pos_y + height), pos_x:(pos_x + width)] = image
+
+    def _iter_images(self):
+        """See upper class description.
+        """
+        for image in self._images:
+            yield np.array(image.convert('RGB'))
+
+    def _build_final_image(self, image):
+        """See upper class description.
+        """
+        if self._overlay_image:
+            overlay = cv2.cvtColor(cv2.imread(self._overlay_image, cv2.IMREAD_UNCHANGED), cv2.COLOR_BGR2RGBA)
+            overlay, _, _ = self._image_resize_keep_ratio(overlay, self.width, self.height, True)
+
+            x, y = 0, 0
+            image_width = image.shape[1]
+            image_height = image.shape[0]
+
+            h, w = overlay.shape[0], overlay.shape[1]
+
+            if x + w > image_width:
+                w = image_width - x
+                overlay = overlay[:, :w]
+
+            if y + h > image_height:
+                h = image_height - y
+                overlay = overlay[:h]
+
+            if overlay.shape[2] < 4:
+                overlay = np.concatenate(
+                    [
+                        overlay,
+                        np.ones((overlay.shape[0], overlay.shape[1], 1), dtype=overlay.dtype) * 255
+                    ],
+                    axis=2,
+                )
+
+            overlay_image = overlay[..., :3]
+            mask = overlay[..., 3:] / 255.0
+
+            image[y:y+h, x:x+w] = (1.0 - mask) * image[y:y+h, x:x+w] + mask * overlay_image
+
+        return Image.fromarray(image)
+
+    def _build_background(self):
+        """See upper class description.
+        """
+        if self._background_image:
+            bg = cv2.cvtColor(cv2.imread(self._background_image), cv2.COLOR_BGR2RGB)
+            image, _, _ = self._image_resize_keep_ratio(bg, self.width, self.height, True)
+        else:
+            # Small optimization for all white or all black (or all grey...) background
+            if self._background_color[0] == self._background_color[1] and self._background_color[1] == self._background_color[2]:
+                image = np.full((self.height, self.width, 3), self._background_color[0], np.uint8)
+            else:
+                image = np.zeros((self.height, self.width, 3), np.uint8)
+                image[:] = (self._background_color[0], self._background_color[1], self._background_color[2])
+
+        return image
diff -ruN ../pibooth_local_copy/pibooth/pictures/pool.py ./pibooth/pictures/pool.py
--- ../pibooth_local_copy/pibooth/pictures/pool.py	1969-12-31 19:00:00
+++ ./pibooth/pictures/pool.py	2025-05-16 14:02:41
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+
+import multiprocessing
+
+
+class PicturesFactoryPool(object):
+
+    def __init__(self):
+        self._pool = None
+        self._async_results = []
+
+    def add(self, factory):
+        """Add a new picture factory and build it asyncronously.
+        """
+        if not self._pool:
+            self._pool = multiprocessing.Pool(processes=min(multiprocessing.cpu_count(), 4))
+        self._async_results.append(self._pool.apply_async(factory.build))
+
+    def get(self):
+        """Return all the results.
+        """
+        return [res.get() for res in self._async_results]
+
+    def clear(self):
+        """Cancel all run tasks and drop all factories.
+        """
+        for res in self._async_results:
+            res.get(5)
+        self._async_results = []
+
+    def quit(self):
+        """Quit and cleanup the pool.
+        """
+        if self._pool:
+            self._pool.terminate()
+            self._pool.join()
diff -ruN ../pibooth_local_copy/pibooth/pictures/sizing.py ./pibooth/pictures/sizing.py
--- ../pibooth_local_copy/pibooth/pictures/sizing.py	1969-12-31 19:00:00
+++ ./pibooth/pictures/sizing.py	2025-05-16 14:02:41
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+
+
+def new_size_keep_aspect_ratio(original_size, target_size, resize_type='inner'):
+    """Return a new size included (if resize_type='inner') or excluded (if resize_type='outer')
+    in the targeted one by resizing and keeping the original image's aspect ratio.
+    """
+    # Get current and desired ratio for the images
+    img_ratio = original_size[0] / float(original_size[1])
+    ratio = target_size[0] / float(target_size[1])
+
+    ox, oy = original_size
+    tx, ty = target_size
+
+    if ratio > img_ratio:
+        # fit to width
+        scale_factor = target_size[0] / float(ox)
+        ty = scale_factor * oy
+        if ty > target_size[1] and resize_type == 'inner':
+            scale_factor = target_size[1] / float(oy)
+            tx = scale_factor * ox
+            ty = target_size[1]
+    elif ratio < img_ratio:
+        # fit to height
+        scale_factor = target_size[1] / float(oy)
+        tx = scale_factor * ox
+        if tx > target_size[0] and resize_type == 'inner':
+            scale_factor = target_size[0] / float(ox)
+            tx = target_size[0]
+            ty = scale_factor * oy
+    return (int(tx), int(ty))
+
+
+def new_size_by_croping(original_size, target_size, crop_type='center'):
+    """Return a tuple of top-left and bottom-right points (x1, y1, x2, y2) coresponding
+    to a crop of the original size. The position of the rectangle can be defined by the
+    crop_type parameter:
+
+       * top-left
+       * top-center
+       * top-right
+       * center-left
+       * center
+       * center-right
+       * bottom-left
+       * bottom-center
+       * bottom-right
+    """
+    x, y = 0, 0
+
+    if crop_type.endswith('left'):
+        x = 0
+    elif crop_type.endswith('center'):
+        x = (original_size[0] - target_size[0]) // 2
+    elif crop_type.endswith('right'):
+        x = original_size[0] - target_size[0]
+
+    if crop_type.startswith('top'):
+        y = 0
+    elif crop_type.startswith('center'):
+        y = (original_size[1] - target_size[1]) // 2
+    elif crop_type.startswith('bottom'):
+        y = original_size[1] - target_size[1]
+
+    return (x, y, target_size[0] + x, target_size[1] + y)
+
+
+def new_size_by_croping_ratio(original_size, target_size, crop_type='center'):
+    """Return a tuple of top-left and bottom-right points (x1, y1, x2, y2) coresponding
+    to a crop of the original size keeping the same aspect ratio of the target size.
+
+    Note: target_size is only used to calculate aspect ratio, the returned coordinates
+          doesn't fit to it.
+
+    The position of the rectangle can be defined by the crop_type parameter:
+
+       * top-left
+       * top-center
+       * top-right
+       * center-left
+       * center
+       * center-right
+       * bottom-left
+       * bottom-center
+       * bottom-right
+    """
+    # Get current and desired ratio for the images
+    img_ratio = original_size[0] / float(original_size[1])
+    ratio = target_size[0] / float(target_size[1])
+
+    tx, ty = original_size
+    if ratio > img_ratio:
+        # crop on constant width
+        ty = int(original_size[0] / ratio)
+    elif ratio < img_ratio:
+        # crop on constant height
+        tx = int(ratio * original_size[1])
+
+    x, y = 0, 0
+    if crop_type.endswith('left'):
+        x = 0
+    elif crop_type.endswith('center'):
+        x = (original_size[0] - tx) // 2
+    elif crop_type.endswith('right'):
+        x = original_size[0] - tx
+
+    if crop_type.startswith('top'):
+        y = 0
+    elif crop_type.startswith('center'):
+        y = (original_size[1] - ty) // 2
+    elif crop_type.startswith('bottom'):
+        y = original_size[1] - ty
+
+    return (x, y, tx + x, ty + y)
diff -ruN ../pibooth_local_copy/pibooth/plugins/__init__.py ./pibooth/plugins/__init__.py
--- ../pibooth_local_copy/pibooth/plugins/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,152 @@
+# -*- coding: utf-8 -*-
+
+import inspect
+import pluggy
+
+from pibooth.utils import LOGGER, load_module
+from pibooth.plugins import hookspecs
+from pibooth.plugins.camera_plugin import CameraPlugin
+from pibooth.plugins.lights_plugin import LightsPlugin
+from pibooth.plugins.picture_plugin import PicturePlugin
+from pibooth.plugins.printer_plugin import PrinterPlugin
+from pibooth.plugins.view_plugin import ViewPlugin
+
+
+def create_plugin_manager():
+    """Create plugin manager and defined hooks specification."""
+    plugin_manager = PiPluginManager(hookspecs.hookspec.project_name)
+    plugin_manager.add_hookspecs(hookspecs)
+    return plugin_manager
+
+
+class PiPluginManager(pluggy.PluginManager):
+
+    def __init__(self, *args, **kwargs):
+        super(PiPluginManager, self).__init__(*args, **kwargs)
+        self._plugin2calls = {}
+
+        def before(hook_name, methods, kwargs):
+            """Keep the list of already called hook per plugin to know if a
+            plugin has already been initialized in case of hot-registration.
+            """
+            for hookimpl in methods:
+                self._plugin2calls[hookimpl.plugin].add(hook_name)
+
+        def after(outcome, hook_name, methods, kwargs):
+            pass
+
+        self.add_hookcall_monitoring(before, after)
+
+    def register(self, plugin, name=None):
+        """Override to keep all plugins that have already been registered
+        at least one time.
+        """
+        plugin_name = super(PiPluginManager, self).register(plugin, name)
+        if plugin not in self._plugin2calls:
+            self._plugin2calls[plugin] = set()
+        return plugin_name
+
+    def load_all_plugins(self, paths, disabled=None):
+        """Register the core plugins, load plugins from setuptools entry points
+        and the load given module/package paths.
+
+        note:: by default hooks are called in LIFO registered order thus
+               plugins register order is important.
+
+        :param paths: list of Python module/package paths to load
+        :type paths: list
+        :param disabled: list of plugins name to be disabled after loaded
+        :type disabled: list
+        """
+        # Load plugins declared by setuptools entry points
+        self.load_setuptools_entrypoints(hookspecs.hookspec.project_name)
+
+        plugins = []
+        for path in paths:
+            plugin = load_module(path)
+            if plugin:
+                LOGGER.debug("Plugin found at '%s'", path)
+                plugins.append(plugin)
+
+        plugins += [LightsPlugin(self),  # Last called
+                    ViewPlugin(self),
+                    PrinterPlugin(self),
+                    PicturePlugin(self),
+                    CameraPlugin(self)]  # First called
+
+        for plugin in plugins:
+            self.register(plugin, name=getattr(plugin, 'name', None))
+
+        # Check that each hookimpl is defined in the hookspec
+        # except for hookimpl with kwarg 'optionalhook=True'.
+        self.check_pending()
+
+        # Disable unwanted plugins
+        if disabled:
+            for name in disabled:
+                self.unregister(name=name)
+
+    def list_external_plugins(self):
+        """Return the list of loaded plugins except ``pibooth`` core plugins.
+        (external plugins can be registered or unregistered)
+
+        :return: list of plugins
+        :rtype: list
+        """
+        values = []
+        for plugin in self._plugin2calls:
+            # The core plugins are classes, we don't want to include
+            # them here, thus we take only the modules objects.
+            if inspect.ismodule(plugin):
+                if plugin not in values:
+                    values.append(plugin)
+        return values
+
+    def get_friendly_name(self, plugin, version=True):
+        """Return the friendly name of the given plugin and
+        optionally its version.
+
+        :param plugin: registered plugin object
+        :type plugin: object
+        :param version: include the version number
+        :type version: bool
+        """
+        # List of all setuptools registered plugins
+        distinfo = dict(self.list_plugin_distinfo())
+
+        if plugin in distinfo:
+            name = distinfo[plugin].project_name
+            vnumber = distinfo[plugin].version
+        else:
+            name = self.get_name(plugin)
+            if not name:
+                name = getattr(plugin, '__name__', "unknown")
+            vnumber = getattr(plugin, '__version__', '?.?.?')
+
+        if version:
+            name = "{}-{}".format(name, vnumber)
+        else:
+            name = "{}".format(name)
+
+        # Questionable convenience, but it keeps things short
+        if name.startswith("pibooth-") or name.startswith("pibooth_"):
+            name = name[8:]
+
+        return name
+
+    def get_calls_history(self, plugin):
+        """Return the ist of the hook names that has already been called at
+        least one time fr the given plugins.
+
+        :param plugin: plugin for which calls history is requested
+        :type plugin: object
+        """
+        if plugin in self._plugin2calls:
+            return list(self._plugin2calls[plugin])
+        return []
+
+    def subset_hook_caller_for_plugin(self, name, plugin):
+        """ Return a new :py:class:`.hooks._HookCaller` instance for the named
+        method which manages calls to the given plugins."""
+        exluded_plugins = [p for p in self.get_plugins() if self.get_name(p) != self.get_name(plugin)]
+        return self.subset_hook_caller(name, exluded_plugins)
diff -ruN ../pibooth_local_copy/pibooth/plugins/camera_plugin.py ./pibooth/plugins/camera_plugin.py
--- ../pibooth_local_copy/pibooth/plugins/camera_plugin.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/camera_plugin.py	2025-05-16 14:02:41
@@ -0,0 +1,116 @@
+# -*- coding: utf-8 -*-
+
+import time
+import pygame
+import pibooth
+from pibooth import camera
+from pibooth.utils import LOGGER
+
+
+class CameraPlugin(object):
+
+    """Plugin to manage the camera captures.
+    """
+
+    name = 'pibooth-core:camera'
+
+    def __init__(self, plugin_manager):
+        self._pm = plugin_manager
+        self.count = 0
+
+    @pibooth.hookimpl(hookwrapper=True)
+    def pibooth_setup_camera(self, cfg):
+        outcome = yield  # all corresponding hookimpls are invoked here
+        cam = outcome.get_result()
+
+        if not cam:
+            LOGGER.debug("Fallback to pibooth default camera management system")
+            cam = camera.find_camera()
+
+        cam.initialize(cfg.gettuple('CAMERA', 'iso', (int, str), 2),
+                       cfg.gettyped('CAMERA', 'resolution'),
+                       cfg.gettuple('CAMERA', 'rotation', int, 2),
+                       cfg.getboolean('CAMERA', 'flip'),
+                       cfg.getboolean('CAMERA', 'delete_internal_memory'))
+        outcome.force_result(cam)
+
+    @pibooth.hookimpl
+    def pibooth_cleanup(self, app):
+        app.camera.quit()
+
+    @pibooth.hookimpl
+    def state_failsafe_enter(self, app):
+        """Reset variables set in this plugin.
+        """
+        app.capture_date = None
+        app.capture_nbr = None
+        app.camera.drop_captures()  # Flush previous captures
+
+    @pibooth.hookimpl
+    def state_wait_enter(self, app):
+        app.capture_date = None
+        if len(app.capture_choices) > 1:
+            app.capture_nbr = None
+        else:
+            app.capture_nbr = app.capture_choices[0]
+
+    @pibooth.hookimpl
+    def state_choose_do(self, app, events):
+        event = app.find_choice_event(events)
+        if event:
+            if event.key == pygame.K_LEFT:
+                app.capture_nbr = app.capture_choices[0]
+            elif event.key == pygame.K_RIGHT:
+                app.capture_nbr = app.capture_choices[1]
+
+    @pibooth.hookimpl
+    def state_preview_enter(self, cfg, app, win):
+        LOGGER.info("Show preview before next capture")
+        if not app.capture_date:
+            app.capture_date = time.strftime("%Y-%m-%d-%H-%M-%S")
+        app.camera.preview(win)
+
+    @pibooth.hookimpl
+    def state_preview_do(self, cfg, app):
+        pygame.event.pump()  # Before blocking actions
+        if cfg.getboolean('WINDOW', 'preview_countdown'):
+            app.camera.preview_countdown(cfg.getint('WINDOW', 'preview_delay'))
+        else:
+            app.camera.preview_wait(cfg.getint('WINDOW', 'preview_delay'))
+
+    @pibooth.hookimpl
+    def state_preview_exit(self, cfg, app):
+        if cfg.getboolean('WINDOW', 'preview_stop_on_capture'):
+            app.camera.stop_preview()
+
+    @pibooth.hookimpl
+    def state_capture_do(self, cfg, app, win):
+        effects = cfg.gettyped('PICTURE', 'captures_effects')
+        if not isinstance(effects, (list, tuple)):
+            # Same effect for all captures
+            effect = effects
+        elif len(effects) >= app.capture_nbr:
+            # Take the effect corresponding to the current capture
+            effect = effects[self.count]
+        else:
+            # Not possible
+            raise ValueError("Not enough effects defined for {} captures {}".format(
+                app.capture_nbr, effects))
+
+        LOGGER.info("Take a capture")
+        if cfg.getboolean('WINDOW', 'flash'):
+            with win.flash(2):  # Manage the window here, have no choice
+                app.camera.capture(effect)
+        else:
+            app.camera.capture(effect)
+
+        self.count += 1
+
+    @pibooth.hookimpl
+    def state_capture_exit(self, cfg, app):
+        if not cfg.getboolean('WINDOW', 'preview_stop_on_capture'):
+            app.camera.stop_preview()
+
+    @pibooth.hookimpl
+    def state_processing_enter(self, app):
+        self.count = 0
diff -ruN ../pibooth_local_copy/pibooth/plugins/hookspecs.py ./pibooth/plugins/hookspecs.py
--- ../pibooth_local_copy/pibooth/plugins/hookspecs.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/hookspecs.py	2025-05-16 14:02:41
@@ -0,0 +1,512 @@
+# -*- coding: utf-8 -*-
+
+import pluggy
+
+hookspec = pluggy.HookspecMarker('pibooth')
+
+# --- Pibooth state-independent hooks ------------------------------------------
+
+
+@hookspec
+def pibooth_configure(cfg):
+    """Actions performed after loading of the configuration file or when the
+    plugin is enabled for the first time. The ``cfg`` object is an instance
+    of :py:class:`ConfigParser` class.
+
+    :param cfg: application configuration
+    """
+
+
+@hookspec
+def pibooth_reset(cfg, hard):
+    """Restore the configuration.
+
+    This hook is called at least one time at ``pibooth`` startup with parameter
+    ``hard=False``. All plugins implementing this hook shall ensure that the
+    required folders/files exist (create the default ones if not).
+
+    If ``hard=True``, all folders/files have to be restored with their default
+    content.
+
+    :param cfg: application configuration
+    :param hard: do a hard-reset if True
+    """
+
+
+@hookspec
+def pibooth_startup(cfg, app):
+    """Actions performed at the startup of pibooth or when the plugin is enabled
+    for the first time.
+
+    :param cfg: application configuration
+    :param app: application instance
+    """
+
+
+@hookspec(firstresult=True)
+def pibooth_setup_picture_factory(cfg, opt_index, factory):
+    """Hook used to setup the ``PictureFactory`` instance.
+
+    The ``opt_index`` is the selected index of the ``[PICTURE][captures]``
+    configuration option for the current captures sequence. It represents
+    the selected captures number.
+
+    A new ``PictureFactory`` instance can be returned by this hook, it will be
+    used instead of the default one. The returned object shall have the same
+    public API than :py:class:`pibooth.pictures.factory.PictureFactory`.
+
+    :param cfg: application configuration
+    :param opt_index: index for tuple options related to captures number
+    :param factory: default ``PictureFactory`` instance (not configured yet)
+    """
+
+
+@hookspec(firstresult=True)
+def pibooth_setup_camera(cfg):
+    """Hook used to setup the ``camera`` interface.
+
+    A new camera instance (inheriting from :py:class:`pibooth.camera.base.BaseCamera`)
+    shall be returned by this hook, it will be used instead of the default one.
+
+    :param cfg: application configuration
+    """
+
+
+@hookspec
+def pibooth_cleanup(app):
+    """Actions performed at the cleanup of pibooth.
+
+    :param app: application instance
+    """
+
+
+# --- FailSafe State -----------------------------------------------------------
+
+
+@hookspec
+def state_failsafe_enter(cfg, app, win):
+    """Actions performed when application enter in FailSafe state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_failsafe_do(cfg, app, win, events):
+    """Actions performed when application is in FailSafe state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_failsafe_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_failsafe_exit(cfg, app, win):
+    """Actions performed when application exit FailSafe state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Wait State ---------------------------------------------------------------
+
+
+@hookspec
+def state_wait_enter(cfg, app, win):
+    """Actions performed when application enter in Wait state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_wait_do(cfg, app, win, events):
+    """Actions performed when application is in Wait state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_wait_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_wait_exit(cfg, app, win):
+    """Actions performed when application exit Wait state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Choose State -------------------------------------------------------------
+
+
+@hookspec
+def state_choose_enter(cfg, app, win):
+    """Actions performed when application enter in Choose state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_choose_do(cfg, app, win, events):
+    """Actions performed when application is in Choose state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_choose_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_choose_exit(cfg, app, win):
+    """Actions performed when application exit Choose state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Chosen State -------------------------------------------------------------
+
+
+@hookspec
+def state_chosen_enter(cfg, app, win):
+    """Actions performed when application enter in Chosen state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_chosen_do(cfg, app, win, events):
+    """Actions performed when application is in Chosen state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_chosen_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_chosen_exit(cfg, app, win):
+    """Actions performed when application exit Chosen state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Preview State ------------------------------------------------------------
+
+
+@hookspec
+def state_preview_enter(cfg, app, win):
+    """Actions performed when application enter in Preview state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_preview_do(cfg, app, win, events):
+    """Actions performed when application is in Preview state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_preview_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_preview_exit(cfg, app, win):
+    """Actions performed when application exit Preview state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Capture State ------------------------------------------------------------
+
+
+@hookspec
+def state_capture_enter(cfg, app, win):
+    """Actions performed when application enter in Capture state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_capture_do(cfg, app, win, events):
+    """Actions performed when application is in Capture state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_capture_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_capture_exit(cfg, app, win):
+    """Actions performed when application exit Capture state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Processing State ---------------------------------------------------------
+
+
+@hookspec
+def state_processing_enter(cfg, app, win):
+    """Actions performed when application enter in Processing state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_processing_do(cfg, app, win, events):
+    """Actions performed when application is in Processing state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_processing_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_processing_exit(cfg, app, win):
+    """Actions performed when application exit Processing state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- PrintView State ----------------------------------------------------------
+
+
+@hookspec
+def state_print_enter(cfg, app, win):
+    """Actions performed when application enter in Print state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_print_do(cfg, app, win, events):
+    """Actions performed when application is in Print state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_print_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_print_exit(cfg, app, win):
+    """Actions performed when application exit Print state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+# --- Finish State -------------------------------------------------------------
+
+
+@hookspec
+def state_finish_enter(cfg, app, win):
+    """Actions performed when application enter in Finish state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
+
+
+@hookspec
+def state_finish_do(cfg, app, win, events):
+    """Actions performed when application is in Finish state.
+    This hook is called in a loop until the application can switch
+    to the next state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec(firstresult=True)
+def state_finish_validate(cfg, app, win, events):
+    """Return the next state name if application can switch to it
+    else return None.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    :param events: pygame events generated since last call
+    """
+
+
+@hookspec
+def state_finish_exit(cfg, app, win):
+    """Actions performed when application exit Finish state.
+
+    :param cfg: application configuration
+    :param app: application instance
+    :param win: graphical window instance
+    """
diff -ruN ../pibooth_local_copy/pibooth/plugins/lights_plugin.py ./pibooth/plugins/lights_plugin.py
--- ../pibooth_local_copy/pibooth/plugins/lights_plugin.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/lights_plugin.py	2025-05-16 14:02:41
@@ -0,0 +1,72 @@
+# -*- coding: utf-8 -*-
+
+import time
+import pibooth
+
+
+class LightsPlugin(object):
+    """Plugin to manage the lights via GPIO.
+    """
+
+    name = 'pibooth-core:lights'
+
+    def __init__(self, plugin_manager):
+        self._pm = plugin_manager
+        self.blink_time = 0.3
+
+    @pibooth.hookimpl
+    def state_wait_enter(self, app):
+        if app.previous_picture_file and app.printer.is_ready()\
+                and app.count.remaining_duplicates > 0:
+            app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
+        else:
+            app.leds.capture.blink(on_time=self.blink_time, off_time=self.blink_time)
+            app.leds.printer.off()
+
+    @pibooth.hookimpl
+    def state_wait_do(self, app, events):
+        if app.find_print_event(events) and app.previous_picture_file and app.printer.is_ready():
+            if app.count.remaining_duplicates <= 0:
+                app.leds.printer.off()
+            else:
+                app.leds.printer.on()
+                time.sleep(1)  # Just to let the LED switched on
+                app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
+
+        if not app.previous_picture_file and app.leds.printer._controller:  # _controller == blinking
+            app.leds.printer.off()
+
+    @pibooth.hookimpl
+    def state_wait_exit(self, app):
+        app.leds.off()
+
+    @pibooth.hookimpl
+    def state_choose_enter(self, app):
+        app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
+
+    @pibooth.hookimpl
+    def state_choose_exit(self, app):
+        if app.capture_nbr == app.capture_choices[0]:
+            app.leds.capture.on()
+            app.leds.printer.off()
+        elif app.capture_nbr == app.capture_choices[1]:
+            app.leds.printer.on()
+            app.leds.capture.off()
+
+    @pibooth.hookimpl
+    def state_chosen_exit(self, app):
+        app.leds.off()
+
+    @pibooth.hookimpl
+    def state_print_enter(self, app):
+        app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
+
+    @pibooth.hookimpl
+    def state_print_do(self, app, events):
+        if app.find_print_event(events):
+            app.leds.printer.on()
+            app.leds.capture.off()
+
+    @pibooth.hookimpl
+    def state_finish_enter(self, app):
+        app.leds.off()
diff -ruN ../pibooth_local_copy/pibooth/plugins/picture_plugin.py ./pibooth/plugins/picture_plugin.py
--- ../pibooth_local_copy/pibooth/plugins/picture_plugin.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/picture_plugin.py	2025-05-16 14:02:41
@@ -0,0 +1,159 @@
+# -*- coding: utf-8 -*-
+
+import os
+import os.path as osp
+import itertools
+from datetime import datetime
+import pibooth
+from pibooth.utils import LOGGER, PoolingTimer
+from pibooth.pictures import get_picture_factory
+from pibooth.pictures.pool import PicturesFactoryPool
+
+
+class PicturePlugin(object):
+
+    """Plugin to build the final picture.
+    """
+
+    name = 'pibooth-core:picture'
+
+    def __init__(self, plugin_manager):
+        self._pm = plugin_manager
+        self.factory_pool = PicturesFactoryPool()
+        self.picture_destroy_timer = PoolingTimer(0)
+        self.second_previous_picture = None
+        self.texts_vars = {}
+
+    def _reset_vars(self, app):
+        """Destroy final picture (can not be used anymore).
+        """
+        self.factory_pool.clear()
+        app.previous_picture = None
+        app.previous_animated = None
+        app.previous_picture_file = None
+
+    @pibooth.hookimpl(hookwrapper=True)
+    def pibooth_setup_picture_factory(self, cfg, opt_index, factory):
+
+        outcome = yield  # all corresponding hookimpls are invoked here
+        factory = outcome.get_result() or factory
+
+        factory.set_margin(cfg.getint('PICTURE', 'margin_thick'))
+
+        backgrounds = cfg.gettuple('PICTURE', 'backgrounds', ('color', 'path'), 2)
+        factory.set_background(backgrounds[opt_index])
+
+        overlays = cfg.gettuple('PICTURE', 'overlays', 'path', 2)
+        if overlays[opt_index]:
+            factory.set_overlay(overlays[opt_index])
+
+        texts = [cfg.get('PICTURE', 'footer_text1').strip('"').format(**self.texts_vars),
+                 cfg.get('PICTURE', 'footer_text2').strip('"').format(**self.texts_vars)]
+        colors = cfg.gettuple('PICTURE', 'text_colors', 'color', len(texts))
+        text_fonts = cfg.gettuple('PICTURE', 'text_fonts', str, len(texts))
+        alignments = cfg.gettuple('PICTURE', 'text_alignments', str, len(texts))
+        if any(elem != '' for elem in texts):
+            for params in zip(texts, text_fonts, colors, alignments):
+                factory.add_text(*params)
+
+        if cfg.getboolean('PICTURE', 'captures_cropping'):
+            factory.set_cropping()
+
+        if cfg.getboolean('GENERAL', 'debug'):
+            factory.set_outlines()
+
+        outcome.force_result(factory)
+
+    @pibooth.hookimpl
+    def pibooth_cleanup(self):
+        self.factory_pool.quit()
+
+    @pibooth.hookimpl
+    def state_failsafe_enter(self, app):
+        self._reset_vars(app)
+
+    @pibooth.hookimpl
+    def state_wait_enter(self, cfg, app):
+        animated = self.factory_pool.get()
+        if cfg.getfloat('WINDOW', 'wait_picture_delay') == 0:
+            # Do it here to avoid a transient display of the picture
+            self._reset_vars(app)
+        elif animated:
+            app.previous_animated = itertools.cycle(animated)
+
+        # Reset timeout in case of settings changed
+        self.picture_destroy_timer.timeout = max(0, cfg.getfloat('WINDOW', 'wait_picture_delay'))
+        self.picture_destroy_timer.start()
+
+    @pibooth.hookimpl
+    def state_wait_do(self, cfg, app):
+        if cfg.getfloat('WINDOW', 'wait_picture_delay') > 0 and self.picture_destroy_timer.is_timeout()\
+                and app.previous_picture_file:
+            self._reset_vars(app)
+
+    @pibooth.hookimpl
+    def state_processing_enter(self, app):
+        self.second_previous_picture = app.previous_picture
+        self._reset_vars(app)
+
+    @pibooth.hookimpl
+    def state_processing_do(self, cfg, app):
+        idx = app.capture_choices.index(app.capture_nbr)
+        self.texts_vars['date'] = datetime.strptime(app.capture_date, "%Y-%m-%d-%H-%M-%S")
+        self.texts_vars['count'] = app.count
+
+        LOGGER.info("Saving raw captures")
+        captures = app.camera.get_captures()
+
+        for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
+            rawdir = osp.join(savedir, "raw", app.capture_date)
+            os.makedirs(rawdir)
+
+            for capture in captures:
+                count = captures.index(capture)
+                capture.save(osp.join(rawdir, "pibooth{:03}.jpg".format(count)))
+
+        LOGGER.info("Creating the final picture")
+        default_factory = get_picture_factory(captures, cfg.get('PICTURE', 'orientation'))
+        factory = self._pm.hook.pibooth_setup_picture_factory(cfg=cfg,
+                                                              opt_index=idx,
+                                                              factory=default_factory)
+        app.previous_picture = factory.build()
+
+        for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
+            app.previous_picture_file = osp.join(savedir, app.picture_filename)
+            factory.save(app.previous_picture_file)
+
+        if cfg.getboolean('WINDOW', 'animate') and app.capture_nbr > 1:
+            LOGGER.info("Asyncronously generate pictures for animation")
+            for capture in captures:
+                default_factory = get_picture_factory((capture,), cfg.get(
+                    'PICTURE', 'orientation'), force_pil=True, dpi=200)
+                factory = self._pm.hook.pibooth_setup_picture_factory(cfg=cfg,
+                                                                      opt_index=idx,
+                                                                      factory=default_factory)
+                factory.set_margin(factory._margin // 3)  # 1/3 since DPI is divided by 3
+                self.factory_pool.add(factory)
+
+    @pibooth.hookimpl
+    def state_processing_exit(self, app):
+        app.count.taken += 1  # Do it here because 'print' state can be skipped
+
+    @pibooth.hookimpl
+    def state_print_do(self, cfg, app, events):
+        if app.find_capture_event(events):
+
+            LOGGER.info("Moving the picture in the forget folder")
+            for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
+                forgetdir = osp.join(savedir, "forget")
+                if not osp.isdir(forgetdir):
+                    os.makedirs(forgetdir)
+                os.rename(osp.join(savedir, app.picture_filename), osp.join(forgetdir, app.picture_filename))
+
+            self._reset_vars(app)
+            app.count.forgotten += 1
+            app.previous_picture = self.second_previous_picture
+
+            # Deactivate the print function for the backuped picture
+            # as we don't known how many times it has already been printed
+            app.count.remaining_duplicates = 0
diff -ruN ../pibooth_local_copy/pibooth/plugins/printer_plugin.py ./pibooth/plugins/printer_plugin.py
--- ../pibooth_local_copy/pibooth/plugins/printer_plugin.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/printer_plugin.py	2025-05-16 14:02:41
@@ -0,0 +1,67 @@
+# -*- coding: utf-8 -*-
+
+import pibooth
+from pibooth.utils import LOGGER
+
+
+class PrinterPlugin(object):
+
+    """Plugin to manage the printer.
+    """
+
+    name = 'pibooth-core:printer'
+
+    def __init__(self, plugin_manager):
+        self._pm = plugin_manager
+
+    def print_picture(self, cfg, app):
+        LOGGER.info("Send final picture to printer")
+        app.printer.print_file(app.previous_picture_file,
+                               cfg.getint('PRINTER', 'pictures_per_page'))
+        app.count.printed += 1
+        app.count.remaining_duplicates -= 1
+
+    @pibooth.hookimpl
+    def pibooth_cleanup(self, app):
+        app.printer.quit()
+
+    @pibooth.hookimpl
+    def state_failsafe_enter(self, cfg, app):
+        """Reset variables set in this plugin.
+        """
+        app.count.remaining_duplicates = cfg.getint('PRINTER', 'max_duplicates')
+
+    @pibooth.hookimpl
+    def state_wait_do(self, cfg, app, events):
+        if app.find_print_event(events) and app.previous_picture_file and app.printer.is_installed():
+
+            if app.count.remaining_duplicates <= 0:
+                LOGGER.warning("Too many duplicates sent to the printer (%s max)",
+                               cfg.getint('PRINTER', 'max_duplicates'))
+                return
+
+            elif not app.printer.is_ready():
+                LOGGER.warning("Maximum number of printed pages reached (%s/%s max)", app.count.printed,
+                               cfg.getint('PRINTER', 'max_pages'))
+                return
+
+            self.print_picture(cfg, app)
+
+    @pibooth.hookimpl
+    def state_processing_enter(self, cfg, app):
+        app.count.remaining_duplicates = cfg.getint('PRINTER', 'max_duplicates')
+
+    @pibooth.hookimpl
+    def state_processing_do(self, cfg, app):
+        if app.previous_picture_file and app.printer.is_ready():
+            number = cfg.gettyped('PRINTER', 'auto_print')
+            if number == 'max':
+                number = cfg.getint('PRINTER', 'max_duplicates')
+            for i in range(number):
+                if app.count.remaining_duplicates > 0:
+                    self.print_picture(cfg, app)
+
+    @pibooth.hookimpl
+    def state_print_do(self, cfg, app, events):
+        if app.find_print_event(events) and app.previous_picture_file:
+            self.print_picture(cfg, app)
diff -ruN ../pibooth_local_copy/pibooth/plugins/view_plugin.py ./pibooth/plugins/view_plugin.py
--- ../pibooth_local_copy/pibooth/plugins/view_plugin.py	1969-12-31 19:00:00
+++ ./pibooth/plugins/view_plugin.py	2025-05-16 14:02:41
@@ -0,0 +1,187 @@
+# -*- coding: utf-8 -*-
+
+import pibooth
+from pibooth.utils import LOGGER, get_crash_message, PoolingTimer
+
+
+class ViewPlugin(object):
+
+    """Plugin to manage the pibooth window dans transitions.
+    """
+
+    name = 'pibooth-core:view'
+
+    def __init__(self, plugin_manager):
+        self._pm = plugin_manager
+        self.count = 0
+        self.forgotten = False
+        # Seconds to display the failed message
+        self.failed_view_timer = PoolingTimer(2)
+        # Seconds between each animated frame
+        self.animated_frame_timer = PoolingTimer(0)
+        # Seconds before going back to the start
+        self.choose_timer = PoolingTimer(30)
+        # Seconds to display the selected layout
+        self.layout_timer = PoolingTimer(4)
+        # Seconds to display the selected layout
+        self.print_view_timer = PoolingTimer(0)
+        # Seconds to display the selected layout
+        self.finish_timer = PoolingTimer(1)
+
+    @pibooth.hookimpl
+    def state_failsafe_enter(self, win):
+        win.show_oops()
+        self.failed_view_timer.start()
+        LOGGER.error(get_crash_message())
+
+    @pibooth.hookimpl
+    def state_failsafe_validate(self):
+        if self.failed_view_timer.is_timeout():
+            return 'wait'
+
+    @pibooth.hookimpl
+    def state_wait_enter(self, cfg, app, win):
+        self.forgotten = False
+        if app.previous_animated:
+            previous_picture = next(app.previous_animated)
+            # Reset timeout in case of settings changed
+            self.animated_frame_timer.timeout = cfg.getfloat('WINDOW', 'animate_delay')
+            self.animated_frame_timer.start()
+        else:
+            previous_picture = app.previous_picture
+
+        win.show_intro(previous_picture, app.printer.is_ready()
+                       and app.count.remaining_duplicates > 0)
+        if app.printer.is_installed():
+            win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
+
+    @pibooth.hookimpl
+    def state_wait_do(self, app, win, events):
+        if app.previous_animated and self.animated_frame_timer.is_timeout():
+            previous_picture = next(app.previous_animated)
+            win.show_intro(previous_picture, app.printer.is_ready()
+                           and app.count.remaining_duplicates > 0)
+            self.animated_frame_timer.start()
+        else:
+            previous_picture = app.previous_picture
+
+        event = app.find_print_status_event(events)
+        if event and app.printer.is_installed():
+            tasks = app.printer.get_all_tasks()
+            win.set_print_number(len(tasks), not app.printer.is_ready())
+
+        if app.find_print_event(events) or (win.get_image() and not previous_picture):
+            win.show_intro(previous_picture, app.printer.is_ready()
+                           and app.count.remaining_duplicates > 0)
+
+    @pibooth.hookimpl
+    def state_wait_validate(self, cfg, app, events):
+        if app.find_capture_event(events):
+            if len(app.capture_choices) > 1:
+                return 'choose'
+            if cfg.getfloat('WINDOW', 'chosen_delay') > 0:
+                return 'chosen'
+            return 'preview'
+
+    @pibooth.hookimpl
+    def state_wait_exit(self, win):
+        self.count = 0
+        win.show_image(None)  # Clear currently displayed image
+
+    @pibooth.hookimpl
+    def state_choose_enter(self, app, win):
+        LOGGER.info("Show picture choice (nothing selected)")
+        win.set_print_number(0, False)  # Hide printer status
+        win.show_choice(app.capture_choices)
+        self.choose_timer.start()
+
+    @pibooth.hookimpl
+    def state_choose_validate(self, cfg, app):
+        if app.capture_nbr:
+            if cfg.getfloat('WINDOW', 'chosen_delay') > 0:
+                return 'chosen'
+            else:
+                return 'preview'
+        elif self.choose_timer.is_timeout():
+            return 'wait'
+
+    @pibooth.hookimpl
+    def state_chosen_enter(self, cfg, app, win):
+        LOGGER.info("Show picture choice (%s captures selected)", app.capture_nbr)
+        win.show_choice(app.capture_choices, selected=app.capture_nbr)
+
+        # Reset timeout in case of settings changed
+        self.layout_timer.timeout = cfg.getfloat('WINDOW', 'chosen_delay')
+        self.layout_timer.start()
+
+    @pibooth.hookimpl
+    def state_chosen_validate(self):
+        if self.layout_timer.is_timeout():
+            return 'preview'
+
+    @pibooth.hookimpl
+    def state_preview_enter(self, app, win):
+        self.count += 1
+        win.set_capture_number(self.count, app.capture_nbr)
+
+    @pibooth.hookimpl
+    def state_preview_validate(self):
+        return 'capture'
+
+    @pibooth.hookimpl
+    def state_capture_do(self, app, win):
+        win.set_capture_number(self.count, app.capture_nbr)
+
+    @pibooth.hookimpl
+    def state_capture_validate(self, app):
+        if self.count >= app.capture_nbr:
+            return 'processing'
+        return 'preview'
+
+    @pibooth.hookimpl
+    def state_processing_enter(self, win):
+        win.show_work_in_progress()
+
+    @pibooth.hookimpl
+    def state_processing_validate(self, cfg, app):
+        if app.printer.is_ready() and cfg.getfloat('PRINTER', 'printer_delay') > 0\
+                and app.count.remaining_duplicates > 0:
+            return 'print'
+        return 'finish'  # Can not print
+
+    @pibooth.hookimpl
+    def state_print_enter(self, cfg, app, win):
+        LOGGER.info("Display the final picture")
+        win.show_print(app.previous_picture)
+        win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
+
+        # Reset timeout in case of settings changed
+        self.print_view_timer.timeout = cfg.getfloat('PRINTER', 'printer_delay')
+        self.print_view_timer.start()
+
+    @pibooth.hookimpl
+    def state_print_validate(self, app, win, events):
+        printed = app.find_print_event(events)
+        self.forgotten = app.find_capture_event(events)
+        if self.print_view_timer.is_timeout() or printed or self.forgotten:
+            if printed:
+                win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
+            return 'finish'
+
+    @pibooth.hookimpl
+    def state_finish_enter(self, cfg, app, win):
+        if cfg.getfloat('WINDOW', 'finish_picture_delay') > 0 and not self.forgotten:
+            win.show_finished(app.previous_picture)
+            timeout = cfg.getfloat('WINDOW', 'finish_picture_delay')
+        else:
+            win.show_finished()
+            timeout = 1
+
+        # Reset timeout in case of settings changed
+        self.finish_timer.timeout = timeout
+        self.finish_timer.start()
+
+    @pibooth.hookimpl
+    def state_finish_validate(self):
+        if self.finish_timer.is_timeout():
+            return 'wait'
diff -ruN ../pibooth_local_copy/pibooth/printer.py ./pibooth/printer.py
--- ../pibooth_local_copy/pibooth/printer.py	1969-12-31 19:00:00
+++ ./pibooth/printer.py	2025-05-16 14:02:41
@@ -0,0 +1,135 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth printer handling.
+"""
+
+try:
+    import cups
+    from cups_notify import Subscriber, event
+except ImportError:
+    cups = None  # CUPS is optional
+
+import tempfile
+import os.path as osp
+
+import pygame
+from PIL import Image
+from pibooth.utils import LOGGER
+from pibooth.pictures import get_picture_factory
+
+
+PRINTER_TASKS_UPDATED = pygame.USEREVENT + 2
+
+PAPER_FORMATS = {
+    '2x6': (2, 6),      # 2x6 pouces - 5x15 cm - 51x152 mm
+    '3,5x5': (3.5, 5),  # 3,5x5 pouces - 9x13 cm - 89x127 mm
+    '4x6': (4, 6),      # 4x6 pouces - 10x15 cm - 101x152 mm
+    '5x7': (5, 7),      # 5x7 pouces - 13x18 cm - 127x178 mm
+    '6x8': (6, 8),      # 6x8 pouces - 15x20 cm - 152x203 mm
+    '6x9': (6, 9),      # 6x9 pouces - 15x23 cm - 152x229 mm
+}
+
+
+class Printer(object):
+
+    def __init__(self, name='default', max_pages=-1, options=None, counters=None):
+        self._conn = cups.Connection() if cups else None
+        self._notifier = Subscriber(self._conn) if cups else None
+        self.name = None
+        self.max_pages = max_pages
+        self.options = options
+        self.count = counters
+        if not cups:
+            LOGGER.warning("No printer found (pycups or pycups-notify not installed)")
+            return  # CUPS is not installed
+
+        if not name or name.lower() == 'default':
+            self.name = self._conn.getDefault()
+            if not self.name and self._conn.getPrinters():
+                self.name = list(self._conn.getPrinters().keys())[0]  # Take first one
+        elif name in self._conn.getPrinters():
+            self.name = name
+
+        if not self.name:
+            if name.lower() == 'default':
+                LOGGER.warning("No printer configured in CUPS (see http://localhost:631)")
+            else:
+                LOGGER.warning("No printer named '%s' in CUPS (see http://localhost:631)", name)
+        else:
+            LOGGER.info("Connected to printer '%s'", self.name)
+
+        if self.options and not isinstance(self.options, dict):
+            LOGGER.warning("Invalid printer options '%s', dict is expected", self.options)
+            self.options = {}
+        elif not self.options:
+            self.options = {}
+
+    def _on_event(self, evt):
+        """
+        Call for each new printer event.
+        """
+        LOGGER.info(evt.title)
+        pygame.event.post(pygame.event.Event(PRINTER_TASKS_UPDATED, evt=evt))
+
+    def is_installed(self):
+        """Return True if the CUPS server is available for printing.
+        """
+        return cups is not None and self.name is not None
+
+    def is_ready(self):
+        """Return False if paper/ink counter is reached or printing is disabled.
+        """
+        if not self.is_installed():
+            return False
+        if self.max_pages < 0 or self.count is None:  # No limit
+            return True
+        return self.count.printed < self.max_pages
+
+    def print_file(self, filename, copies=1):
+        """Send a file to the CUPS server to the default printer.
+        """
+        if not self.name:
+            raise EnvironmentError("No printer found (check config file or CUPS config)")
+        if not osp.isfile(filename):
+            raise IOError("No such file or directory: {}".format(filename))
+        if self._notifier and not self._notifier.is_subscribed(self._on_event):
+            self._notifier.subscribe(self._on_event, [event.CUPS_EVT_JOB_COMPLETED,
+                                                      event.CUPS_EVT_JOB_CREATED,
+                                                      event.CUPS_EVT_JOB_STOPPED,
+                                                      event.CUPS_EVT_PRINTER_STATE_CHANGED,
+                                                      event.CUPS_EVT_PRINTER_STOPPED])
+
+        if copies > 1:
+            with tempfile.NamedTemporaryFile(suffix=osp.basename(filename)) as fp:
+                picture = Image.open(filename)
+                factory = get_picture_factory((picture,) * copies)
+                # Don't call setup factory hook here, as the selected parameters
+                # are the one necessary to render several pictures on same page.
+                factory.set_margin(2)
+                factory.save(fp.name)
+                self._conn.printFile(self.name, fp.name, osp.basename(filename), self.options)
+        else:
+            self._conn.printFile(self.name, filename, osp.basename(filename), self.options)
+        LOGGER.debug("File '%s' sent to the printer with options %s", filename, self.options)
+
+    def cancel_all_tasks(self):
+        """Cancel all tasks in the queue.
+        """
+        if not self.name:
+            raise EnvironmentError("No printer found (check config file or CUPS config)")
+        self._conn.cancelAllJobs(self.name)
+
+    def get_all_tasks(self):
+        """Return a dict (indexed by job ID) of dicts representing all tasks
+        in the queue.
+        """
+        if not self.name:
+            return {}  # No printer found
+        return self._conn.getJobs(my_jobs=True, requested_attributes=["job-id", "job-name",
+                                                                      "job-uri", "job-state"])
+
+    def quit(self):
+        """Do cleanup actions.
+        """
+        if self._notifier:
+            self._notifier.unsubscribe_all()
diff -ruN ../pibooth_local_copy/pibooth/scripts/count.py ./pibooth/scripts/count.py
--- ../pibooth_local_copy/pibooth/scripts/count.py	1969-12-31 19:00:00
+++ ./pibooth/scripts/count.py	2025-05-16 14:02:41
@@ -0,0 +1,45 @@
+# -*- coding: utf-8 -*-
+
+"""Script to display/update counters.
+"""
+
+import sys
+import json
+from pibooth.counters import Counters
+from pibooth.utils import configure_logging
+from pibooth.config import PiConfigParser
+from pibooth.plugins import create_plugin_manager
+
+
+def main():
+    """Application entry point.
+    """
+    configure_logging()
+    plugin_manager = create_plugin_manager()
+    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
+
+    counters = Counters(config.join_path("counters.pickle"),
+                        taken=0, printed=0, forgotten=0,
+                        remaining_duplicates=config.getint('PRINTER', 'max_duplicates'))
+
+    if '--json' in sys.argv:
+        print(json.dumps(counters.data))
+    elif '--update' in sys.argv:
+        try:
+            print("\nUpdating counters (current value in square bracket):\n")
+            for name in counters:
+                value = input(" -> {:.<18} [{:>4}] : ".format(name.capitalize(), counters[name]))
+                if value.strip():
+                    setattr(counters, name, int(value))
+        except KeyboardInterrupt:
+            pass
+        print()
+    else:
+        print("\nListing current counters:\n")
+        for name in counters:
+            print(" -> {:.<25} : {:>4}".format(name.capitalize(), counters[name]))
+        print()
+
+
+if __name__ == "__main__":
+    main()
diff -ruN ../pibooth_local_copy/pibooth/scripts/diagnostic.py ./pibooth/scripts/diagnostic.py
--- ../pibooth_local_copy/pibooth/scripts/diagnostic.py	1969-12-31 19:00:00
+++ ./pibooth/scripts/diagnostic.py	2025-05-16 14:02:41
@@ -0,0 +1,223 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth diagnostic module.
+"""
+
+import io
+import sys
+from PIL import Image
+try:
+    import gphoto2 as gp
+except ImportError:
+    gp = None  # gphoto2 is optional
+import pibooth
+from pibooth.config import PiConfigParser
+from pibooth.utils import configure_logging
+from pibooth.plugins import create_plugin_manager
+
+
+LOGFILE = None
+APPNAME = 'diagnostic'
+
+
+def gp_logging(level, domain, string, data=None):
+    write_log('Gphoto2: {}: {}'.format(domain, string))
+
+
+def write_log(text, new_section=False):
+    """Write text in the log file"""
+    global LOGFILE
+    if not LOGFILE:
+        LOGFILE = open(APPNAME + '.log', 'w')
+
+    if new_section:
+        print('\n' + '=' * 80)
+        LOGFILE.write('\n' + '=' * 80 + '\n')
+
+    text = str(text)
+    print(text[:200])
+    if len(text) > 200:
+        print("[... -> see log file for full message]")
+    LOGFILE.write(text + '\n')
+
+
+def print_config(config, parent=''):
+    """Print all parameters of the camera"""
+
+    gp_widget_types = {gp.GP_WIDGET_WINDOW: "Window toplevel",
+                       gp.GP_WIDGET_SECTION: "Section (or Tab)",
+                       gp.GP_WIDGET_TEXT: "Text",
+                       gp.GP_WIDGET_RANGE: "Slider",
+                       gp.GP_WIDGET_TOGGLE: "Toggle button (or check box)",
+                       gp.GP_WIDGET_RADIO: "Radio button",
+                       gp.GP_WIDGET_MENU: "Menu widget (same as Radio)",
+                       gp.GP_WIDGET_BUTTON: "Button press",
+                       gp.GP_WIDGET_DATE: "Date entering",
+                       }
+
+    for child in config.get_children():
+        path = '/'.join((parent, child.get_name()))
+        if child.get_type() == gp.GP_WIDGET_SECTION:
+            print_config(child, path)
+        else:
+            write_log('{}'.format(path))
+            write_log('  Label       : {}'.format(child.get_label()))
+            write_log('  Readonly    : {}'.format('yes' if child.get_readonly() else 'no'))
+            write_log('  Data type   : {}'.format(type(child.get_value())))
+            write_log('  Widget type : {}'.format(gp_widget_types[child.get_type()]))
+            write_log('  Current     : {}'.format(child.get_value()))
+            if child.get_type() == gp.GP_WIDGET_RADIO:
+                write_log('  Choices     : {}'.format([c for c in child.get_choices()]))
+            elif child.get_type() == gp.GP_WIDGET_RANGE:
+                write_log('  Choices     : min={}, max={}, step={}'.format(*child.get_range()))
+            elif child.get_type() == gp.GP_WIDGET_TOGGLE:
+                write_log('  Choices     : [0, 1]')
+            elif child.get_type() == gp.GP_WIDGET_MENU:
+                write_log('  Choices     : {}'.format([child.get_choice(n) for n in range(child.count_choices())]))
+            else:
+                write_log('  Choices     : n/a')
+
+
+def set_config_value(camera, section, option, value):
+    """Set camera configuration. """
+    try:
+        write_log('Setting option {}/{}="{}"'.format(section, option, value))
+        config = camera.get_config()
+        child = config.get_child_by_name(section).get_child_by_name(option)
+        if child.get_type() == gp.GP_WIDGET_RADIO:
+            choices = [c for c in child.get_choices()]
+        else:
+            choices = None
+
+        if choices and value not in choices:
+            write_log("   -> invalid value '{}' for option {} (possible choices: {})".format(value, option, choices))
+        child.set_value(value)
+        camera.set_config(config)
+    except gp.GPhoto2Error:
+        write_log('   -> unsupported setting {}/{}={} (nothing configured on DSLR)'.format(section, option, value))
+
+
+def get_config_value(camera, section, option):
+    """Get camera configuration option.
+    """
+    try:
+        config = camera.get_config()
+        child = config.get_child_by_name(section).get_child_by_name(option)
+        value = child.get_value()
+        write_log('Getting option {}/{}={}'.format(section, option, value))
+        return value
+    except gp.GPhoto2Error:
+        write_log('Unknown option {}/{}'.format(section, option))
+
+
+def camera_connected():
+    """Return the list of connected camera compatible with gPhoto2.
+    """
+    if hasattr(gp, 'gp_camera_autodetect'):
+        # gPhoto2 version 2.5+
+        cameras = gp.check_result(gp.gp_camera_autodetect())
+    else:
+        port_info_list = gp.PortInfoList()
+        port_info_list.load()
+        abilities_list = gp.CameraAbilitiesList()
+        abilities_list.load()
+        cameras = abilities_list.detect(port_info_list)
+    return cameras
+
+
+def main():
+    error = False
+    configure_logging()
+    write_log("Pibooth version installed: {}".format(pibooth.__version__))
+
+    plugin_manager = create_plugin_manager()
+    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
+
+    # Register plugins
+    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
+                                    config.gettuple('GENERAL', 'plugins_disabled', str))
+
+    write_log("Installed plugins: {}".format(", ".join(
+        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()])))
+
+    if not gp:
+        write_log("gPhoto2 not installed, cannot diagnose connected DSLR")
+        sys.exit(1)
+    else:
+        try:
+            info = gp.version.gp_library_version(gp.version.GP_VERSION_VERBOSE)
+            write_log("GPhoto2 version installed: {}".format(info[0]))
+            for opt in info[1:]:
+                write_log("  - {}".format(opt))
+        except:
+            pass
+
+    gp_log_callback = gp.check_result(gp.gp_log_add_func(gp.GP_LOG_VERBOSE, gp_logging))
+    write_log("Listing all connected DSLR camera")
+    cameras_list = camera_connected()
+
+    if not cameras_list:
+        write_log('No compatible DSLR camera detected')
+        sys.exit(1)
+
+    cameras_list = sorted(cameras_list, key=lambda x: x[0])
+    for index, (name, addr) in enumerate(cameras_list):
+        write_log("{:02d} : addr-> {}  name-> {}".format(index, addr, name))
+
+    write_log("Starting diagnostic of connected DSLR camera", True)
+    camera = gp.Camera()
+    camera.init()
+
+    abilities = camera.get_abilities()
+    preview_compat = gp.GP_OPERATION_CAPTURE_PREVIEW ==\
+        abilities.operations & gp.GP_OPERATION_CAPTURE_PREVIEW
+    write_log("* Preview compatible: {}".format(preview_compat))
+    capture_compat = gp.GP_OPERATION_CAPTURE_IMAGE ==\
+        abilities.operations & gp.GP_OPERATION_CAPTURE_IMAGE
+    write_log("* Capture compatible: {}".format(capture_compat))
+
+    if capture_compat:
+        try:
+            print_config(camera.get_config())
+
+            write_log("Testing commands used by pibooth", True)
+
+            set_config_value(camera, 'imgsettings', 'iso', '100')
+            set_config_value(camera, 'settings', 'capturetarget', 'Memory card')
+
+            viewfinder = get_config_value(camera, 'actions', 'viewfinder')
+            if viewfinder is not None:
+                set_config_value(camera, 'actions', 'viewfinder', 1)
+
+            write_log("Take capture preview")
+            camera.capture_preview()
+
+            if viewfinder is not None:
+                set_config_value(camera, 'actions', 'viewfinder', 0)
+
+            write_log("Take a capture")
+            gp_path = camera.capture(gp.GP_CAPTURE_IMAGE)
+
+            write_log("Download file from DSLR")
+            camera_file = camera.file_get(gp_path.folder, gp_path.name, gp.GP_FILE_TYPE_NORMAL)
+
+            write_log("Save capture locally from memory buffer")
+            data = camera_file.get_data_and_size()
+            with open(APPNAME + '.raw', 'wb') as fd:
+                fd.write(data)
+            image = Image.open(io.BytesIO(data))
+            image.save(APPNAME + '.jpg')
+
+        except Exception as ex:
+            write_log("ABORT   : exception occures: {}".format(ex), True)
+            error = True
+
+    if not error:
+        write_log("SUCCESS : diagnostic completed", True)
+
+    del gp_log_callback
+    camera.exit()
+
+    write_log("If you are investigating why pibooth does not work with your DSLR camera,")
+    write_log("please paste the content of generated file '{}'".format(APPNAME + '.log'))
+    write_log("on https://github.com/pibooth/pibooth/issues")
diff -ruN ../pibooth_local_copy/pibooth/scripts/fonts.py ./pibooth/scripts/fonts.py
--- ../pibooth_local_copy/pibooth/scripts/fonts.py	1969-12-31 19:00:00
+++ ./pibooth/scripts/fonts.py	2025-05-16 14:02:41
@@ -0,0 +1,38 @@
+# -*- coding: utf-8 -*-
+
+"""Script to list all installed fonts.
+"""
+
+from itertools import zip_longest, islice
+from pibooth.fonts import get_available_fonts
+from pibooth.utils import LOGGER, configure_logging
+
+
+def take(n, iterable):
+    """Return first n items of the iterable as a list.
+    """
+    return list(islice(iterable, n))
+
+
+def print_columns_words(words, column_count=3):
+    """Print a list of words into columns.
+    """
+    columns, dangling = divmod(len(words), column_count)
+    iter_words = iter(words)
+    columns = [take(columns + (dangling > i), iter_words) for i in range(column_count)]
+    paddings = [max(map(len, column)) for column in columns]
+    for row in zip_longest(*columns, fillvalue=''):
+        print('  '.join(word.ljust(pad) for word, pad in zip(row, paddings)))
+
+
+def main():
+    """Application entry point.
+    """
+    configure_logging()
+    LOGGER.info("Listing all fonts available...")
+
+    print_columns_words(get_available_fonts(), 3)
+
+
+if __name__ == "__main__":
+    main()
diff -ruN ../pibooth_local_copy/pibooth/scripts/printer.py ./pibooth/scripts/printer.py
--- ../pibooth_local_copy/pibooth/scripts/printer.py	1969-12-31 19:00:00
+++ ./pibooth/scripts/printer.py	2025-05-16 14:02:41
@@ -0,0 +1,78 @@
+# -*- coding: utf-8 -*-
+
+"""Script to display the configuration of the printer.
+"""
+
+import sys
+import json
+import cups
+from pibooth.utils import LOGGER, configure_logging
+from pibooth.config import PiConfigParser
+from pibooth.plugins import create_plugin_manager
+
+
+def main():
+    """Application entry point.
+    """
+    configure_logging()
+    plugin_manager = create_plugin_manager()
+    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
+
+    conn = cups.Connection()
+    name = config.get('PRINTER', 'printer_name')
+
+    if not name or name.lower() == 'default':
+        name = conn.getDefault()
+        if not name and conn.getPrinters():
+            name = list(conn.getPrinters().keys())[0]  # Take first one
+    elif name not in conn.getPrinters():
+        name = None
+
+    if not name:
+        if name.lower() == 'default':
+            LOGGER.warning("No printer configured in CUPS (see http://localhost:631)")
+            return
+        else:
+            LOGGER.warning("No printer named '%s' in CUPS (see http://localhost:631)", name)
+            return
+    else:
+        LOGGER.info("Connected to printer '%s'", name)
+
+    f = conn.getPPD(name)
+    ppd = cups.PPD(f)
+    groups = ppd.optionGroups
+    options = []
+    for group in groups:
+        group_name = "{} - {}".format(group.name, group.text)
+        for opt in group.options:
+            option = {'group': group_name}
+            values = list(map(lambda x: x["choice"], opt.choices))
+            texts = list(map(lambda x: x["text"], opt.choices))
+            option['keyword'] = opt.keyword
+            option['value'] = opt.defchoice
+            option['description'] = opt.text
+            if values != texts:
+                option['choices'] = dict([(v, texts[values.index(v)]) for v in values])
+            else:
+                option['choices'] = values
+            options.append(option)
+
+    if '--json' in sys.argv:
+        print(json.dumps(dict([(option['keyword'], option['value']) for option in options])))
+    else:
+        for option in options:
+            print("{} = {}".format(option['keyword'], option['value']))
+            print("     Description: {}".format(option['description']))
+            if isinstance(option['choices'], dict):
+                choices = ["{} = {}".format(value, descr) for value, descr in option['choices'].items()]
+                print("     Choices:     {}".format(choices[0]))
+                for choice in choices[1:]:
+                    print("                  {}".format(choice))
+            else:
+                print("     Choices:     {}".format(", ".join(option['choices'])))
+
+            print()
+
+
+if __name__ == "__main__":
+    main()
diff -ruN ../pibooth_local_copy/pibooth/scripts/regenerate.py ./pibooth/scripts/regenerate.py
--- ../pibooth_local_copy/pibooth/scripts/regenerate.py	1969-12-31 19:00:00
+++ ./pibooth/scripts/regenerate.py	2025-05-16 14:02:41
@@ -0,0 +1,101 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth picture regeneration module.
+"""
+
+import os
+import argparse
+from os import path as osp
+from datetime import datetime
+
+from PIL import Image
+
+from pibooth.utils import LOGGER, configure_logging
+from pibooth.plugins import create_plugin_manager
+from pibooth.config import PiConfigParser
+from pibooth.pictures import get_picture_factory
+from pibooth.counters import Counters
+
+
+def get_captures(images_folder):
+    """Get a list of images from the folder given in input.
+    """
+    captures_paths = os.listdir(images_folder)
+    captures = []
+    for capture_path in captures_paths:
+        try:
+            image = Image.open(osp.join(images_folder, capture_path))
+            captures.append(image)
+        except OSError:
+            LOGGER.info("File %s doesn't seem to be an image", capture_path)
+    return captures
+
+
+def regenerate_all_images(plugin_manager, config, basepath):
+    """Regenerate the pibboth images from the raw images and the config.
+    """
+    if not osp.isdir(osp.join(basepath, 'raw')):
+        return
+
+    capture_choices = config.gettuple('PICTURE', 'captures', int, 2)
+
+    for captures_folder in os.listdir(osp.join(basepath, 'raw')):
+        captures_folder_path = osp.join(basepath, 'raw', captures_folder)
+        if not osp.isdir(captures_folder_path):
+            continue
+        captures = get_captures(captures_folder_path)
+        LOGGER.info("Generating image from raws in folder %s", captures_folder_path)
+
+        if len(captures) == capture_choices[0]:
+            idx = 0
+        elif len(captures) == capture_choices[1]:
+            idx = 1
+        else:
+            LOGGER.warning("Folder %s doesn't contain the correct number of pictures", captures_folder_path)
+            continue
+
+        default_factory = get_picture_factory(captures, config.get('PICTURE', 'orientation'))
+        factory = plugin_manager.hook.pibooth_setup_picture_factory(cfg=config,
+                                                                    opt_index=idx,
+                                                                    factory=default_factory)
+
+        picture_file = osp.join(basepath, captures_folder + "_pibooth.jpg")
+        factory.save(picture_file)
+
+
+def main():
+    """Application entry point.
+    """
+    parser = argparse.ArgumentParser(usage="%(prog)s [options]", description="This script lets you regenerate the final pictures from the original captures present in the raw directory.")
+
+    parser.add_argument("config_directory", nargs='?', default="~/.config/pibooth",
+                        help=u"path to configuration directory (default: %(default)s)")
+
+    options = parser.parse_args()
+
+    configure_logging()
+    plugin_manager = create_plugin_manager()
+    config = PiConfigParser(osp.join(options.config_directory, "pibooth.cfg"), plugin_manager)
+
+    # Register plugins
+    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
+                                    config.gettuple('GENERAL', 'plugins_disabled', str))
+
+    LOGGER.info("Installed plugins: %s", ", ".join(
+        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()]))
+
+    # Update configuration with plugins ones
+    plugin_manager.hook.pibooth_configure(cfg=config)
+
+    # Initialize varibales normally done by the app
+    picture_plugin = plugin_manager.get_plugin('pibooth-core:picture')
+    picture_plugin.texts_vars['date'] = datetime.now()
+    picture_plugin.texts_vars['count'] = Counters(config.join_path("counters.pickle"), taken=0, printed=0, forgotten=0,
+                                                  remaining_duplicates=config.getint('PRINTER', 'max_duplicates'))
+
+    for path in config.gettuple('GENERAL', 'directory', 'path'):
+        regenerate_all_images(plugin_manager, config, path)
+
+
+if __name__ == "__main__":
+    main()
diff -ruN ../pibooth_local_copy/pibooth/states.py ./pibooth/states.py
--- ../pibooth_local_copy/pibooth/states.py	1969-12-31 19:00:00
+++ ./pibooth/states.py	2025-05-16 14:02:41
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth base states.
+"""
+
+import time
+from pibooth.utils import LOGGER, BlockConsoleHandler
+
+
+class StateMachine(object):
+
+    def __init__(self, plugins_manager, configuration, application, window):
+        self.states = set()
+        self.failsafe_state = None
+        self.active_state = None
+
+        # Share the application to manage between states
+        self.app = application
+        self.win = window
+        self.cfg = configuration
+        self.pm = plugins_manager
+
+        self._start_time = time.time()
+
+    def add_state(self, name):
+        """Add a state to the internal dictionary.
+        """
+        self.states.add(name)
+
+    def add_failsafe_state(self, name):
+        """Add a state that will be call in case of exception.
+        """
+        self.failsafe_state = name
+        self.states.add(name)
+
+    def remove_state(self, name):
+        """Remove a state to the internal dictionary.
+        """
+        self.states.discard(name)
+        if name == self.failsafe_state:
+            self.failsafe_state = None
+
+    def process(self, events):
+        """Let the current state do it's thing.
+        """
+        # Only continue if there is an active state
+        if self.active_state is None:
+            return
+
+        try:
+            # Perform the actions of the active state
+            hook = getattr(self.pm.hook, 'state_{}_do'.format(self.active_state))
+            hook(cfg=self.cfg, app=self.app, win=self.win, events=events)
+
+            # Check conditions to activate the next state
+            hook = getattr(self.pm.hook, 'state_{}_validate'.format(self.active_state))
+            new_state_name = hook(cfg=self.cfg, app=self.app, win=self.win, events=events)
+        except Exception as ex:
+            if self.failsafe_state and self.active_state != self.failsafe_state:
+                LOGGER.error(str(ex))
+                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
+                new_state_name = self.failsafe_state
+            else:
+                raise
+
+        if new_state_name is not None:
+            self.set_state(new_state_name)
+
+    def set_state(self, state_name):
+        """Change state machine's active state
+        """
+        try:
+            # Perform any exit actions of the current state
+            if self.active_state is not None:
+                hook = getattr(self.pm.hook, 'state_{}_exit'.format(self.active_state))
+                hook(cfg=self.cfg, app=self.app, win=self.win)
+                BlockConsoleHandler.dedent()
+                LOGGER.debug("took %0.3f seconds", time.time() - self._start_time)
+        except Exception as ex:
+            if self.failsafe_state and self.active_state != self.failsafe_state:
+                LOGGER.error(str(ex))
+                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
+                state_name = self.failsafe_state
+            else:
+                raise
+
+        if state_name not in self.states:
+            raise ValueError('"{}" not in registered states...'.format(state_name))
+
+        # Switch to the new state and perform its entry actions
+        BlockConsoleHandler.indent()
+        self._start_time = time.time()
+        LOGGER.debug("Activate state '%s'", state_name)
+        self.active_state = state_name
+
+        try:
+            hook = getattr(self.pm.hook, 'state_{}_enter'.format(self.active_state))
+            hook(cfg=self.cfg, app=self.app, win=self.win)
+        except Exception as ex:
+            if self.failsafe_state and self.active_state != self.failsafe_state:
+                LOGGER.error(str(ex))
+                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
+                self.set_state(self.failsafe_state)
+            else:
+                raise
diff -ruN ../pibooth_local_copy/pibooth/utils.py ./pibooth/utils.py
--- ../pibooth_local_copy/pibooth/utils.py	1969-12-31 19:00:00
+++ ./pibooth/utils.py	2025-05-16 14:02:41
@@ -0,0 +1,296 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth utilities.
+"""
+
+import os
+import sys
+import time
+import os.path as osp
+import logging
+import psutil
+import platform
+from fnmatch import fnmatchcase
+import contextlib
+import errno
+import subprocess
+import pygame
+
+
+LOGGER = logging.getLogger("pibooth")
+
+
+class BlockConsoleHandler(logging.StreamHandler):
+
+    default_level = logging.INFO
+    pattern_indent = '+< '
+    pattern_blocks = '|  '
+    pattern_dedent = '+> '
+    current_indent = ''
+
+    def emit(self, record):
+        cls = self.__class__
+        if cls.is_debug():
+            record.msg = '{}{}'.format(cls.current_indent, record.msg)
+        logging.StreamHandler.emit(self, record)
+
+        if cls.current_indent.endswith(cls.pattern_indent):
+            cls.current_indent = (cls.current_indent[:-len(cls.pattern_indent)] + cls.pattern_blocks)
+        elif cls.current_indent.endswith(cls.pattern_dedent):
+            cls.current_indent = cls.current_indent[:-len(cls.pattern_dedent)]
+
+    @classmethod
+    def is_debug(cls):
+        """Return True if this handler is set to DEBUG level on the root logger.
+        """
+        for hdlr in logging.getLogger().handlers:
+            if isinstance(hdlr, cls):
+                return hdlr.level < logging.INFO
+        return False
+
+    @classmethod
+    def indent(cls):
+        """Begin a new log block.
+        """
+        if cls.is_debug():
+            cls.current_indent += cls.pattern_indent
+
+    @classmethod
+    def dedent(cls):
+        """End the current log block.
+        """
+        if cls.is_debug():
+            cls.current_indent = (cls.current_indent[:-len(cls.pattern_blocks)] + cls.pattern_dedent)
+
+
+class PoolingTimer(object):
+
+    """
+    Timer to be used in a pooling loop to check if timeout has been exceed.
+    """
+
+    def __init__(self, timeout, start=True):
+        self.timeout = timeout
+        self.time = None
+        self._paused_total = 0
+        self._paused_time = None
+        if start:
+            self.start()
+
+    def __enter__(self):
+        """Start timer if used as context manager.
+        """
+        self.start()
+        return self
+
+    def __exit__(self, *args):
+        """Stop timer if used as context manager.
+        """
+        self.time = None
+
+    def reset(self):
+        """Reset timer to its initial state.
+        """
+        self.time = None
+        self._paused_total = 0
+        self._paused_time = None
+
+    def start(self):
+        """Start the timer.
+        """
+        if self.timeout < 0:
+            raise ValueError("PoolingTimer cannot be started if timeout is lower than zero")
+        if self._paused_time:
+            self._paused_total += time.time() - self._paused_time
+            self._paused_time = None
+        else:
+            self._paused_total = 0
+            self.time = time.time()
+
+    def freeze(self):
+        """Pause the timer.
+        """
+        if not self._paused_time:
+            self._paused_time = time.time()
+
+    def remaining(self):
+        """Return the remaining seconds.
+        """
+        if self.time is None:
+            remain = float(self.timeout)
+        else:
+            remain = self.timeout + self.paused() - (time.time() - self.time)
+            if remain < 0.0:
+                remain = 0.0
+        return remain
+
+    def paused(self):
+        """Return the pause duration in seconds.
+        """
+        if self._paused_time:
+            return self._paused_total + time.time() - self._paused_time
+        return self._paused_total
+
+    def elapsed(self):
+        """Return the elapsed seconds.
+        """
+        if self.time is None:
+            return 0.0
+        return time.time() - self.time - self.paused()
+
+    def is_timeout(self):
+        """Return True if the timer is in timeout.
+        """
+        if self.time is None:
+            raise RuntimeError("PoolingTimer has never been started")
+        return (time.time() - self.time - self.paused()) > self.timeout
+
+
+def configure_logging(level=logging.INFO, msgfmt=logging.BASIC_FORMAT, datefmt=None, filename=None):
+    """Configure root logger for console printing.
+    """
+    root = logging.getLogger()
+
+    if not root.handlers:
+        # Set lower level to be sure that all handlers receive the logs
+        root.setLevel(logging.DEBUG)
+
+        if filename:
+            # Create a file handler, all levels are logged
+            filename = osp.abspath(osp.expanduser(filename))
+            dirname = osp.dirname(filename)
+            if not osp.isdir(dirname):
+                os.makedirs(dirname)
+            hdlr = logging.FileHandler(filename, mode='w')
+            hdlr.setFormatter(logging.Formatter(msgfmt, datefmt))
+            hdlr.setLevel(logging.DEBUG)
+            root.addHandler(hdlr)
+
+        # Create a console handler
+        hdlr = BlockConsoleHandler(sys.stdout)
+        hdlr.setFormatter(logging.Formatter(msgfmt, datefmt))
+        if level is not None:
+            hdlr.setLevel(level)
+            BlockConsoleHandler.default_level = level
+        root.addHandler(hdlr)
+
+
+def set_logging_level(level=None):
+    """Set/restore the log level of the concole.
+
+    :param level: level as defined in the logging package
+    :type level: int
+    """
+    for hdlr in logging.getLogger().handlers:
+        if isinstance(hdlr, BlockConsoleHandler):
+            if level is None:
+                # Restore the default level
+                level = BlockConsoleHandler.default_level
+            hdlr.setLevel(level)
+
+
+def get_logging_filename():
+    """Return the absolute path to the logs filename if set.
+    """
+    for hdlr in logging.getLogger().handlers:
+        if isinstance(hdlr, logging.FileHandler):
+            return hdlr.baseFilename
+    return None
+
+
+def get_crash_message():
+    msg = "system='{}', node='{}', release='{}', version='{}', machine='{}', processor='{}'\n".format(*platform.uname())
+    msg += " " + "*" * 83 + "\n"
+    msg += " * " + "Oops! It seems that pibooth has crached".center(80) + "*\n"
+    msg += " * " + "You can report an issue on https://github.com/pibooth/pibooth/issues/new".center(80) + "*\n"
+    if get_logging_filename():
+        msg += " * " + ("and post the file: {}".format(get_logging_filename())).center(80) + "*\n"
+    msg += " " + "*" * 83
+    return msg
+
+
+@contextlib.contextmanager
+def timeit(description):
+    """Measure time execution.
+    """
+    BlockConsoleHandler.indent()
+    LOGGER.info(description)
+    start = time.time()
+    try:
+        yield
+    finally:
+        BlockConsoleHandler.dedent()
+        LOGGER.debug("took %0.3f seconds", time.time() - start)
+
+
+def pkill(pattern):
+    """Kill all process matching the given pattern.
+
+    :param pattern: pattern used to match processes
+    :type pattern: str
+    """
+    for proc in psutil.process_iter():
+        if fnmatchcase(proc.name(), pattern):
+            LOGGER.debug("Try to kill process '%s'", proc.name())
+            try:
+                proc.kill()
+            except psutil.AccessDenied:
+                raise EnvironmentError("Can not kill '{}', root access is required. "
+                                       "(kill it manually before starting pibooth)".format(proc.name()))
+
+
+def open_text_editor(filename):
+    """Open a text editor to edit the configuration file.
+    """
+    editors = ['leafpad', 'mousepad', 'vi', 'emacs']
+    for editor in editors:
+        try:
+            process = subprocess.Popen([editor, filename])
+            process.communicate()
+            return True
+        except OSError as e:
+            if e.errno != errno.ENOENT:
+                # Something else went wrong while trying to run the editor
+                raise
+    LOGGER.critical("Can't find installed text editor among %s", editors)
+    return False
+
+
+def load_module(path):
+    """Load a Python module dynamically.
+    """
+    if not osp.isfile(path):
+        raise ValueError("Invalid Python module path '{}'".format(path))
+
+    dirname, filename = osp.split(path)
+    modname = osp.splitext(filename)[0]
+
+    if dirname not in sys.path:
+        sys.path.append(dirname)
+
+    for hook in sys.meta_path:
+        if hasattr(hook, 'find_module'):
+            # Deprecated since Python 3.4
+            loader = hook.find_module(modname, [dirname])
+            if loader:
+                return loader.load_module(modname)
+        else:
+            spec = hook.find_spec(modname, [dirname])
+            if spec:
+                return spec.loader.load_module(modname)
+
+    LOGGER.warning("Can not load Python module '%s' from '%s'", modname, path)
+
+
+def get_event_pos(display_size, event):
+    """
+    Return the position from finger or mouse event on x-axis and y-axis (x, y).
+
+    :param display_size: size of display for relative positioning in finger events
+    :param event: pygame event object
+    :return: position (x, y) in px
+    """
+    if event.type in (pygame.FINGERDOWN, pygame.FINGERMOTION, pygame.FINGERUP):
+        finger_pos = (event.x * display_size[0], event.y * display_size[1])
+        return finger_pos
+    return event.pos
diff -ruN ../pibooth_local_copy/pibooth/view/__init__.py ./pibooth/view/__init__.py
--- ../pibooth_local_copy/pibooth/view/__init__.py	1969-12-31 19:00:00
+++ ./pibooth/view/__init__.py	2025-05-16 14:02:41
@@ -0,0 +1,3 @@
+# -*- coding: utf-8 -*-
+
+from pibooth.view.window import PiWindow
diff -ruN ../pibooth_local_copy/pibooth/view/background.py ./pibooth/view/background.py
--- ../pibooth_local_copy/pibooth/view/background.py	1969-12-31 19:00:00
+++ ./pibooth/view/background.py	2025-05-16 14:02:41
@@ -0,0 +1,681 @@
+# -*- coding: utf-8 -*-
+
+import os.path as osp
+import pygame
+
+from pibooth import fonts, pictures
+from pibooth.language import get_translated_text
+
+ARROW_TOP = 'top'
+ARROW_BOTTOM = 'bottom'
+ARROW_HIDDEN = 'hidden'
+ARROW_TOUCH = 'touchscreen'
+
+
+def multiline_text_to_surfaces(text, color, rect, align='center'):
+    """Return a list of surfaces corresponding to each line of the text.
+    The surfaces are next to each others in order to fit the given rect.
+
+    The ``align`` parameter can be one of:
+       * top-left
+       * top-center
+       * top-right
+       * center-left
+       * center
+       * center-right
+       * bottom-left
+       * bottom-center
+       * bottom-right
+    """
+    surfaces = []
+    lines = text.splitlines()
+
+    font = fonts.get_pygame_font(max(lines, key=len), fonts.CURRENT,
+                                 rect.width, rect.height / len(lines))
+    for i, line in enumerate(lines):
+        surface = font.render(line, True, color)
+
+        if align.endswith('left'):
+            x = rect.left
+        elif align.endswith('center'):
+            x = rect.centerx - surface.get_rect().width / 2
+        elif align.endswith('right'):
+            x = rect.right - surface.get_rect().width
+        else:
+            raise ValueError("Invalid horizontal alignment '{}'".format(align))
+
+        height = surface.get_rect().height
+        if align.startswith('top'):
+            y = rect.top + i * height
+        elif align.startswith('center'):
+            y = rect.centery - len(lines) * height / 2 + i * height
+        elif align.startswith('bottom'):
+            y = rect.bottom - (len(lines) - i) * height
+        else:
+            raise ValueError("Invalid vertical alignment '{}'".format(align))
+
+        surfaces.append((surface, surface.get_rect(x=x, y=y)))
+    return surfaces
+
+
+class Background(object):
+
+    def __init__(self, image_name, color=(0, 0, 0), text_color=(255, 255, 255)):
+        self._rect = None
+        self._name = image_name
+        self._need_update = False
+
+        self._background = None
+        self._background_color = color
+        self._background_image = None
+
+        self._overlay = None
+
+        self._texts = []  # List of (surface, rect)
+        self._text_border = 20  # Distance to other elements
+        self._text_color = text_color
+
+        # Build rectangles around some areas for debuging purpose
+        self._show_outlines = True
+        self._outlines = []
+
+    def __str__(self):
+        """Return background final name.
+
+        It is used in the main window to distinguish backgrounds in the cache
+        thus each background string shall be uniq.
+        """
+        return "{}({})".format(self.__class__.__name__, self._name)
+
+    def _make_outlines(self, size):
+        """Return a red rectangle surface.
+        """
+        outlines = pygame.Surface(size, pygame.SRCALPHA, 32)
+        pygame.draw.rect(outlines, pygame.Color(255, 0, 0), outlines.get_rect(), 2)
+        return outlines
+
+    def _write_text(self, text, rect=None, align='center'):
+        """Write a text in the given rectangle.
+        """
+        if not rect:
+            rect = self._rect.inflate(-self._text_border, -self._text_border)
+        if self._show_outlines:
+            self._outlines.append((self._make_outlines(rect.size), rect))
+        self._texts.extend(multiline_text_to_surfaces(text, self._text_color, rect, align))
+
+    def set_color(self, color_or_path):
+        """Set background color (RGB tuple) or path to an image that used to
+        fill the background.
+
+        :param color_or_path: RGB color tuple or image path
+        :type color_or_path: tuple or str
+        """
+        if isinstance(color_or_path, (tuple, list)):
+            assert len(color_or_path) == 3, "Length of 3 is required for RGB tuple"
+            if color_or_path != self._background_color:
+                self._background_color = color_or_path
+                self._need_update = True
+        else:
+            assert osp.isfile(color_or_path), "Invalid image for window background: '{}'".format(color_or_path)
+            if color_or_path != self._background_image:
+                self._background_image = color_or_path
+                self._background_color = (0, 0, 0)
+                self._need_update = True
+
+    def get_color(self):
+        """Return the background color (RGB tuple).
+        """
+        return self._background_color
+
+    def set_text_color(self, color):
+        """Set text color (RGB tuple) used to write the texts.
+
+        :param color: RGB color tuple
+        :type color: tuple
+        """
+        assert len(color) == 3, "Length of 3 is required for RGB tuple"
+        if color != self._text_color:
+            self._text_color = color
+            self._need_update = True
+
+    def set_outlines(self, outlines=True):
+        """Draw outlines for each rectangle available for drawing
+        texts.
+
+        :param outlines: enable / disable outlines
+        :type outlines: bool
+        """
+        if outlines != self._show_outlines:
+            self._show_outlines = outlines
+            self._need_update = True
+
+    def resize(self, screen):
+        """Resize objects to fit to the screen.
+        """
+        if self._rect != screen.get_rect():
+            self._rect = screen.get_rect()
+            self._outlines = []
+
+            if self._background_image:
+                self._background = pictures.get_pygame_image(
+                    self._background_image, (self._rect.width, self._rect.height), crop=True, color=None)
+                self._background_color = pictures.get_pygame_main_color(self._background)
+
+            overlay_name = "{}.png".format(self._name)
+            if osp.isfile(pictures.get_filename(overlay_name)):
+                self._overlay = pictures.get_pygame_image(
+                    pictures.get_filename(overlay_name), (self._rect.width, self._rect.height), color=self._text_color, bg_color=self._background_color)
+
+            self.resize_texts()
+            self._need_update = True
+
+    def resize_texts(self, rect=None, align='center'):
+        """Update text surfaces.
+        """
+        self._texts = []
+        text = get_translated_text(self._name)
+        if text:
+            self._write_text(text, rect, align)
+
+    def paint(self, screen):
+        """Paint and animate the surfaces on the screen.
+        """
+        if self._background:
+            screen.blit(self._background, (0, 0))
+        else:
+            screen.fill(self._background_color)
+        if self._overlay:
+            screen.blit(self._overlay, self._overlay.get_rect(center=self._rect.center))
+        for text_surface, pos in self._texts:
+            screen.blit(text_surface, pos)
+        for outline_surface, pos in self._outlines:
+            screen.blit(outline_surface, pos)
+        self._need_update = False
+
+
+class IntroBackground(Background):
+
+    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
+        Background.__init__(self, "intro")
+        self.arrow_location = arrow_location
+        self.arrow_offset = arrow_offset
+        self.left_arrow = None
+        self.left_arrow_pos = None
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update and self.arrow_location != ARROW_HIDDEN:
+            if self.arrow_location == ARROW_TOUCH:
+                size = (self._rect.width * 0.2, self._rect.height * 0.2)
+
+                self.left_arrow = pictures.get_pygame_image("camera.png", size, vflip=False, color=self._text_color)
+
+                x = int(self._rect.width * 0.2)
+                y = int(self._rect.height // 2)
+            else:
+                size = (self._rect.width * 0.3, self._rect.height * 0.3)
+
+                vflip = True if self.arrow_location == ARROW_TOP else False
+                self.left_arrow = pictures.get_pygame_image("arrow.png", size, vflip=vflip, color=self._text_color)
+
+                x = int(self._rect.left + self._rect.width // 4
+                        - self.left_arrow.get_rect().width // 2)
+                if self.arrow_location == ARROW_TOP:
+                    y = self._rect.top + 10
+                else:
+                    y = int(self._rect.top + 2 * self._rect.height // 3)
+
+            self.left_arrow_pos = (x - self.arrow_offset, y)
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        if self.arrow_location == ARROW_HIDDEN:
+            rect = pygame.Rect(self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height - 2 * self._text_border)
+            align = 'center'
+        elif self.arrow_location == ARROW_BOTTOM:
+            rect = pygame.Rect(self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.6 - self._text_border)
+            align = 'bottom-center'
+        elif self.arrow_location == ARROW_TOUCH:
+            rect = pygame.Rect(self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.4 - self._text_border)
+            align = 'bottom-center'
+        else:
+            rect = pygame.Rect(self._text_border, self._rect.height * 0.4,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.6 - self._text_border)
+            align = 'top-center'
+        Background.resize_texts(self, rect, align)
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        if self.arrow_location != ARROW_HIDDEN:
+            screen.blit(self.left_arrow, self.left_arrow_pos)
+
+
+class IntroWithPrintBackground(IntroBackground):
+
+    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
+        IntroBackground.__init__(self, arrow_location, arrow_offset)
+        self.right_arrow = None
+        self.right_arrow_pos = None
+
+    def __str__(self):
+        """Return background final name.
+
+        It is used in the main window to distinguish backgrounds in the cache
+        thus each background string shall be uniq.
+        """
+        return "{}({})".format(self.__class__.__name__, "intro_print")
+
+    def resize(self, screen):
+        IntroBackground.resize(self, screen)
+        if self._need_update and self.arrow_location != ARROW_HIDDEN:
+            size = (self._rect.width * 0.1, self._rect.height * 0.1)
+            if self.arrow_location == ARROW_TOUCH:
+                self.right_arrow = pictures.get_pygame_image("hand.png", size, hflip=False,
+                                                             vflip=False, angle=-70, color=self._text_color)
+            else:
+                vflip = True if self.arrow_location == ARROW_TOP else False
+                angle = -70 if self.arrow_location == ARROW_TOP else 70
+                self.right_arrow = pictures.get_pygame_image("arrow.png", size, hflip=False,
+                                                             vflip=vflip, angle=angle, color=self._text_color)
+
+            x = int(self._rect.left + self._rect.width // 2
+                    - self.right_arrow.get_rect().width // 2)
+            if self.arrow_location == ARROW_TOP:
+                y = self._rect.top + 10
+            else:
+                y = int(self._rect.bottom - self.right_arrow.get_rect().height * 1.1)
+            self.right_arrow_pos = (x - self.arrow_offset, y)
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        IntroBackground.resize_texts(self)
+        text = get_translated_text("intro_print")
+        if text:
+            rect = pygame.Rect(self._rect.width * 0.30 + self._text_border, 0,
+                               self._rect.width * 0.20 - 2 * self._text_border,
+                               self._rect.height * 0.3 - 2 * self._text_border)
+            if self.arrow_location == ARROW_TOP:
+                rect.top = self._rect.height * 0.08
+            else:
+                rect.bottom = self._rect.height - self._rect.height * 0.08
+            self._write_text(text, rect)
+
+    def paint(self, screen):
+        IntroBackground.paint(self, screen)
+        if self.arrow_location != ARROW_HIDDEN:
+            screen.blit(self.right_arrow, self.right_arrow_pos)
+
+
+class ChooseBackground(Background):
+
+    def __init__(self, choices, arrow_location=ARROW_BOTTOM, arrow_offset=0):
+        Background.__init__(self, "choose")
+        self.arrow_location = arrow_location
+        self.arrow_offset = arrow_offset
+        self.choices = choices
+        self.layout0 = None
+        self.layout0_pos = None
+        self.layout1 = None
+        self.layout1_pos = None
+        self.left_arrow = None
+        self.left_arrow_pos = None
+        self.right_arrow = None
+        self.right_arrow_pos = None
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update:
+            size = (self._rect.width * 0.45, self._rect.height * 0.6)
+            self.layout0 = pictures.get_pygame_layout_image(
+                self._text_color, self._background_color, self.choices[0], size)
+            self.layout1 = pictures.get_pygame_layout_image(
+                self._text_color, self._background_color, self.choices[1], size)
+
+            inter = (self._rect.width - 2 * self.layout0.get_rect().width) // 3
+
+            x0 = int(self._rect.left + inter)
+            x1 = int(self._rect.left + 2 * inter + self.layout0.get_rect().width)
+            y = int(self._rect.top + self._rect.height * 0.3)
+
+            self.layout0_pos = (x0, y)
+            self.layout1_pos = (x1, y)
+
+            if self.arrow_location in [ARROW_TOP, ARROW_BOTTOM]:
+                if self.arrow_location == ARROW_TOP:
+                    y = 5
+                    x_offset = 30
+                    size = (self._rect.width * 0.1, self._rect.top + y + 30)
+                else:
+                    x_offset = 0
+                    y = self.layout0_pos[1] + self.layout0.get_rect().height + 5
+                    size = (self._rect.width * 0.1, self._rect.bottom - y - 5)
+
+                vflip = True if self.arrow_location == ARROW_TOP else False
+                self.left_arrow = pictures.get_pygame_image("arrow.png", size, vflip=vflip,
+                                                            color=self._text_color)
+                self.right_arrow = pictures.get_pygame_image("arrow.png", size, hflip=True,
+                                                             vflip=vflip, color=self._text_color)
+
+                inter = (self._rect.width - 2 * self.left_arrow.get_rect().width) // 4
+
+                x0 = int(self._rect.left + inter) - x_offset
+                x1 = int(self._rect.left + 3 * inter + self.left_arrow.get_rect().width) + x_offset
+
+                self.left_arrow_pos = (x0 - self.arrow_offset, y)
+                self.right_arrow_pos = (x1 + self.arrow_offset, y)
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        rect = pygame.Rect(self._text_border, self._text_border,
+                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
+        Background.resize_texts(self, rect)
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        screen.blit(self.layout0, self.layout0_pos)
+        screen.blit(self.layout1, self.layout1_pos)
+        if self.arrow_location in [ARROW_TOP, ARROW_BOTTOM]:
+            screen.blit(self.left_arrow, self.left_arrow_pos)
+            screen.blit(self.right_arrow, self.right_arrow_pos)
+
+
+class ChosenBackground(Background):
+
+    def __init__(self, choices, selected):
+        Background.__init__(self, "chosen")
+        self.choices = choices
+        self.selected = selected
+        self.layout = None
+        self.layout_pos = None
+
+    def __str__(self):
+        """Return background final name.
+        It is used in the main window to distinguish background in the cache.
+        """
+        return "{}({}{})".format(self.__class__.__name__, self._name, self.selected)
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update:
+            size = (self._rect.width * 0.6, self._rect.height * 0.6)
+
+            self.layout = pictures.get_pygame_layout_image(
+                self._text_color, self._background_color, self.selected, size)
+
+            x = self.layout.get_rect(center=self._rect.center).left
+            y = int(self._rect.top + self._rect.height * 0.3)
+
+            self.layout_pos = (x, y)
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        rect = pygame.Rect(self._text_border, self._text_border,
+                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
+        Background.resize_texts(self, rect)
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        screen.blit(self.layout, self.layout_pos)
+
+
+class CaptureBackground(Background):
+
+    def __init__(self):
+        Background.__init__(self, "capture")
+        self.left_people = None
+        self.left_people_pos = None
+        self.right_people = None
+        self.right_people_pos = None
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update:
+            images_height = self._rect.height / 4
+            size = (images_height * 2, images_height)
+
+            self.left_people = pictures.get_pygame_image("capture_left.png", size=size,
+                                                         color=self._text_color)
+            self.right_people = pictures.get_pygame_image("capture_right.png", size=size,
+                                                          color=self._text_color)
+
+            x = int(self._rect.right - size[0])
+            y = int(self._rect.bottom - images_height)
+
+            self.left_people_pos = (0, y)
+            self.right_people_pos = (x + size[0] - 1.5 * self.right_people.get_rect().width, y)
+
+            if self._show_outlines:
+                self._outlines.append((self._make_outlines(size), (0, y)))
+                self._outlines.append((self._make_outlines(size), (x, y)))
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        screen.blit(self.left_people, self.left_people_pos)
+        screen.blit(self.right_people, self.right_people_pos)
+
+
+class ProcessingBackground(Background):
+
+    def __init__(self):
+        Background.__init__(self, "processing")
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        rect = pygame.Rect(self._text_border, self._rect.height * 0.8 - self._text_border,
+                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
+        Background.resize_texts(self, rect)
+
+
+class PrintBackground(Background):
+
+    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
+        Background.__init__(self, "print")
+        self.arrow_location = arrow_location
+        self.arrow_offset = arrow_offset
+        self.right_arrow = None
+        self.right_arrow_pos = None
+        self.left_arrow = None
+        self.left_arrow_pos = None
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update and self.arrow_location != ARROW_HIDDEN:
+
+            if self.arrow_location == ARROW_TOUCH:
+                size = (self._rect.width // 4, self._rect.height // 4)
+                # Right arrow
+                self.right_arrow = pictures.get_pygame_image(
+                    "printer_touch.png", size, hflip=False, vflip=False, color=self._text_color)
+                x = int(self._rect.left + self._rect.width * 0.70
+                        - self.right_arrow.get_rect().width // 2)
+                y = int(self._rect.top + self._rect.height * 0.45)
+            else:
+                size = (self._rect.width * 0.3, self._rect.height * 0.3)
+
+                vflip = True if self.arrow_location == ARROW_TOP else False
+
+                # Right arrow
+                self.right_arrow = pictures.get_pygame_image(
+                    "arrow.png", size, hflip=True, vflip=vflip, color=self._text_color)
+
+                x = int(self._rect.left + self._rect.width * 0.75
+                        - self.right_arrow.get_rect().width // 2)
+                if self.arrow_location == ARROW_TOP:
+                    y = self._rect.top + 10
+                else:
+                    y = int(self._rect.top + 2 * self._rect.height // 3)
+
+            self.right_arrow_pos = (x + self.arrow_offset, y)
+
+            # Left arrow
+            size = (self._rect.width * 0.1, self._rect.height * 0.1)
+
+            if self.arrow_location == ARROW_TOUCH:
+                self.left_arrow = pictures.get_pygame_image(
+                    "hand.png", size, hflip=False, vflip=False, angle=70, color=self._text_color)
+            else:
+                vflip = True if self.arrow_location == ARROW_TOP else False
+                angle = 70 if self.arrow_location == ARROW_TOP else -70
+                self.left_arrow = pictures.get_pygame_image(
+                    "arrow.png", size, hflip=False, vflip=vflip, angle=angle, color=self._text_color)
+
+            x = int(self._rect.left + self._rect.width // 2
+                    - self.left_arrow.get_rect().width // 2)
+
+            if self.arrow_location == ARROW_TOP:
+                y = self._rect.top + 10
+            else:
+                y = int(self._rect.bottom - self.left_arrow.get_rect().height * 1.1)
+
+            self.left_arrow_pos = (x - self.arrow_offset, y)
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        if self.arrow_location == ARROW_HIDDEN:
+            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height - 2 * self._text_border)
+            align = 'center'
+        elif self.arrow_location == ARROW_BOTTOM:
+            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.6 - self._text_border)
+            align = 'bottom-center'
+        elif self.arrow_location == ARROW_TOUCH:
+            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.4 - self._text_border)
+            align = 'bottom-center'
+        else:
+            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._rect.height * 0.4,
+                               self._rect.width / 2 - 2 * self._text_border,
+                               self._rect.height * 0.6 - self._text_border)
+            align = 'top-center'
+        Background.resize_texts(self, rect, align)
+
+        text = get_translated_text("print_forget")
+        if text:
+            rect = pygame.Rect(self._rect.width // 2, 0,
+                               self._rect.width // 5 - 2 * self._text_border,
+                               self._rect.height * 0.3 - 2 * self._text_border)
+            if self.arrow_location == ARROW_TOP:
+                rect.top = self._rect.height * 0.08
+            else:
+                rect.bottom = self._rect.height - self._rect.height * 0.08
+
+            self._write_text(text, rect)
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        if self.arrow_location != ARROW_HIDDEN:
+            screen.blit(self.right_arrow, self.right_arrow_pos)
+            screen.blit(self.left_arrow, self.left_arrow_pos)
+
+
+class FinishedBackground(Background):
+
+    def __init__(self):
+        Background.__init__(self, "finished")
+        self.left_people = None
+        self.left_people_pos = None
+        self.right_people = None
+        self.right_people_pos = None
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update:
+            left_rect = pygame.Rect(10, 0, self._rect.width * 0.4, self._rect.height * 0.5)
+            left_rect.top = self._rect.centery - left_rect.centery
+            right_rect = pygame.Rect(0, 0, self._rect.width * 0.3, self._rect.height * 0.5)
+            right_rect.top = self._rect.centery - right_rect.centery
+            right_rect.right = self._rect.right - 10
+
+            self.left_people = pictures.get_pygame_image("finished_left.png", size=left_rect.size,
+                                                         color=self._text_color)
+            self.right_people = pictures.get_pygame_image("finished_right.png", size=right_rect.size,
+                                                          color=self._text_color)
+
+            self.left_people_pos = self.left_people.get_rect(center=left_rect.center).topleft
+            self.right_people_pos = self.right_people.get_rect(center=right_rect.center).topleft
+
+            if self._show_outlines:
+                self._outlines.append((self._make_outlines(left_rect.size), left_rect.topleft))
+                self._outlines.append((self._make_outlines(right_rect.size), right_rect.topleft))
+
+    def resize_texts(self):
+        """Update text surfaces.
+        """
+        rect = pygame.Rect(0, 0, self._rect.width * 0.35, self._rect.height * 0.4)
+        rect.center = self._rect.center
+        rect.bottom = self._rect.bottom - 10
+        Background.resize_texts(self, rect)
+
+    def paint(self, screen):
+        Background.paint(self, screen)
+        if self.left_people:
+            screen.blit(self.left_people, self.left_people_pos)
+        if self.right_people:
+            screen.blit(self.right_people, self.right_people_pos)
+
+
+class FinishedWithImageBackground(FinishedBackground):
+
+    def __init__(self, foreground_size):
+        FinishedBackground.__init__(self)
+        self._name = "finishedwithimage"
+        self.foreground_size = foreground_size
+
+    def resize(self, screen):
+        Background.resize(self, screen)
+        if self._need_update:
+            # Note: '0.9' ratio comes from PiWindow._update_foreground() method which
+            # lets a margin between window borders and fullscreen foreground picture
+            frgnd_rect = pygame.Rect(0, 0, *pictures.sizing.new_size_keep_aspect_ratio(
+                self.foreground_size, (self._rect.size[0] * 0.9, self._rect.size[1]*0.9)))
+            xmargin = abs(self._rect.width - frgnd_rect.width) // 2
+            ymargin = abs(self._rect.height - frgnd_rect.height) // 2
+
+            if xmargin > 50:
+                margin = min(xmargin, self._rect.height // 3)
+            elif ymargin > 50:
+                margin = min(ymargin, self._rect.width // 3)
+            else:  # Too small
+                self.left_people = None
+                self.right_people = None
+                return
+
+            left_rect = pygame.Rect(0, 0, margin, margin)
+            right_rect = pygame.Rect(0, 0, margin, margin)
+            left_rect.bottom = self._rect.bottom
+            right_rect.right = self._rect.right
+
+            self.left_people = pictures.get_pygame_image("finished_left.png", size=left_rect.size,
+                                                         color=self._text_color)
+            self.right_people = pictures.get_pygame_image("finished_right.png", size=right_rect.size,
+                                                          color=self._text_color)
+
+            self.left_people_pos = self.left_people.get_rect(center=left_rect.center).topleft
+            self.right_people_pos = self.right_people.get_rect(center=right_rect.center).topleft
+
+            if self._show_outlines and left_rect and right_rect:
+                self._outlines.append((self._make_outlines(left_rect.size), left_rect.topleft))
+                self._outlines.append((self._make_outlines(right_rect.size), right_rect.topleft))
+
+
+class OopsBackground(Background):
+
+    def __init__(self):
+        Background.__init__(self, "oops")
diff -ruN ../pibooth_local_copy/pibooth/view/window.py ./pibooth/view/window.py
--- ../pibooth_local_copy/pibooth/view/window.py	1969-12-31 19:00:00
+++ ./pibooth/view/window.py	2025-05-16 14:02:41
@@ -0,0 +1,390 @@
+# -*- coding: utf-8 -*-
+
+"""Pibooth view management.
+"""
+
+import os
+import time
+import contextlib
+import pygame
+from pygame import gfxdraw
+from PIL import Image
+from pibooth import pictures, fonts
+from pibooth.view import background
+from pibooth.utils import LOGGER
+from pibooth.pictures import sizing
+
+
+class PiWindow(object):
+
+    """Class to handle the window.
+    The following attributes are available for use in plugins:
+
+    :attr surface: surface on which sprites are displayed
+    :type surface: :py:class:`pygame.Surface`
+    :attr is_fullscreen: set to True if the window is display in full screen
+    :type is_fullscreen: bool
+    :attr display_size: tuple (width, height) represneting the size of the screen
+    :type display_size: tuple
+    """
+
+    CENTER = 'center'
+    RIGHT = 'right'
+    LEFT = 'left'
+    FULLSCREEN = 'fullscreen'
+
+    def __init__(self, title,
+                 size=(800, 480),
+                 color=(0, 0, 0),
+                 text_color=(255, 255, 255),
+                 arrow_location=background.ARROW_BOTTOM,
+                 arrow_offset=0,
+                 debug=False):
+        self.__size = size
+        self.debug = debug
+        self.bg_color = color
+        self.text_color = text_color
+        self.arrow_location = arrow_location
+        self.arrow_offset = arrow_offset
+
+        # Prepare the pygame module for use
+        if 'SDL_VIDEO_WINDOW_POS' not in os.environ:
+            os.environ['SDL_VIDEO_CENTERED'] = '1'
+        pygame.init()
+
+        # Release the soundcard as we are not using sounds
+        pygame.mixer.quit()
+
+        # Save the desktop mode, shall be done before `setmode` (SDL 1.2.10, and pygame 1.8.0)
+        info = pygame.display.Info()
+
+        pygame.display.set_caption(title)
+        self.is_fullscreen = False
+        self.display_size = (info.current_w, info.current_h)
+        self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
+
+        self._buffered_images = {}
+        self._current_background = None
+        self._current_foreground = None
+        self._print_number = 0
+        self._print_failure = False
+        self._capture_number = (0, 4)  # (current, max)
+
+        self._pos_map = {self.CENTER: self._center_pos,
+                         self.RIGHT: self._right_pos,
+                         self.LEFT: self._left_pos,
+                         self.FULLSCREEN: self._center_pos}
+
+        # Don't use pygame.mouse.get_cursor() because will be removed in pygame2
+        self._cursor = ((16, 16), (0, 0),
+                        (0, 0, 64, 0, 96, 0, 112, 0, 120, 0, 124, 0, 126, 0, 127, 0,
+                         127, 128, 124, 0, 108, 0, 70, 0, 6, 0, 3, 0, 3, 0, 0, 0),
+                        (192, 0, 224, 0, 240, 0, 248, 0, 252, 0, 254, 0, 255, 0, 255,
+                         128, 255, 192, 255, 224, 254, 0, 239, 0, 207, 0, 135, 128, 7, 128, 3, 0))
+
+    def _update_foreground(self, pil_image, pos=CENTER, resize=True):
+        """Show a PIL image on the foreground.
+        Only one is bufferized to avoid memory leak.
+        """
+        image_name = id(pil_image)
+
+        if pos == self.FULLSCREEN:
+            image_size_max = (self.surface.get_size()[0] * 0.9, self.surface.get_size()[1] * 0.9)
+        else:
+            image_size_max = (self.surface.get_size()[0] * 0.48, self.surface.get_size()[1])
+
+        buff_size, buff_image = self._buffered_images.get(image_name, (None, None))
+        if buff_image and image_size_max == buff_size:
+            image = buff_image
+        else:
+            if resize:
+                image = pil_image.resize(sizing.new_size_keep_aspect_ratio(
+                    pil_image.size, image_size_max), Image.ANTIALIAS)
+            else:
+                image = pil_image
+            image = pygame.image.frombuffer(image.tobytes(), image.size, image.mode)
+            if self._current_foreground:
+                self._buffered_images.pop(id(self._current_foreground[0]), None)
+            LOGGER.debug("Add to buffer the image '%s'", image_name)
+            self._buffered_images[image_name] = (image_size_max, image)
+
+        self._current_foreground = (pil_image, pos, resize)
+
+        if self.debug and resize:
+            # Build rectangle around picture area for debuging purpose
+            outlines = pygame.Surface(image_size_max, pygame.SRCALPHA, 32)
+            pygame.draw.rect(outlines, pygame.Color(255, 0, 0), outlines.get_rect(), 2)
+            self.surface.blit(outlines, self._pos_map[pos](outlines))
+
+        return self.surface.blit(image, self._pos_map[pos](image))
+
+    def _update_background(self, bkgd):
+        """Show image on the background.
+        """
+        self._current_background = self._buffered_images.setdefault(str(bkgd), bkgd)
+        self._current_background.set_color(self.bg_color)
+        self._current_background.set_outlines(self.debug)
+        self._current_background.set_text_color(self.text_color)
+        self._current_background.resize(self.surface)
+        self._current_background.paint(self.surface)
+        self._update_capture_number()
+        self._update_print_number()
+
+    def _update_capture_number(self):
+        """Update the captures counter displayed.
+        """
+        if not self._capture_number[0]:
+            return  # Dont show counter: no picture taken
+
+        center = self.surface.get_rect().center
+        radius = 10
+        border = 20
+        x = center[0] - (2 * radius * self._capture_number[1] + border * (self._capture_number[1] - 1)) // 2
+        y = self.surface.get_size()[1] - radius - border
+        for nbr in range(self._capture_number[1]):
+            gfxdraw.aacircle(self.surface, x, y, radius, self.text_color)
+            if self._capture_number[0] > nbr:
+                # Because anti-aliased filled circle doesn't exist
+                gfxdraw.aacircle(self.surface, x, y, radius - 3, self.text_color)
+                gfxdraw.filled_circle(self.surface, x, y, radius - 3, self.text_color)
+            x += (2 * radius + border)
+
+    def _update_print_number(self):
+        """Update the number of files in the printer queue.
+        """
+        if not self._print_number and not self._print_failure:
+            return  # Dont show counter: no file in queue, no failure
+
+        smaller = self.surface.get_size()[1] if self.surface.get_size(
+        )[1] < self.surface.get_size()[0] else self.surface.get_size()[0]
+        side = int(smaller * 0.05)  # 5% of the window
+
+        if side > 0:
+            if self._print_failure:
+                image = pictures.get_pygame_image('printer_failure.png', (side, side), color=self.text_color)
+            else:
+                image = pictures.get_pygame_image('printer.png', (side, side), color=self.text_color)
+            font = pygame.font.Font(fonts.CURRENT, side)
+            label = font.render(str(self._print_number), True, self.text_color)
+
+            height = max((image.get_rect().height, label.get_rect().height)) + 20
+            bg = pygame.Surface((image.get_rect().width + label.get_rect().width + side + 10, height))
+            bg.fill(self._current_background.get_color())
+            rect = bg.get_rect()
+            rect.bottomleft = self.get_rect().bottomleft
+            rect_image = image.get_rect(left=10, centery=rect.centery)
+            rect_label = label.get_rect(centerx=rect_image.right + (rect.width -
+                                        rect_image.right) // 2, centery=rect.centery)
+            self.surface.blit(bg, rect.topleft)
+            self.surface.blit(image, rect_image.topleft)
+            self.surface.blit(label, rect_label.topleft)
+
+    def _center_pos(self, image):
+        """
+        Return the position of the given image to be centered on window.
+        """
+        pos = self.surface.get_rect().center
+        return image.get_rect(center=pos) if image else pos
+
+    def _left_pos(self, image):
+        """
+        Return the position of the given image to be put on the left of the screen
+        """
+        pos = (self.surface.get_rect().centerx // 2, self.surface.get_rect().centery)
+        return image.get_rect(center=pos) if image else pos
+
+    def _right_pos(self, image):
+        """
+        Return the position of the given image to be put on the right of the screen
+        """
+        pos = (self.surface.get_rect().centerx + self.surface.get_rect().centerx // 2, self.surface.get_rect().centery)
+        return image.get_rect(center=pos) if image else pos
+
+    def get_rect(self, absolute=False):
+        """Return a Rect object (as defined in pygame) for this window.
+
+        :param absolute: absolute position considering the window centered on screen
+        :type absolute: bool
+        """
+        if absolute:
+            return self.surface.get_rect(center=(self.display_size[0] / 2, self.display_size[1] / 2))
+        return self.surface.get_rect()
+
+    def get_image(self):
+        """Return the currently displayed foreground image.
+        """
+        if self._current_foreground:
+            return self._current_foreground[0]
+        return None
+
+    def resize(self, size):
+        """Resize the window keeping aspect ratio.
+        """
+        if not self.is_fullscreen:
+            self.__size = size  # Manual resizing
+            self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
+        self.update()
+
+    def update(self):
+        """Repaint the window with currently displayed images.
+        """
+        if self._current_background:
+            self._update_background(self._current_background)
+        else:
+            self._update_capture_number()
+            self._update_print_number()
+        if self._current_foreground:
+            self._update_foreground(*self._current_foreground)
+
+    def show_oops(self):
+        """Show failure view in case of exception.
+        """
+        self._capture_number = (0, self._capture_number[1])
+        self._update_background(background.OopsBackground())
+
+    def show_intro(self, pil_image=None, with_print=True):
+        """Show introduction view.
+        """
+        self._capture_number = (0, self._capture_number[1])
+        if with_print and pil_image:
+            self._update_background(background.IntroWithPrintBackground(self.arrow_location, self.arrow_offset))
+        else:
+            self._update_background(background.IntroBackground(self.arrow_location, self.arrow_offset))
+
+        if pil_image:
+            self._update_foreground(pil_image, self.RIGHT)
+        elif self._current_foreground:
+            self._buffered_images.pop(id(self._current_foreground[0]), None)
+            self._current_foreground = None
+
+    def show_choice(self, choices, selected=None):
+        """Show the choice view.
+        """
+        self._capture_number = (0, self._capture_number[1])
+        if not selected:
+            self._update_background(background.ChooseBackground(choices, self.arrow_location, self.arrow_offset))
+        else:
+            self._update_background(background.ChosenBackground(choices, selected))
+
+    def show_image(self, pil_image=None, pos=CENTER):
+        """Show PIL image as it (no resize).
+        """
+        if not pil_image:
+            # Clear the currently displayed image
+            if self._current_foreground:
+                _, image = self._buffered_images.pop(id(self._current_foreground[0]))
+                _, pos, _ = self._current_foreground
+                self._current_foreground = None
+                image.fill((0, 0, 0))
+                return self.surface.blit(image, self._pos_map[pos](image))
+        else:
+            return self._update_foreground(pil_image, pos, False)
+
+    def show_work_in_progress(self):
+        """Show wait view.
+        """
+        self._capture_number = (0, self._capture_number[1])
+        self._update_background(background.ProcessingBackground())
+
+    def show_print(self, pil_image=None):
+        """Show print view (image resized on the left).
+        """
+        self._capture_number = (0, self._capture_number[1])
+        self._update_background(background.PrintBackground(self.arrow_location,
+                                                           self.arrow_offset))
+        if pil_image:
+            self._update_foreground(pil_image, self.LEFT)
+
+    def show_finished(self, pil_image=None):
+        """Show finished view (image resized fullscreen).
+        """
+        self._capture_number = (0, self._capture_number[1])
+        if pil_image:
+            bg = background.FinishedWithImageBackground(pil_image.size)
+            if self._buffered_images.get(str(bg), bg).foreground_size != pil_image.size:
+                self._buffered_images.pop(str(bg))  # Drop cache, foreground size ratio has changed
+            self._update_background(background.FinishedWithImageBackground(pil_image.size))
+            self._update_foreground(pil_image, self.FULLSCREEN)
+        else:
+            self._update_background(background.FinishedBackground())
+
+    @contextlib.contextmanager
+    def flash(self, count):
+        """Flash the window content.
+        """
+        if count < 1:
+            raise ValueError("The flash counter shall be greater than 0")
+
+        for i in range(count):
+            self.surface.fill((255, 255, 255))
+            if self._current_foreground:
+                # Flash only the background, keep foreground at the top
+                self._update_foreground(*self._current_foreground)
+            pygame.event.pump()
+            pygame.display.update()
+            time.sleep(0.02)
+            if i == count - 1:
+                yield  # Let's do actions before end of flash
+                self.update()
+                pygame.event.pump()
+                pygame.display.update()
+            else:
+                self.update()
+                pygame.event.pump()
+                pygame.display.update()
+                time.sleep(0.02)
+
+    def set_capture_number(self, current_nbr, total_nbr):
+        """Set the current number of captures taken.
+        """
+        if total_nbr < 1:
+            raise ValueError("Total number of captures shall be greater than 0")
+
+        self._capture_number = (current_nbr, total_nbr)
+        self._update_background(background.CaptureBackground())
+        if self._current_foreground:
+            self._update_foreground(*self._current_foreground)
+        pygame.display.update()
+
+    def set_print_number(self, current_nbr=None, failure=None):
+        """Set the current number of tasks in the printer queue.
+        """
+        update = False
+
+        if current_nbr is not None and self._print_number != current_nbr:
+            self._print_number = current_nbr
+            update = True
+
+        if failure is not None and self._print_failure != failure:
+            self._print_failure = failure
+            update = True
+
+        if update:
+            self._update_background(self._current_background)
+            if self._current_foreground:
+                self._update_foreground(*self._current_foreground)
+            pygame.display.update()
+
+    def toggle_fullscreen(self):
+        """Set window to full screen or initial size.
+        """
+        if self.is_fullscreen:
+            self.is_fullscreen = False  # Set before resize
+            pygame.mouse.set_cursor(*self._cursor)
+            self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
+        else:
+            self.is_fullscreen = True  # Set before resize
+            # Make an invisible cursor (don't use pygame.mouse.set_visible(False) because
+            # the mouse event will always return the window bottom-right coordinate)
+            pygame.mouse.set_cursor((8, 8), (0, 0), (0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0))
+            self.surface = pygame.display.set_mode(self.display_size, pygame.FULLSCREEN)
+
+        self.update()
+
+    def drop_cache(self):
+        """Drop all cached background and foreground to force
+        refreshing the view.
+        """
+        self._current_background = None
+        self._current_foreground = None
+        self._buffered_images = {}
diff -ruN ../pibooth_local_copy/pictures/__init__.py ./pictures/__init__.py
--- ../pibooth_local_copy/pictures/__init__.py	2025-05-16 13:26:47
+++ ./pictures/__init__.py	1969-12-31 19:00:00
@@ -1,192 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import os.path as osp
-from PIL import Image, ImageOps
-import pygame
-from pibooth import language
-from pibooth import fonts
-from pibooth.pictures import factory
-from pibooth.pictures import sizing
-
-
-AUTO = 'auto'
-PORTRAIT = 'portrait'
-LANDSCAPE = 'landscape'
-
-
-def get_filename(name):
-    """Return absolute path to a picture located in the current package.
-
-    :param name: name of an image located in language folders
-    :type name: str
-
-    :return: absolute image path
-    :rtype: str
-    """
-    return osp.join(osp.dirname(osp.abspath(__file__)), 'assets', name)
-
-
-def colorize_pil_image(pil_image, color, bg_color=None):
-    """Convert a picto in white to the corresponding color.
-
-    :param pil_image: PIL image to be colorized
-    :type pil_image: :py:class:`PIL.Image`
-    :param color: RGB color to convert the picto
-    :type color: tuple
-    :param bg_color: RGB color to use for the picto's background
-    :type bg_color: tuple
-    """
-    if not bg_color:
-        bg_color = (abs(color[0] - 255), abs(color[1] - 255), abs(color[2] - 255))
-    _, _, _, alpha = pil_image.split()
-    gray_pil_image = pil_image.convert('L')
-    new_pil_image = ImageOps.colorize(gray_pil_image, black=bg_color, white=color)
-    new_pil_image.putalpha(alpha)
-    return new_pil_image
-
-
-def get_pygame_main_color(surface):
-    """Return the main color of the given pygame surface.
-    """
-    monopixel_surface = pygame.transform.scale(surface, (1, 1))
-    return tuple(monopixel_surface.get_at((0, 0)))
-
-
-def get_pygame_image(name, size=None, antialiasing=True, hflip=False, vflip=False,
-                     crop=False, angle=0, color=(255, 255, 255), bg_color=None):
-    """Return a Pygame image. If a size is given, the image is
-    resized keeping the original image's aspect ratio.
-
-    :param name: name of an image located in language folders
-    :type name: str
-    :param size: resize image to this size
-    :type size: tuple
-    :param antialiasing: use antialiasing algorithm when resize
-    :type antialiasing: bool
-    :param hflip: apply an horizontal flip
-    :type hflip: bool
-    :param vflip: apply a vertical flip
-    :type vflip: bool
-    :param crop: crop image to fit aspect ration of the size
-    :type crop: bool
-    :param angle: angle of rotation of the image
-    :type angle: int
-    :param color: recolorize the image with this RGB color
-    :type color: tuple
-    :param bg_color: recolorize the image background with this RGB color
-    :type bg_color: tuple
-
-    :return: pygame.Surface with image
-    :rtype: object
-    """
-    path = get_filename(name)
-    if not size and not color:
-        image = pygame.image.load(path).convert()
-    else:
-        if osp.isfile(path):
-            pil_image = Image.open(path)
-        else:
-            pil_image = Image.new('RGBA', size, (0, 0, 0, 0))
-
-        if color:
-            pil_image = colorize_pil_image(pil_image, color, bg_color)
-
-        if crop:
-            pil_image = pil_image.crop(sizing.new_size_by_croping_ratio(pil_image.size, size))
-        pil_image = pil_image.resize(sizing.new_size_keep_aspect_ratio(pil_image.size, size),
-                                     Image.ANTIALIAS if antialiasing else Image.NEAREST)
-
-        image = pygame.image.frombuffer(pil_image.tobytes(), pil_image.size, pil_image.mode)
-
-    if hflip or vflip:
-        image = pygame.transform.flip(image, hflip, vflip)
-    if angle != 0:
-        image = pygame.transform.rotate(image, angle)
-    return image
-
-
-def get_pygame_layout_image(text_color, bg_color, layout_number, size):
-    """Generate the layout image with the corresponding text.
-
-    :param text_color: RGB color for texts
-    :type text_color: tuple
-    :param layout_number: number of captures on the layout
-    :type layout_number: int
-    :param size: maximum size of the layout surface
-    :type size: tuple
-
-    :return: surface
-    :rtype: :py:class:`pygame.Surface`
-    """
-    layout_image = get_pygame_image("layout{0}.png".format(layout_number),
-                                    size, color=text_color, bg_color=bg_color)
-    text = language.get_translated_text(str(layout_number))
-    if text:
-        rect = layout_image.get_rect()
-        rect = pygame.Rect(rect.x + rect.width * 0.3 / 2,
-                           rect.y + rect.height * 0.76,
-                           rect.width * 0.7, rect.height * 0.20)
-        text_font = fonts.get_pygame_font(text, fonts.CURRENT, rect.width, rect.height)
-        surface = text_font.render(text, True, bg_color)
-        layout_image.blit(surface, surface.get_rect(center=rect.center))
-    return layout_image
-
-
-def get_best_orientation(captures):
-    """Return the most adapted orientation (PORTRAIT or LANDSCAPE),
-    depending on the resolution of the given captures.
-
-    It use the size of the first capture to determine the orientation.
-
-    :param captures: list of captures to concatenate
-    :type captures: list
-
-    :return: orientation PORTRAIT or LANDSCAPE
-    :rtype: str
-    """
-    is_portrait = captures[0].size[0] < captures[0].size[1]
-    if len(captures) == 1 or len(captures) == 4:
-        if is_portrait:
-            orientation = PORTRAIT
-        else:
-            orientation = LANDSCAPE
-    elif len(captures) == 2 or len(captures) == 3:
-        if is_portrait:
-            orientation = LANDSCAPE
-        else:
-            orientation = PORTRAIT
-    else:
-        raise ValueError("List of max 4 pictures expected, got {}".format(len(captures)))
-    return orientation
-
-
-def get_picture_factory(captures, orientation=AUTO, paper_format=(4, 6), force_pil=False, dpi=600):
-    """Return the picture factory use to concatenate the captures.
-
-    :param captures: list of captures to concatenate
-    :type captures: list
-    :param orientation: paper orientation
-    :type orientation: str
-    :param paper_format: paper size in inches
-    :type paper_format: tuple
-    :param force_pil: force use PIL implementation
-    :type force_pil: bool
-    :param dpi: dot-per-inche resolution
-    :type dpi: int
-    """
-    assert orientation in (AUTO, PORTRAIT, LANDSCAPE), "Unknown orientation '{}'".format(orientation)
-    if orientation == AUTO:
-        orientation = get_best_orientation(captures)
-
-    # Ensure paper format is given in portrait (don't manage orientation with it)
-    if paper_format[0] > paper_format[1]:
-        paper_format = (paper_format[1], paper_format[0])
-
-    size = (paper_format[0] * dpi, paper_format[1] * dpi)
-    if orientation == LANDSCAPE:
-        size = (size[1], size[0])
-
-    if not factory.cv2 or force_pil:
-        return factory.PilPictureFactory(size[0], size[1], *captures)
-
-    return factory.OpenCvPictureFactory(size[0], size[1], *captures)
Binary files ../pibooth_local_copy/pictures/__pycache__/__init__.cpython-37.pyc and ./pictures/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/pictures/__pycache__/factory.cpython-37.pyc and ./pictures/__pycache__/factory.cpython-37.pyc differ
Binary files ../pibooth_local_copy/pictures/__pycache__/pool.cpython-37.pyc and ./pictures/__pycache__/pool.cpython-37.pyc differ
Binary files ../pibooth_local_copy/pictures/__pycache__/sizing.cpython-37.pyc and ./pictures/__pycache__/sizing.cpython-37.pyc differ
Binary files ../pibooth_local_copy/pictures/assets/arrow.png and ./pictures/assets/arrow.png differ
Binary files ../pibooth_local_copy/pictures/assets/camera.png and ./pictures/assets/camera.png differ
Binary files ../pibooth_local_copy/pictures/assets/capture_left.png and ./pictures/assets/capture_left.png differ
Binary files ../pibooth_local_copy/pictures/assets/capture_right.png and ./pictures/assets/capture_right.png differ
Binary files ../pibooth_local_copy/pictures/assets/finished_left.png and ./pictures/assets/finished_left.png differ
Binary files ../pibooth_local_copy/pictures/assets/finished_right.png and ./pictures/assets/finished_right.png differ
Binary files ../pibooth_local_copy/pictures/assets/hand.png and ./pictures/assets/hand.png differ
Binary files ../pibooth_local_copy/pictures/assets/layout1.png and ./pictures/assets/layout1.png differ
Binary files ../pibooth_local_copy/pictures/assets/layout2.png and ./pictures/assets/layout2.png differ
Binary files ../pibooth_local_copy/pictures/assets/layout3.png and ./pictures/assets/layout3.png differ
Binary files ../pibooth_local_copy/pictures/assets/layout4.png and ./pictures/assets/layout4.png differ
Binary files ../pibooth_local_copy/pictures/assets/printer.png and ./pictures/assets/printer.png differ
Binary files ../pibooth_local_copy/pictures/assets/printer_failure.png and ./pictures/assets/printer_failure.png differ
Binary files ../pibooth_local_copy/pictures/assets/printer_touch.png and ./pictures/assets/printer_touch.png differ
Binary files ../pibooth_local_copy/pictures/assets/processing.png and ./pictures/assets/processing.png differ
diff -ruN ../pibooth_local_copy/pictures/factory.py ./pictures/factory.py
--- ../pibooth_local_copy/pictures/factory.py	2025-05-16 13:26:47
+++ ./pictures/factory.py	1969-12-31 19:00:00
@@ -1,528 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import os
-import os.path as osp
-from pibooth import fonts
-from pibooth.utils import LOGGER
-from pibooth.pictures import sizing
-from PIL import Image, ImageDraw
-
-try:
-    import cv2
-    import numpy as np
-except ImportError:
-    cv2 = None
-
-
-class PictureFactory(object):
-
-    """
-    Concatenate up to 4 PIL images in portrait orientation...
-
-         +---------+           +---------+           +---+-+---+           +---------+
-         |         |           |   +-+   |           |   |1|   |           | +-+ +-+ |
-         |         |           |   |1|   |           |   +-+   |           | |1| |2| |
-         |   +-+   |           |   +-+   |           |   +-+   |           | +-+ +-+ |
-         |   |1|   |           |         |           |   |2|   |           |         |
-         |   +-+   |           |   +-+   |           |   +-+   |           | +-+ +-+ |
-         |         |           |   |2|   |           |   +-+   |           | |3| |4| |
-         |         |           |   +-+   |           |   |3|   |           | +-+ +-+ |
-         +---------+           +---------+           +---+-+---+           +---------+
-
-    ...or landscape orientation
-
-      +---------------+     +---------------+     +---------------+     +----+-+-+-+----+
-      |      +-+      |     |    +-+  +-+   |     |  +-+ +-+ +-+  |     |    |1| |2|    |
-      |      |1|      |     |    |1|  |2|   |     |  |1| |2| |3|  |     |    +-+ +-+    |
-      |      +-+      |     |    +-+  +-+   |     |  +-+ +-+ +-+  |     |    +-+ +-+    |
-      |               |     |               |     |               |     |    |3| |4|    |
-      +---------------+     +---------------+     +---------------+     +----+-+-+-+----+
-    """
-
-    CENTER = 'center'
-    RIGHT = 'right'
-    LEFT = 'left'
-
-    def __init__(self, width, height, *images):
-        assert len(images) in range(1, 5), "1 to 4 images can be concatenated"
-        self._texts = []
-        self._texts_height = 0
-        self._final = None
-        self._margin = 100
-        self._margin_text = self._margin
-        self._crop = False
-        self._outlines = False
-        self._images = images
-        self._overlay_image = None
-        self._background_color = (255, 255, 255)
-        self._background_image = None
-
-        self.name = self.__class__.__name__
-        self.width = width
-        self.height = height
-        self.is_portrait = self.width < self.height
-
-    def _iter_images(self):
-        """Yield source images to concatenate.
-        """
-        raise NotImplementedError
-
-    def _iter_images_rects(self):
-        """Yield top-left coordinates and max size rectangle for each source image.
-
-        :return: (image_x, image_y, image_width, image_height)
-        :rtype: tuple
-        """
-        image_x = self._margin
-        image_y = self._margin
-        total_width = self.width - 2 * self._margin
-        total_height = self.height - self._texts_height - 2 * self._margin
-
-        if len(self._images) == 1:
-            image_width = total_width
-            image_height = total_height
-        elif 2 <= len(self._images) < 4:
-            if self.is_portrait:
-                image_width = total_width
-                image_height = (total_height - (len(self._images) - 1) * self._margin) // len(self._images)
-            else:
-                image_width = (total_width - (len(self._images) - 1) * self._margin) // len(self._images)
-                image_height = total_height
-        else:
-            image_width = (total_width - self._margin) // 2
-            image_height = (total_height - self._margin) // 2
-
-        yield image_x, image_y, image_width, image_height
-
-        if 2 <= len(self._images) < 4:
-            if self.is_portrait:
-                image_y += image_height + self._margin
-            else:
-                image_x += image_width + self._margin
-            yield image_x, image_y, image_width, image_height
-
-        if 3 <= len(self._images) < 4:
-            if self.is_portrait:
-                image_y += image_height + self._margin
-            else:
-                image_x += image_width + self._margin
-            yield image_x, image_y, image_width, image_height
-
-        if len(self._images) == 4:
-            image_x += image_width + self._margin
-            yield image_x, image_y, image_width, image_height
-            image_y += image_height + self._margin
-            image_x = self._margin
-            yield image_x, image_y, image_width, image_height
-            image_x += image_width + self._margin
-            yield image_x, image_y, image_width, image_height
-
-    def _iter_texts_rects(self, interline=None):
-        """Yield top-left coordinates and max size rectangle for each text.
-
-        :param interline: margin between each text line
-        :type interline: int
-
-        :return: (text_x, text_y, text_width, text_height)
-        :rtype: tuple
-        """
-        if not interline:
-            interline = 20
-
-        text_x = self._margin_text
-        text_y = self.height - self._texts_height
-        total_width = self.width - 2 * self._margin_text
-        total_height = self._texts_height - self._margin_text
-
-        if self.is_portrait:
-            text_height = (total_height - interline * (len(self._texts) - 1)) // (len(self._texts) + 1)
-            for i in range(len(self._texts)):
-                if i == 0:
-                    yield text_x, text_y, total_width, 2 * text_height
-                elif i == 1:
-                    text_y += interline + 2 * text_height
-                    yield text_x, text_y, total_width, text_height
-                else:
-                    text_y += interline + text_height
-                    yield text_x, text_y, total_width, text_height
-        else:
-            text_width = (total_width - interline * (len(self._texts) - 1)) // len(self._texts)
-            text_height = total_height // 2
-            for i in range(len(self._texts)):
-                if i == 0:
-                    yield text_x, text_y, text_width, 2 * text_height
-                else:
-                    text_x += interline + text_width
-                    yield text_x, text_y + (total_height - text_height) // 2, text_width, text_height
-
-    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
-        """Resize an image to fixed dimensions while keeping its aspect ratio.
-        If crop = True, the image will be cropped to fit in the target dimensions.
-
-        :return: image object, new width, new height
-        :rtype: tuple
-        """
-        raise NotImplementedError
-
-    def _image_paste(self, image, dest_image, pos_x, pos_y):
-        """Paste the given image on the destination one.
-        """
-        raise NotImplementedError
-
-    def _build_background(self):
-        """Create an image with the given background.
-
-        :return: image object which depends on the child class implementation.
-        :rtype: object
-        """
-        raise NotImplementedError
-
-    def _build_matrix(self, image):
-        """Draw the images matrix on the given image.
-
-        :param image: image object which depends on the child class implementation.
-        :type image: object
-
-        :return: image object which depends on the child class implementation.
-        :rtype: object
-        """
-        offset_generator = self._iter_images_rects()
-        count = 1
-        for src_image in self._iter_images():
-            pos_x, pos_y, max_w, max_h = next(offset_generator)
-            src_image, width, height = self._image_resize_keep_ratio(src_image, max_w, max_h, self._crop)
-            # Adjust position to have identical margin between borders and images
-            if len(self._images) < 4:
-                pos_x, pos_y = pos_x + (max_w - width) // 2, pos_y + (max_h - height) // 2
-            elif count == 1:
-                pos_x, pos_y = pos_x + (max_w - width) * 2 // 3, pos_y + (max_h - height) * 2 // 3
-            elif count == 2:
-                pos_x, pos_y = pos_x + (max_w - width) // 3, pos_y + (max_h - height) * 2 // 3
-            elif count == 3:
-                pos_x, pos_y = pos_x + (max_w - width) * 2 // 3, pos_y + (max_h - height) // 3
-            else:
-                pos_x, pos_y = pos_x + (max_w - width) // 3, pos_y + (max_h - height) // 3
-
-            self._image_paste(src_image, image, pos_x, pos_y)
-            count += 1
-        return image
-
-    def _build_final_image(self, image):
-        """Create the final PIL image and set it to the _final attribute.
-
-        :param image: image object which depends on the child class implementation.
-        :type image: object
-
-        :return: PIL.Image instance
-        :rtype: object
-        """
-        raise NotImplementedError
-
-    def _build_texts(self, image):
-        """Draw texts on a PIL image (PIL is used instead of OpenCV
-        because it is able to draw any fonts without ext).
-
-        :param image: PIL.Image instance
-        :type image: object
-        """
-        offset_generator = self._iter_texts_rects()
-        draw = ImageDraw.Draw(image)
-        for text, font_name, color, align in self._texts:
-            text_x, text_y, max_width, max_height = next(offset_generator)
-            if not text:  # Empty string: go to next text position
-                continue
-            # Use PIL to draw text because better support for fonts than OpenCV
-            font = fonts.get_pil_font(text, font_name, max_width, max_height)
-            _, text_height = font.getsize(text)
-            (text_width, _baseline), (offset_x, offset_y) = font.font.getsize(text)
-            if align == self.CENTER:
-                text_x += (max_width - text_width) // 2
-            elif align == self.RIGHT:
-                text_x += (max_width - text_width)
-
-            draw.text((text_x - offset_x // 2,
-                       text_y + (max_height - text_height) // 2 - offset_y // 2),
-                      text, color, font=font)
-
-    def _build_outlines(self, image):
-        """Build rectangle around each elements. This method is only for
-        debuging purpose.
-
-        :param image: PIL.Image instance
-        :type image: object
-        """
-        draw = ImageDraw.Draw(image)
-        for x, y, w, h in self._iter_images_rects():
-            draw.rectangle(((x, y), (x + w, y + h)), outline='red')
-        if self._texts:
-            for x, y, w, h in self._iter_texts_rects():
-                draw.rectangle(((x, y), (x + w, y + h)), outline='red')
-
-    def add_text(self, text, font_name, color, align=CENTER):
-        """Add a new text.
-
-        :param text: text to draw
-        :type text: str
-        :param font_name: name or path to font file
-        :type font_name: str
-        :param color: RGB tuple
-        :type color: tuple
-        :param align: text alignment: left, right or center
-        :type align: str
-        """
-        assert align in [self.CENTER, self.RIGHT, self.LEFT], "Unknown aligment '{}'".format(align)
-        self._texts.append((text, fonts.get_filename(font_name), color, align))
-        if self.is_portrait:
-            self._texts_height = int(self.height // 6)
-        else:
-            self._texts_height = int(self.height // 8)
-        self._final = None  # Force rebuild
-
-    def set_background(self, color_or_path):
-        """Set background color (RGB tuple) or path to an image that used to
-        fill the background.
-
-        :param color_or_path: RGB color tuple or image path
-        :type color_or_path: tuple or str
-        """
-        if isinstance(color_or_path, (tuple, list)):
-            assert len(color_or_path) == 3, "Length of 3 is required for RGB tuple"
-            self._background_color = color_or_path
-        else:
-            if not osp.isfile(color_or_path):
-                raise ValueError("Invalid background image '{}'".format(color_or_path))
-            self._background_image = color_or_path
-        self._final = None  # Force rebuild
-
-    def set_overlay(self, image_path):
-        """Set an image that will be paste over the final picture.
-
-        :param image_path: image path
-        :type image_path: str
-        """
-        if not osp.isfile(image_path):
-            raise ValueError("Invalid background image '{}'".format(image_path))
-        self._overlay_image = image_path
-        self._final = None  # Force rebuild
-
-    def set_margin(self, margin, margin_text=None):
-        """Set margin between concatenated images.
-
-        :param margin: margin in pixels
-        :type margin: int
-        :param margin_text: margin between texts in pixels
-        :type margin_text: int
-        """
-        self._margin = margin
-        if margin_text is None:
-            self._margin_text = margin
-        else:
-            self._margin_text = margin_text
-        self._final = None  # Force rebuild
-
-    def set_cropping(self, crop=True):
-        """Enable the cropping of source images it order to fit to the final
-        size. However some parts of the images will be lost.
-
-        :param crop: enable / disable cropping
-        :type crop: bool
-        """
-        self._crop = crop
-        self._final = None  # Force rebuild
-
-    def set_outlines(self, outlines=True):
-        """Draw outlines for each rectangle available for drawing
-        images and texts.
-
-        :param outlines: enable / disable outlines
-        :type outlines: bool
-        """
-        self._outlines = outlines
-        self._final = None  # Force rebuild
-
-    def build(self, rebuild=False):
-        """Build the final image or doas nothing if the final image
-        has already been built previously.
-
-        :param rebuild: force re-build image
-        :type rebuild: bool
-
-        :return: PIL.Image instance
-        :rtype: object
-        """
-        if not self._final or rebuild:
-
-            LOGGER.info("Use %s to create background", self.name)
-            image = self._build_background()
-
-            LOGGER.info("Use %s to concatenate images", self.name)
-            image = self._build_matrix(image)
-
-            LOGGER.info("Use %s to assemble final image", self.name)
-            self._final = self._build_final_image(image)
-
-            LOGGER.info("Use %s to draw texts", self.name)
-            self._build_texts(self._final)
-
-            if self._outlines:
-                LOGGER.info("Use %s to outline boundary borders", self.name)
-                self._build_outlines(self._final)
-
-        return self._final
-
-    def save(self, path):
-        """Build if not already done and save final image in a file.
-
-        :param path: path to save
-        :type path: str
-
-        :return: PIL.Image instance
-        :rtype: object
-        """
-        dirname = osp.dirname(osp.abspath(path))
-        if not osp.isdir(dirname):
-            os.mkdir(dirname)
-        image = self.build()
-        LOGGER.info("Save image '%s'", path)
-        image.save(path)
-        return image
-
-
-class PilPictureFactory(PictureFactory):
-
-    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
-        """See upper class description.
-        """
-        if crop:
-            width, height = sizing.new_size_keep_aspect_ratio(image.size, (max_w, max_h), 'outer')
-            image = image.resize((width, height), Image.ANTIALIAS)
-            image = image.crop(sizing.new_size_by_croping(image.size, (max_w, max_h)))
-        else:
-            width, height = sizing.new_size_keep_aspect_ratio(image.size, (max_w, max_h), 'inner')
-            image = image.resize((width, height), Image.ANTIALIAS)
-        return image, image.size[0], image.size[1]
-
-    def _image_paste(self, image, dest_image, pos_x, pos_y):
-        """See upper class description.
-        """
-        dest_image.paste(image, (pos_x, pos_y))
-
-    def _iter_images(self):
-        """See upper class description.
-        """
-        for image in self._images:
-            yield image
-
-    def _build_final_image(self, image):
-        """See upper class description.
-        """
-        if self._overlay_image:
-            overlay = Image.open(self._overlay_image).convert('RGBA')
-            overlay, _, _ = self._image_resize_keep_ratio(overlay, self.width, self.height, True)
-            image = Image.alpha_composite(image.convert('RGBA'), overlay)
-            image = image.convert('RGB')
-        return image
-
-    def _build_background(self):
-        """See upper class description.
-        """
-        if self._background_image:
-            bg = Image.open(self._background_image)
-            image, _, _ = self._image_resize_keep_ratio(bg, self.width, self.height, True)
-        else:
-            image = Image.new('RGB', (self.width, self.height), color=self._background_color)
-        return image
-
-
-class OpenCvPictureFactory(PictureFactory):
-
-    def _image_resize_keep_ratio(self, image, max_w, max_h, crop=False):
-        """See upper class description.
-        """
-        inter = cv2.INTER_AREA
-        height, width = image.shape[:2]
-
-        source_aspect_ratio = float(width) / height
-        target_aspect_ratio = float(max_w) / max_h
-
-        if crop:
-            if source_aspect_ratio <= target_aspect_ratio:
-                h_cropped = int(width / target_aspect_ratio)
-                x_offset = 0
-                y_offset = int((float(height) - h_cropped) / 2)
-                cropped = image[y_offset:(y_offset + h_cropped), x_offset:width]
-            else:
-                w_cropped = int(height * target_aspect_ratio)
-                x_offset = int((float(width) - w_cropped) / 2)
-                y_offset = 0
-                cropped = image[y_offset:height, x_offset:(x_offset + w_cropped)]
-            image = cv2.resize(cropped, (max_w, max_h), interpolation=inter)
-        else:
-            width, height = sizing.new_size_keep_aspect_ratio((width, height), (max_w, max_h), 'inner')
-            image = cv2.resize(image, (width, height), interpolation=cv2.INTER_AREA)
-        return image, image.shape[1], image.shape[0]
-
-    def _image_paste(self, image, dest_image, pos_x, pos_y):
-        """See upper class description.
-        """
-        height, width = image.shape[:2]
-        dest_image[pos_y:(pos_y + height), pos_x:(pos_x + width)] = image
-
-    def _iter_images(self):
-        """See upper class description.
-        """
-        for image in self._images:
-            yield np.array(image.convert('RGB'))
-
-    def _build_final_image(self, image):
-        """See upper class description.
-        """
-        if self._overlay_image:
-            overlay = cv2.cvtColor(cv2.imread(self._overlay_image, cv2.IMREAD_UNCHANGED), cv2.COLOR_BGR2RGBA)
-            overlay, _, _ = self._image_resize_keep_ratio(overlay, self.width, self.height, True)
-
-            x, y = 0, 0
-            image_width = image.shape[1]
-            image_height = image.shape[0]
-
-            h, w = overlay.shape[0], overlay.shape[1]
-
-            if x + w > image_width:
-                w = image_width - x
-                overlay = overlay[:, :w]
-
-            if y + h > image_height:
-                h = image_height - y
-                overlay = overlay[:h]
-
-            if overlay.shape[2] < 4:
-                overlay = np.concatenate(
-                    [
-                        overlay,
-                        np.ones((overlay.shape[0], overlay.shape[1], 1), dtype=overlay.dtype) * 255
-                    ],
-                    axis=2,
-                )
-
-            overlay_image = overlay[..., :3]
-            mask = overlay[..., 3:] / 255.0
-
-            image[y:y+h, x:x+w] = (1.0 - mask) * image[y:y+h, x:x+w] + mask * overlay_image
-
-        return Image.fromarray(image)
-
-    def _build_background(self):
-        """See upper class description.
-        """
-        if self._background_image:
-            bg = cv2.cvtColor(cv2.imread(self._background_image), cv2.COLOR_BGR2RGB)
-            image, _, _ = self._image_resize_keep_ratio(bg, self.width, self.height, True)
-        else:
-            # Small optimization for all white or all black (or all grey...) background
-            if self._background_color[0] == self._background_color[1] and self._background_color[1] == self._background_color[2]:
-                image = np.full((self.height, self.width, 3), self._background_color[0], np.uint8)
-            else:
-                image = np.zeros((self.height, self.width, 3), np.uint8)
-                image[:] = (self._background_color[0], self._background_color[1], self._background_color[2])
-
-        return image
diff -ruN ../pibooth_local_copy/pictures/pool.py ./pictures/pool.py
--- ../pibooth_local_copy/pictures/pool.py	2025-05-16 13:26:47
+++ ./pictures/pool.py	1969-12-31 19:00:00
@@ -1,36 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import multiprocessing
-
-
-class PicturesFactoryPool(object):
-
-    def __init__(self):
-        self._pool = None
-        self._async_results = []
-
-    def add(self, factory):
-        """Add a new picture factory and build it asyncronously.
-        """
-        if not self._pool:
-            self._pool = multiprocessing.Pool(processes=min(multiprocessing.cpu_count(), 4))
-        self._async_results.append(self._pool.apply_async(factory.build))
-
-    def get(self):
-        """Return all the results.
-        """
-        return [res.get() for res in self._async_results]
-
-    def clear(self):
-        """Cancel all run tasks and drop all factories.
-        """
-        for res in self._async_results:
-            res.get(5)
-        self._async_results = []
-
-    def quit(self):
-        """Quit and cleanup the pool.
-        """
-        if self._pool:
-            self._pool.terminate()
-            self._pool.join()
diff -ruN ../pibooth_local_copy/pictures/sizing.py ./pictures/sizing.py
--- ../pibooth_local_copy/pictures/sizing.py	2025-05-16 13:26:47
+++ ./pictures/sizing.py	1969-12-31 19:00:00
@@ -1,114 +0,0 @@
-# -*- coding: utf-8 -*-
-
-
-def new_size_keep_aspect_ratio(original_size, target_size, resize_type='inner'):
-    """Return a new size included (if resize_type='inner') or excluded (if resize_type='outer')
-    in the targeted one by resizing and keeping the original image's aspect ratio.
-    """
-    # Get current and desired ratio for the images
-    img_ratio = original_size[0] / float(original_size[1])
-    ratio = target_size[0] / float(target_size[1])
-
-    ox, oy = original_size
-    tx, ty = target_size
-
-    if ratio > img_ratio:
-        # fit to width
-        scale_factor = target_size[0] / float(ox)
-        ty = scale_factor * oy
-        if ty > target_size[1] and resize_type == 'inner':
-            scale_factor = target_size[1] / float(oy)
-            tx = scale_factor * ox
-            ty = target_size[1]
-    elif ratio < img_ratio:
-        # fit to height
-        scale_factor = target_size[1] / float(oy)
-        tx = scale_factor * ox
-        if tx > target_size[0] and resize_type == 'inner':
-            scale_factor = target_size[0] / float(ox)
-            tx = target_size[0]
-            ty = scale_factor * oy
-    return (int(tx), int(ty))
-
-
-def new_size_by_croping(original_size, target_size, crop_type='center'):
-    """Return a tuple of top-left and bottom-right points (x1, y1, x2, y2) coresponding
-    to a crop of the original size. The position of the rectangle can be defined by the
-    crop_type parameter:
-
-       * top-left
-       * top-center
-       * top-right
-       * center-left
-       * center
-       * center-right
-       * bottom-left
-       * bottom-center
-       * bottom-right
-    """
-    x, y = 0, 0
-
-    if crop_type.endswith('left'):
-        x = 0
-    elif crop_type.endswith('center'):
-        x = (original_size[0] - target_size[0]) // 2
-    elif crop_type.endswith('right'):
-        x = original_size[0] - target_size[0]
-
-    if crop_type.startswith('top'):
-        y = 0
-    elif crop_type.startswith('center'):
-        y = (original_size[1] - target_size[1]) // 2
-    elif crop_type.startswith('bottom'):
-        y = original_size[1] - target_size[1]
-
-    return (x, y, target_size[0] + x, target_size[1] + y)
-
-
-def new_size_by_croping_ratio(original_size, target_size, crop_type='center'):
-    """Return a tuple of top-left and bottom-right points (x1, y1, x2, y2) coresponding
-    to a crop of the original size keeping the same aspect ratio of the target size.
-
-    Note: target_size is only used to calculate aspect ratio, the returned coordinates
-          doesn't fit to it.
-
-    The position of the rectangle can be defined by the crop_type parameter:
-
-       * top-left
-       * top-center
-       * top-right
-       * center-left
-       * center
-       * center-right
-       * bottom-left
-       * bottom-center
-       * bottom-right
-    """
-    # Get current and desired ratio for the images
-    img_ratio = original_size[0] / float(original_size[1])
-    ratio = target_size[0] / float(target_size[1])
-
-    tx, ty = original_size
-    if ratio > img_ratio:
-        # crop on constant width
-        ty = int(original_size[0] / ratio)
-    elif ratio < img_ratio:
-        # crop on constant height
-        tx = int(ratio * original_size[1])
-
-    x, y = 0, 0
-    if crop_type.endswith('left'):
-        x = 0
-    elif crop_type.endswith('center'):
-        x = (original_size[0] - tx) // 2
-    elif crop_type.endswith('right'):
-        x = original_size[0] - tx
-
-    if crop_type.startswith('top'):
-        y = 0
-    elif crop_type.startswith('center'):
-        y = (original_size[1] - ty) // 2
-    elif crop_type.startswith('bottom'):
-        y = original_size[1] - ty
-
-    return (x, y, tx + x, ty + y)
diff -ruN ../pibooth_local_copy/plugins/__init__.py ./plugins/__init__.py
--- ../pibooth_local_copy/plugins/__init__.py	2025-05-16 13:26:45
+++ ./plugins/__init__.py	1969-12-31 19:00:00
@@ -1,152 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import inspect
-import pluggy
-
-from pibooth.utils import LOGGER, load_module
-from pibooth.plugins import hookspecs
-from pibooth.plugins.camera_plugin import CameraPlugin
-from pibooth.plugins.lights_plugin import LightsPlugin
-from pibooth.plugins.picture_plugin import PicturePlugin
-from pibooth.plugins.printer_plugin import PrinterPlugin
-from pibooth.plugins.view_plugin import ViewPlugin
-
-
-def create_plugin_manager():
-    """Create plugin manager and defined hooks specification."""
-    plugin_manager = PiPluginManager(hookspecs.hookspec.project_name)
-    plugin_manager.add_hookspecs(hookspecs)
-    return plugin_manager
-
-
-class PiPluginManager(pluggy.PluginManager):
-
-    def __init__(self, *args, **kwargs):
-        super(PiPluginManager, self).__init__(*args, **kwargs)
-        self._plugin2calls = {}
-
-        def before(hook_name, methods, kwargs):
-            """Keep the list of already called hook per plugin to know if a
-            plugin has already been initialized in case of hot-registration.
-            """
-            for hookimpl in methods:
-                self._plugin2calls[hookimpl.plugin].add(hook_name)
-
-        def after(outcome, hook_name, methods, kwargs):
-            pass
-
-        self.add_hookcall_monitoring(before, after)
-
-    def register(self, plugin, name=None):
-        """Override to keep all plugins that have already been registered
-        at least one time.
-        """
-        plugin_name = super(PiPluginManager, self).register(plugin, name)
-        if plugin not in self._plugin2calls:
-            self._plugin2calls[plugin] = set()
-        return plugin_name
-
-    def load_all_plugins(self, paths, disabled=None):
-        """Register the core plugins, load plugins from setuptools entry points
-        and the load given module/package paths.
-
-        note:: by default hooks are called in LIFO registered order thus
-               plugins register order is important.
-
-        :param paths: list of Python module/package paths to load
-        :type paths: list
-        :param disabled: list of plugins name to be disabled after loaded
-        :type disabled: list
-        """
-        # Load plugins declared by setuptools entry points
-        self.load_setuptools_entrypoints(hookspecs.hookspec.project_name)
-
-        plugins = []
-        for path in paths:
-            plugin = load_module(path)
-            if plugin:
-                LOGGER.debug("Plugin found at '%s'", path)
-                plugins.append(plugin)
-
-        plugins += [LightsPlugin(self),  # Last called
-                    ViewPlugin(self),
-                    PrinterPlugin(self),
-                    PicturePlugin(self),
-                    CameraPlugin(self)]  # First called
-
-        for plugin in plugins:
-            self.register(plugin, name=getattr(plugin, 'name', None))
-
-        # Check that each hookimpl is defined in the hookspec
-        # except for hookimpl with kwarg 'optionalhook=True'.
-        self.check_pending()
-
-        # Disable unwanted plugins
-        if disabled:
-            for name in disabled:
-                self.unregister(name=name)
-
-    def list_external_plugins(self):
-        """Return the list of loaded plugins except ``pibooth`` core plugins.
-        (external plugins can be registered or unregistered)
-
-        :return: list of plugins
-        :rtype: list
-        """
-        values = []
-        for plugin in self._plugin2calls:
-            # The core plugins are classes, we don't want to include
-            # them here, thus we take only the modules objects.
-            if inspect.ismodule(plugin):
-                if plugin not in values:
-                    values.append(plugin)
-        return values
-
-    def get_friendly_name(self, plugin, version=True):
-        """Return the friendly name of the given plugin and
-        optionally its version.
-
-        :param plugin: registered plugin object
-        :type plugin: object
-        :param version: include the version number
-        :type version: bool
-        """
-        # List of all setuptools registered plugins
-        distinfo = dict(self.list_plugin_distinfo())
-
-        if plugin in distinfo:
-            name = distinfo[plugin].project_name
-            vnumber = distinfo[plugin].version
-        else:
-            name = self.get_name(plugin)
-            if not name:
-                name = getattr(plugin, '__name__', "unknown")
-            vnumber = getattr(plugin, '__version__', '?.?.?')
-
-        if version:
-            name = "{}-{}".format(name, vnumber)
-        else:
-            name = "{}".format(name)
-
-        # Questionable convenience, but it keeps things short
-        if name.startswith("pibooth-") or name.startswith("pibooth_"):
-            name = name[8:]
-
-        return name
-
-    def get_calls_history(self, plugin):
-        """Return the ist of the hook names that has already been called at
-        least one time fr the given plugins.
-
-        :param plugin: plugin for which calls history is requested
-        :type plugin: object
-        """
-        if plugin in self._plugin2calls:
-            return list(self._plugin2calls[plugin])
-        return []
-
-    def subset_hook_caller_for_plugin(self, name, plugin):
-        """ Return a new :py:class:`.hooks._HookCaller` instance for the named
-        method which manages calls to the given plugins."""
-        exluded_plugins = [p for p in self.get_plugins() if self.get_name(p) != self.get_name(plugin)]
-        return self.subset_hook_caller(name, exluded_plugins)
Binary files ../pibooth_local_copy/plugins/__pycache__/__init__.cpython-37.pyc and ./plugins/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/camera_plugin.cpython-37.pyc and ./plugins/__pycache__/camera_plugin.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/hookspecs.cpython-37.pyc and ./plugins/__pycache__/hookspecs.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/lights_plugin.cpython-37.pyc and ./plugins/__pycache__/lights_plugin.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/picture_plugin.cpython-37.pyc and ./plugins/__pycache__/picture_plugin.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/printer_plugin.cpython-37.pyc and ./plugins/__pycache__/printer_plugin.cpython-37.pyc differ
Binary files ../pibooth_local_copy/plugins/__pycache__/view_plugin.cpython-37.pyc and ./plugins/__pycache__/view_plugin.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/plugins/camera_plugin.py ./plugins/camera_plugin.py
--- ../pibooth_local_copy/plugins/camera_plugin.py	2025-05-16 13:26:45
+++ ./plugins/camera_plugin.py	1969-12-31 19:00:00
@@ -1,116 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import time
-import pygame
-import pibooth
-from pibooth import camera
-from pibooth.utils import LOGGER
-
-
-class CameraPlugin(object):
-
-    """Plugin to manage the camera captures.
-    """
-
-    name = 'pibooth-core:camera'
-
-    def __init__(self, plugin_manager):
-        self._pm = plugin_manager
-        self.count = 0
-
-    @pibooth.hookimpl(hookwrapper=True)
-    def pibooth_setup_camera(self, cfg):
-        outcome = yield  # all corresponding hookimpls are invoked here
-        cam = outcome.get_result()
-
-        if not cam:
-            LOGGER.debug("Fallback to pibooth default camera management system")
-            cam = camera.find_camera()
-
-        cam.initialize(cfg.gettuple('CAMERA', 'iso', (int, str), 2),
-                       cfg.gettyped('CAMERA', 'resolution'),
-                       cfg.gettuple('CAMERA', 'rotation', int, 2),
-                       cfg.getboolean('CAMERA', 'flip'),
-                       cfg.getboolean('CAMERA', 'delete_internal_memory'))
-        outcome.force_result(cam)
-
-    @pibooth.hookimpl
-    def pibooth_cleanup(self, app):
-        app.camera.quit()
-
-    @pibooth.hookimpl
-    def state_failsafe_enter(self, app):
-        """Reset variables set in this plugin.
-        """
-        app.capture_date = None
-        app.capture_nbr = None
-        app.camera.drop_captures()  # Flush previous captures
-
-    @pibooth.hookimpl
-    def state_wait_enter(self, app):
-        app.capture_date = None
-        if len(app.capture_choices) > 1:
-            app.capture_nbr = None
-        else:
-            app.capture_nbr = app.capture_choices[0]
-
-    @pibooth.hookimpl
-    def state_choose_do(self, app, events):
-        event = app.find_choice_event(events)
-        if event:
-            if event.key == pygame.K_LEFT:
-                app.capture_nbr = app.capture_choices[0]
-            elif event.key == pygame.K_RIGHT:
-                app.capture_nbr = app.capture_choices[1]
-
-    @pibooth.hookimpl
-    def state_preview_enter(self, cfg, app, win):
-        LOGGER.info("Show preview before next capture")
-        if not app.capture_date:
-            app.capture_date = time.strftime("%Y-%m-%d-%H-%M-%S")
-        app.camera.preview(win)
-
-    @pibooth.hookimpl
-    def state_preview_do(self, cfg, app):
-        pygame.event.pump()  # Before blocking actions
-        if cfg.getboolean('WINDOW', 'preview_countdown'):
-            app.camera.preview_countdown(cfg.getint('WINDOW', 'preview_delay'))
-        else:
-            app.camera.preview_wait(cfg.getint('WINDOW', 'preview_delay'))
-
-    @pibooth.hookimpl
-    def state_preview_exit(self, cfg, app):
-        if cfg.getboolean('WINDOW', 'preview_stop_on_capture'):
-            app.camera.stop_preview()
-
-    @pibooth.hookimpl
-    def state_capture_do(self, cfg, app, win):
-        effects = cfg.gettyped('PICTURE', 'captures_effects')
-        if not isinstance(effects, (list, tuple)):
-            # Same effect for all captures
-            effect = effects
-        elif len(effects) >= app.capture_nbr:
-            # Take the effect corresponding to the current capture
-            effect = effects[self.count]
-        else:
-            # Not possible
-            raise ValueError("Not enough effects defined for {} captures {}".format(
-                app.capture_nbr, effects))
-
-        LOGGER.info("Take a capture")
-        if cfg.getboolean('WINDOW', 'flash'):
-            with win.flash(2):  # Manage the window here, have no choice
-                app.camera.capture(effect)
-        else:
-            app.camera.capture(effect)
-
-        self.count += 1
-
-    @pibooth.hookimpl
-    def state_capture_exit(self, cfg, app):
-        if not cfg.getboolean('WINDOW', 'preview_stop_on_capture'):
-            app.camera.stop_preview()
-
-    @pibooth.hookimpl
-    def state_processing_enter(self, app):
-        self.count = 0
diff -ruN ../pibooth_local_copy/plugins/hookspecs.py ./plugins/hookspecs.py
--- ../pibooth_local_copy/plugins/hookspecs.py	2025-05-16 13:26:45
+++ ./plugins/hookspecs.py	1969-12-31 19:00:00
@@ -1,512 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import pluggy
-
-hookspec = pluggy.HookspecMarker('pibooth')
-
-# --- Pibooth state-independent hooks ------------------------------------------
-
-
-@hookspec
-def pibooth_configure(cfg):
-    """Actions performed after loading of the configuration file or when the
-    plugin is enabled for the first time. The ``cfg`` object is an instance
-    of :py:class:`ConfigParser` class.
-
-    :param cfg: application configuration
-    """
-
-
-@hookspec
-def pibooth_reset(cfg, hard):
-    """Restore the configuration.
-
-    This hook is called at least one time at ``pibooth`` startup with parameter
-    ``hard=False``. All plugins implementing this hook shall ensure that the
-    required folders/files exist (create the default ones if not).
-
-    If ``hard=True``, all folders/files have to be restored with their default
-    content.
-
-    :param cfg: application configuration
-    :param hard: do a hard-reset if True
-    """
-
-
-@hookspec
-def pibooth_startup(cfg, app):
-    """Actions performed at the startup of pibooth or when the plugin is enabled
-    for the first time.
-
-    :param cfg: application configuration
-    :param app: application instance
-    """
-
-
-@hookspec(firstresult=True)
-def pibooth_setup_picture_factory(cfg, opt_index, factory):
-    """Hook used to setup the ``PictureFactory`` instance.
-
-    The ``opt_index`` is the selected index of the ``[PICTURE][captures]``
-    configuration option for the current captures sequence. It represents
-    the selected captures number.
-
-    A new ``PictureFactory`` instance can be returned by this hook, it will be
-    used instead of the default one. The returned object shall have the same
-    public API than :py:class:`pibooth.pictures.factory.PictureFactory`.
-
-    :param cfg: application configuration
-    :param opt_index: index for tuple options related to captures number
-    :param factory: default ``PictureFactory`` instance (not configured yet)
-    """
-
-
-@hookspec(firstresult=True)
-def pibooth_setup_camera(cfg):
-    """Hook used to setup the ``camera`` interface.
-
-    A new camera instance (inheriting from :py:class:`pibooth.camera.base.BaseCamera`)
-    shall be returned by this hook, it will be used instead of the default one.
-
-    :param cfg: application configuration
-    """
-
-
-@hookspec
-def pibooth_cleanup(app):
-    """Actions performed at the cleanup of pibooth.
-
-    :param app: application instance
-    """
-
-
-# --- FailSafe State -----------------------------------------------------------
-
-
-@hookspec
-def state_failsafe_enter(cfg, app, win):
-    """Actions performed when application enter in FailSafe state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_failsafe_do(cfg, app, win, events):
-    """Actions performed when application is in FailSafe state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_failsafe_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_failsafe_exit(cfg, app, win):
-    """Actions performed when application exit FailSafe state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Wait State ---------------------------------------------------------------
-
-
-@hookspec
-def state_wait_enter(cfg, app, win):
-    """Actions performed when application enter in Wait state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_wait_do(cfg, app, win, events):
-    """Actions performed when application is in Wait state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_wait_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_wait_exit(cfg, app, win):
-    """Actions performed when application exit Wait state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Choose State -------------------------------------------------------------
-
-
-@hookspec
-def state_choose_enter(cfg, app, win):
-    """Actions performed when application enter in Choose state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_choose_do(cfg, app, win, events):
-    """Actions performed when application is in Choose state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_choose_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_choose_exit(cfg, app, win):
-    """Actions performed when application exit Choose state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Chosen State -------------------------------------------------------------
-
-
-@hookspec
-def state_chosen_enter(cfg, app, win):
-    """Actions performed when application enter in Chosen state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_chosen_do(cfg, app, win, events):
-    """Actions performed when application is in Chosen state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_chosen_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_chosen_exit(cfg, app, win):
-    """Actions performed when application exit Chosen state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Preview State ------------------------------------------------------------
-
-
-@hookspec
-def state_preview_enter(cfg, app, win):
-    """Actions performed when application enter in Preview state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_preview_do(cfg, app, win, events):
-    """Actions performed when application is in Preview state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_preview_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_preview_exit(cfg, app, win):
-    """Actions performed when application exit Preview state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Capture State ------------------------------------------------------------
-
-
-@hookspec
-def state_capture_enter(cfg, app, win):
-    """Actions performed when application enter in Capture state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_capture_do(cfg, app, win, events):
-    """Actions performed when application is in Capture state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_capture_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_capture_exit(cfg, app, win):
-    """Actions performed when application exit Capture state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Processing State ---------------------------------------------------------
-
-
-@hookspec
-def state_processing_enter(cfg, app, win):
-    """Actions performed when application enter in Processing state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_processing_do(cfg, app, win, events):
-    """Actions performed when application is in Processing state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_processing_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_processing_exit(cfg, app, win):
-    """Actions performed when application exit Processing state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- PrintView State ----------------------------------------------------------
-
-
-@hookspec
-def state_print_enter(cfg, app, win):
-    """Actions performed when application enter in Print state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_print_do(cfg, app, win, events):
-    """Actions performed when application is in Print state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_print_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_print_exit(cfg, app, win):
-    """Actions performed when application exit Print state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-# --- Finish State -------------------------------------------------------------
-
-
-@hookspec
-def state_finish_enter(cfg, app, win):
-    """Actions performed when application enter in Finish state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
-
-
-@hookspec
-def state_finish_do(cfg, app, win, events):
-    """Actions performed when application is in Finish state.
-    This hook is called in a loop until the application can switch
-    to the next state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec(firstresult=True)
-def state_finish_validate(cfg, app, win, events):
-    """Return the next state name if application can switch to it
-    else return None.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    :param events: pygame events generated since last call
-    """
-
-
-@hookspec
-def state_finish_exit(cfg, app, win):
-    """Actions performed when application exit Finish state.
-
-    :param cfg: application configuration
-    :param app: application instance
-    :param win: graphical window instance
-    """
diff -ruN ../pibooth_local_copy/plugins/lights_plugin.py ./plugins/lights_plugin.py
--- ../pibooth_local_copy/plugins/lights_plugin.py	2025-05-16 13:26:45
+++ ./plugins/lights_plugin.py	1969-12-31 19:00:00
@@ -1,72 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import time
-import pibooth
-
-
-class LightsPlugin(object):
-    """Plugin to manage the lights via GPIO.
-    """
-
-    name = 'pibooth-core:lights'
-
-    def __init__(self, plugin_manager):
-        self._pm = plugin_manager
-        self.blink_time = 0.3
-
-    @pibooth.hookimpl
-    def state_wait_enter(self, app):
-        if app.previous_picture_file and app.printer.is_ready()\
-                and app.count.remaining_duplicates > 0:
-            app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
-        else:
-            app.leds.capture.blink(on_time=self.blink_time, off_time=self.blink_time)
-            app.leds.printer.off()
-
-    @pibooth.hookimpl
-    def state_wait_do(self, app, events):
-        if app.find_print_event(events) and app.previous_picture_file and app.printer.is_ready():
-            if app.count.remaining_duplicates <= 0:
-                app.leds.printer.off()
-            else:
-                app.leds.printer.on()
-                time.sleep(1)  # Just to let the LED switched on
-                app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
-
-        if not app.previous_picture_file and app.leds.printer._controller:  # _controller == blinking
-            app.leds.printer.off()
-
-    @pibooth.hookimpl
-    def state_wait_exit(self, app):
-        app.leds.off()
-
-    @pibooth.hookimpl
-    def state_choose_enter(self, app):
-        app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
-
-    @pibooth.hookimpl
-    def state_choose_exit(self, app):
-        if app.capture_nbr == app.capture_choices[0]:
-            app.leds.capture.on()
-            app.leds.printer.off()
-        elif app.capture_nbr == app.capture_choices[1]:
-            app.leds.printer.on()
-            app.leds.capture.off()
-
-    @pibooth.hookimpl
-    def state_chosen_exit(self, app):
-        app.leds.off()
-
-    @pibooth.hookimpl
-    def state_print_enter(self, app):
-        app.leds.blink(on_time=self.blink_time, off_time=self.blink_time)
-
-    @pibooth.hookimpl
-    def state_print_do(self, app, events):
-        if app.find_print_event(events):
-            app.leds.printer.on()
-            app.leds.capture.off()
-
-    @pibooth.hookimpl
-    def state_finish_enter(self, app):
-        app.leds.off()
diff -ruN ../pibooth_local_copy/plugins/picture_plugin.py ./plugins/picture_plugin.py
--- ../pibooth_local_copy/plugins/picture_plugin.py	2025-05-16 13:26:45
+++ ./plugins/picture_plugin.py	1969-12-31 19:00:00
@@ -1,159 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import os
-import os.path as osp
-import itertools
-from datetime import datetime
-import pibooth
-from pibooth.utils import LOGGER, PoolingTimer
-from pibooth.pictures import get_picture_factory
-from pibooth.pictures.pool import PicturesFactoryPool
-
-
-class PicturePlugin(object):
-
-    """Plugin to build the final picture.
-    """
-
-    name = 'pibooth-core:picture'
-
-    def __init__(self, plugin_manager):
-        self._pm = plugin_manager
-        self.factory_pool = PicturesFactoryPool()
-        self.picture_destroy_timer = PoolingTimer(0)
-        self.second_previous_picture = None
-        self.texts_vars = {}
-
-    def _reset_vars(self, app):
-        """Destroy final picture (can not be used anymore).
-        """
-        self.factory_pool.clear()
-        app.previous_picture = None
-        app.previous_animated = None
-        app.previous_picture_file = None
-
-    @pibooth.hookimpl(hookwrapper=True)
-    def pibooth_setup_picture_factory(self, cfg, opt_index, factory):
-
-        outcome = yield  # all corresponding hookimpls are invoked here
-        factory = outcome.get_result() or factory
-
-        factory.set_margin(cfg.getint('PICTURE', 'margin_thick'))
-
-        backgrounds = cfg.gettuple('PICTURE', 'backgrounds', ('color', 'path'), 2)
-        factory.set_background(backgrounds[opt_index])
-
-        overlays = cfg.gettuple('PICTURE', 'overlays', 'path', 2)
-        if overlays[opt_index]:
-            factory.set_overlay(overlays[opt_index])
-
-        texts = [cfg.get('PICTURE', 'footer_text1').strip('"').format(**self.texts_vars),
-                 cfg.get('PICTURE', 'footer_text2').strip('"').format(**self.texts_vars)]
-        colors = cfg.gettuple('PICTURE', 'text_colors', 'color', len(texts))
-        text_fonts = cfg.gettuple('PICTURE', 'text_fonts', str, len(texts))
-        alignments = cfg.gettuple('PICTURE', 'text_alignments', str, len(texts))
-        if any(elem != '' for elem in texts):
-            for params in zip(texts, text_fonts, colors, alignments):
-                factory.add_text(*params)
-
-        if cfg.getboolean('PICTURE', 'captures_cropping'):
-            factory.set_cropping()
-
-        if cfg.getboolean('GENERAL', 'debug'):
-            factory.set_outlines()
-
-        outcome.force_result(factory)
-
-    @pibooth.hookimpl
-    def pibooth_cleanup(self):
-        self.factory_pool.quit()
-
-    @pibooth.hookimpl
-    def state_failsafe_enter(self, app):
-        self._reset_vars(app)
-
-    @pibooth.hookimpl
-    def state_wait_enter(self, cfg, app):
-        animated = self.factory_pool.get()
-        if cfg.getfloat('WINDOW', 'wait_picture_delay') == 0:
-            # Do it here to avoid a transient display of the picture
-            self._reset_vars(app)
-        elif animated:
-            app.previous_animated = itertools.cycle(animated)
-
-        # Reset timeout in case of settings changed
-        self.picture_destroy_timer.timeout = max(0, cfg.getfloat('WINDOW', 'wait_picture_delay'))
-        self.picture_destroy_timer.start()
-
-    @pibooth.hookimpl
-    def state_wait_do(self, cfg, app):
-        if cfg.getfloat('WINDOW', 'wait_picture_delay') > 0 and self.picture_destroy_timer.is_timeout()\
-                and app.previous_picture_file:
-            self._reset_vars(app)
-
-    @pibooth.hookimpl
-    def state_processing_enter(self, app):
-        self.second_previous_picture = app.previous_picture
-        self._reset_vars(app)
-
-    @pibooth.hookimpl
-    def state_processing_do(self, cfg, app):
-        idx = app.capture_choices.index(app.capture_nbr)
-        self.texts_vars['date'] = datetime.strptime(app.capture_date, "%Y-%m-%d-%H-%M-%S")
-        self.texts_vars['count'] = app.count
-
-        LOGGER.info("Saving raw captures")
-        captures = app.camera.get_captures()
-
-        for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
-            rawdir = osp.join(savedir, "raw", app.capture_date)
-            os.makedirs(rawdir)
-
-            for capture in captures:
-                count = captures.index(capture)
-                capture.save(osp.join(rawdir, "pibooth{:03}.jpg".format(count)))
-
-        LOGGER.info("Creating the final picture")
-        default_factory = get_picture_factory(captures, cfg.get('PICTURE', 'orientation'))
-        factory = self._pm.hook.pibooth_setup_picture_factory(cfg=cfg,
-                                                              opt_index=idx,
-                                                              factory=default_factory)
-        app.previous_picture = factory.build()
-
-        for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
-            app.previous_picture_file = osp.join(savedir, app.picture_filename)
-            factory.save(app.previous_picture_file)
-
-        if cfg.getboolean('WINDOW', 'animate') and app.capture_nbr > 1:
-            LOGGER.info("Asyncronously generate pictures for animation")
-            for capture in captures:
-                default_factory = get_picture_factory((capture,), cfg.get(
-                    'PICTURE', 'orientation'), force_pil=True, dpi=200)
-                factory = self._pm.hook.pibooth_setup_picture_factory(cfg=cfg,
-                                                                      opt_index=idx,
-                                                                      factory=default_factory)
-                factory.set_margin(factory._margin // 3)  # 1/3 since DPI is divided by 3
-                self.factory_pool.add(factory)
-
-    @pibooth.hookimpl
-    def state_processing_exit(self, app):
-        app.count.taken += 1  # Do it here because 'print' state can be skipped
-
-    @pibooth.hookimpl
-    def state_print_do(self, cfg, app, events):
-        if app.find_capture_event(events):
-
-            LOGGER.info("Moving the picture in the forget folder")
-            for savedir in cfg.gettuple('GENERAL', 'directory', 'path'):
-                forgetdir = osp.join(savedir, "forget")
-                if not osp.isdir(forgetdir):
-                    os.makedirs(forgetdir)
-                os.rename(osp.join(savedir, app.picture_filename), osp.join(forgetdir, app.picture_filename))
-
-            self._reset_vars(app)
-            app.count.forgotten += 1
-            app.previous_picture = self.second_previous_picture
-
-            # Deactivate the print function for the backuped picture
-            # as we don't known how many times it has already been printed
-            app.count.remaining_duplicates = 0
diff -ruN ../pibooth_local_copy/plugins/printer_plugin.py ./plugins/printer_plugin.py
--- ../pibooth_local_copy/plugins/printer_plugin.py	2025-05-16 13:26:44
+++ ./plugins/printer_plugin.py	1969-12-31 19:00:00
@@ -1,67 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import pibooth
-from pibooth.utils import LOGGER
-
-
-class PrinterPlugin(object):
-
-    """Plugin to manage the printer.
-    """
-
-    name = 'pibooth-core:printer'
-
-    def __init__(self, plugin_manager):
-        self._pm = plugin_manager
-
-    def print_picture(self, cfg, app):
-        LOGGER.info("Send final picture to printer")
-        app.printer.print_file(app.previous_picture_file,
-                               cfg.getint('PRINTER', 'pictures_per_page'))
-        app.count.printed += 1
-        app.count.remaining_duplicates -= 1
-
-    @pibooth.hookimpl
-    def pibooth_cleanup(self, app):
-        app.printer.quit()
-
-    @pibooth.hookimpl
-    def state_failsafe_enter(self, cfg, app):
-        """Reset variables set in this plugin.
-        """
-        app.count.remaining_duplicates = cfg.getint('PRINTER', 'max_duplicates')
-
-    @pibooth.hookimpl
-    def state_wait_do(self, cfg, app, events):
-        if app.find_print_event(events) and app.previous_picture_file and app.printer.is_installed():
-
-            if app.count.remaining_duplicates <= 0:
-                LOGGER.warning("Too many duplicates sent to the printer (%s max)",
-                               cfg.getint('PRINTER', 'max_duplicates'))
-                return
-
-            elif not app.printer.is_ready():
-                LOGGER.warning("Maximum number of printed pages reached (%s/%s max)", app.count.printed,
-                               cfg.getint('PRINTER', 'max_pages'))
-                return
-
-            self.print_picture(cfg, app)
-
-    @pibooth.hookimpl
-    def state_processing_enter(self, cfg, app):
-        app.count.remaining_duplicates = cfg.getint('PRINTER', 'max_duplicates')
-
-    @pibooth.hookimpl
-    def state_processing_do(self, cfg, app):
-        if app.previous_picture_file and app.printer.is_ready():
-            number = cfg.gettyped('PRINTER', 'auto_print')
-            if number == 'max':
-                number = cfg.getint('PRINTER', 'max_duplicates')
-            for i in range(number):
-                if app.count.remaining_duplicates > 0:
-                    self.print_picture(cfg, app)
-
-    @pibooth.hookimpl
-    def state_print_do(self, cfg, app, events):
-        if app.find_print_event(events) and app.previous_picture_file:
-            self.print_picture(cfg, app)
diff -ruN ../pibooth_local_copy/plugins/view_plugin.py ./plugins/view_plugin.py
--- ../pibooth_local_copy/plugins/view_plugin.py	2025-05-16 13:26:45
+++ ./plugins/view_plugin.py	1969-12-31 19:00:00
@@ -1,187 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import pibooth
-from pibooth.utils import LOGGER, get_crash_message, PoolingTimer
-
-
-class ViewPlugin(object):
-
-    """Plugin to manage the pibooth window dans transitions.
-    """
-
-    name = 'pibooth-core:view'
-
-    def __init__(self, plugin_manager):
-        self._pm = plugin_manager
-        self.count = 0
-        self.forgotten = False
-        # Seconds to display the failed message
-        self.failed_view_timer = PoolingTimer(2)
-        # Seconds between each animated frame
-        self.animated_frame_timer = PoolingTimer(0)
-        # Seconds before going back to the start
-        self.choose_timer = PoolingTimer(30)
-        # Seconds to display the selected layout
-        self.layout_timer = PoolingTimer(4)
-        # Seconds to display the selected layout
-        self.print_view_timer = PoolingTimer(0)
-        # Seconds to display the selected layout
-        self.finish_timer = PoolingTimer(1)
-
-    @pibooth.hookimpl
-    def state_failsafe_enter(self, win):
-        win.show_oops()
-        self.failed_view_timer.start()
-        LOGGER.error(get_crash_message())
-
-    @pibooth.hookimpl
-    def state_failsafe_validate(self):
-        if self.failed_view_timer.is_timeout():
-            return 'wait'
-
-    @pibooth.hookimpl
-    def state_wait_enter(self, cfg, app, win):
-        self.forgotten = False
-        if app.previous_animated:
-            previous_picture = next(app.previous_animated)
-            # Reset timeout in case of settings changed
-            self.animated_frame_timer.timeout = cfg.getfloat('WINDOW', 'animate_delay')
-            self.animated_frame_timer.start()
-        else:
-            previous_picture = app.previous_picture
-
-        win.show_intro(previous_picture, app.printer.is_ready()
-                       and app.count.remaining_duplicates > 0)
-        if app.printer.is_installed():
-            win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
-
-    @pibooth.hookimpl
-    def state_wait_do(self, app, win, events):
-        if app.previous_animated and self.animated_frame_timer.is_timeout():
-            previous_picture = next(app.previous_animated)
-            win.show_intro(previous_picture, app.printer.is_ready()
-                           and app.count.remaining_duplicates > 0)
-            self.animated_frame_timer.start()
-        else:
-            previous_picture = app.previous_picture
-
-        event = app.find_print_status_event(events)
-        if event and app.printer.is_installed():
-            tasks = app.printer.get_all_tasks()
-            win.set_print_number(len(tasks), not app.printer.is_ready())
-
-        if app.find_print_event(events) or (win.get_image() and not previous_picture):
-            win.show_intro(previous_picture, app.printer.is_ready()
-                           and app.count.remaining_duplicates > 0)
-
-    @pibooth.hookimpl
-    def state_wait_validate(self, cfg, app, events):
-        if app.find_capture_event(events):
-            if len(app.capture_choices) > 1:
-                return 'choose'
-            if cfg.getfloat('WINDOW', 'chosen_delay') > 0:
-                return 'chosen'
-            return 'preview'
-
-    @pibooth.hookimpl
-    def state_wait_exit(self, win):
-        self.count = 0
-        win.show_image(None)  # Clear currently displayed image
-
-    @pibooth.hookimpl
-    def state_choose_enter(self, app, win):
-        LOGGER.info("Show picture choice (nothing selected)")
-        win.set_print_number(0, False)  # Hide printer status
-        win.show_choice(app.capture_choices)
-        self.choose_timer.start()
-
-    @pibooth.hookimpl
-    def state_choose_validate(self, cfg, app):
-        if app.capture_nbr:
-            if cfg.getfloat('WINDOW', 'chosen_delay') > 0:
-                return 'chosen'
-            else:
-                return 'preview'
-        elif self.choose_timer.is_timeout():
-            return 'wait'
-
-    @pibooth.hookimpl
-    def state_chosen_enter(self, cfg, app, win):
-        LOGGER.info("Show picture choice (%s captures selected)", app.capture_nbr)
-        win.show_choice(app.capture_choices, selected=app.capture_nbr)
-
-        # Reset timeout in case of settings changed
-        self.layout_timer.timeout = cfg.getfloat('WINDOW', 'chosen_delay')
-        self.layout_timer.start()
-
-    @pibooth.hookimpl
-    def state_chosen_validate(self):
-        if self.layout_timer.is_timeout():
-            return 'preview'
-
-    @pibooth.hookimpl
-    def state_preview_enter(self, app, win):
-        self.count += 1
-        win.set_capture_number(self.count, app.capture_nbr)
-
-    @pibooth.hookimpl
-    def state_preview_validate(self):
-        return 'capture'
-
-    @pibooth.hookimpl
-    def state_capture_do(self, app, win):
-        win.set_capture_number(self.count, app.capture_nbr)
-
-    @pibooth.hookimpl
-    def state_capture_validate(self, app):
-        if self.count >= app.capture_nbr:
-            return 'processing'
-        return 'preview'
-
-    @pibooth.hookimpl
-    def state_processing_enter(self, win):
-        win.show_work_in_progress()
-
-    @pibooth.hookimpl
-    def state_processing_validate(self, cfg, app):
-        if app.printer.is_ready() and cfg.getfloat('PRINTER', 'printer_delay') > 0\
-                and app.count.remaining_duplicates > 0:
-            return 'print'
-        return 'finish'  # Can not print
-
-    @pibooth.hookimpl
-    def state_print_enter(self, cfg, app, win):
-        LOGGER.info("Display the final picture")
-        win.show_print(app.previous_picture)
-        win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
-
-        # Reset timeout in case of settings changed
-        self.print_view_timer.timeout = cfg.getfloat('PRINTER', 'printer_delay')
-        self.print_view_timer.start()
-
-    @pibooth.hookimpl
-    def state_print_validate(self, app, win, events):
-        printed = app.find_print_event(events)
-        self.forgotten = app.find_capture_event(events)
-        if self.print_view_timer.is_timeout() or printed or self.forgotten:
-            if printed:
-                win.set_print_number(len(app.printer.get_all_tasks()), not app.printer.is_ready())
-            return 'finish'
-
-    @pibooth.hookimpl
-    def state_finish_enter(self, cfg, app, win):
-        if cfg.getfloat('WINDOW', 'finish_picture_delay') > 0 and not self.forgotten:
-            win.show_finished(app.previous_picture)
-            timeout = cfg.getfloat('WINDOW', 'finish_picture_delay')
-        else:
-            win.show_finished()
-            timeout = 1
-
-        # Reset timeout in case of settings changed
-        self.finish_timer.timeout = timeout
-        self.finish_timer.start()
-
-    @pibooth.hookimpl
-    def state_finish_validate(self):
-        if self.finish_timer.is_timeout():
-            return 'wait'
diff -ruN ../pibooth_local_copy/printer.py ./printer.py
--- ../pibooth_local_copy/printer.py	2025-05-16 13:26:44
+++ ./printer.py	1969-12-31 19:00:00
@@ -1,135 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth printer handling.
-"""
-
-try:
-    import cups
-    from cups_notify import Subscriber, event
-except ImportError:
-    cups = None  # CUPS is optional
-
-import tempfile
-import os.path as osp
-
-import pygame
-from PIL import Image
-from pibooth.utils import LOGGER
-from pibooth.pictures import get_picture_factory
-
-
-PRINTER_TASKS_UPDATED = pygame.USEREVENT + 2
-
-PAPER_FORMATS = {
-    '2x6': (2, 6),      # 2x6 pouces - 5x15 cm - 51x152 mm
-    '3,5x5': (3.5, 5),  # 3,5x5 pouces - 9x13 cm - 89x127 mm
-    '4x6': (4, 6),      # 4x6 pouces - 10x15 cm - 101x152 mm
-    '5x7': (5, 7),      # 5x7 pouces - 13x18 cm - 127x178 mm
-    '6x8': (6, 8),      # 6x8 pouces - 15x20 cm - 152x203 mm
-    '6x9': (6, 9),      # 6x9 pouces - 15x23 cm - 152x229 mm
-}
-
-
-class Printer(object):
-
-    def __init__(self, name='default', max_pages=-1, options=None, counters=None):
-        self._conn = cups.Connection() if cups else None
-        self._notifier = Subscriber(self._conn) if cups else None
-        self.name = None
-        self.max_pages = max_pages
-        self.options = options
-        self.count = counters
-        if not cups:
-            LOGGER.warning("No printer found (pycups or pycups-notify not installed)")
-            return  # CUPS is not installed
-
-        if not name or name.lower() == 'default':
-            self.name = self._conn.getDefault()
-            if not self.name and self._conn.getPrinters():
-                self.name = list(self._conn.getPrinters().keys())[0]  # Take first one
-        elif name in self._conn.getPrinters():
-            self.name = name
-
-        if not self.name:
-            if name.lower() == 'default':
-                LOGGER.warning("No printer configured in CUPS (see http://localhost:631)")
-            else:
-                LOGGER.warning("No printer named '%s' in CUPS (see http://localhost:631)", name)
-        else:
-            LOGGER.info("Connected to printer '%s'", self.name)
-
-        if self.options and not isinstance(self.options, dict):
-            LOGGER.warning("Invalid printer options '%s', dict is expected", self.options)
-            self.options = {}
-        elif not self.options:
-            self.options = {}
-
-    def _on_event(self, evt):
-        """
-        Call for each new printer event.
-        """
-        LOGGER.info(evt.title)
-        pygame.event.post(pygame.event.Event(PRINTER_TASKS_UPDATED, evt=evt))
-
-    def is_installed(self):
-        """Return True if the CUPS server is available for printing.
-        """
-        return cups is not None and self.name is not None
-
-    def is_ready(self):
-        """Return False if paper/ink counter is reached or printing is disabled.
-        """
-        if not self.is_installed():
-            return False
-        if self.max_pages < 0 or self.count is None:  # No limit
-            return True
-        return self.count.printed < self.max_pages
-
-    def print_file(self, filename, copies=1):
-        """Send a file to the CUPS server to the default printer.
-        """
-        if not self.name:
-            raise EnvironmentError("No printer found (check config file or CUPS config)")
-        if not osp.isfile(filename):
-            raise IOError("No such file or directory: {}".format(filename))
-        if self._notifier and not self._notifier.is_subscribed(self._on_event):
-            self._notifier.subscribe(self._on_event, [event.CUPS_EVT_JOB_COMPLETED,
-                                                      event.CUPS_EVT_JOB_CREATED,
-                                                      event.CUPS_EVT_JOB_STOPPED,
-                                                      event.CUPS_EVT_PRINTER_STATE_CHANGED,
-                                                      event.CUPS_EVT_PRINTER_STOPPED])
-
-        if copies > 1:
-            with tempfile.NamedTemporaryFile(suffix=osp.basename(filename)) as fp:
-                picture = Image.open(filename)
-                factory = get_picture_factory((picture,) * copies)
-                # Don't call setup factory hook here, as the selected parameters
-                # are the one necessary to render several pictures on same page.
-                factory.set_margin(2)
-                factory.save(fp.name)
-                self._conn.printFile(self.name, fp.name, osp.basename(filename), self.options)
-        else:
-            self._conn.printFile(self.name, filename, osp.basename(filename), self.options)
-        LOGGER.debug("File '%s' sent to the printer with options %s", filename, self.options)
-
-    def cancel_all_tasks(self):
-        """Cancel all tasks in the queue.
-        """
-        if not self.name:
-            raise EnvironmentError("No printer found (check config file or CUPS config)")
-        self._conn.cancelAllJobs(self.name)
-
-    def get_all_tasks(self):
-        """Return a dict (indexed by job ID) of dicts representing all tasks
-        in the queue.
-        """
-        if not self.name:
-            return {}  # No printer found
-        return self._conn.getJobs(my_jobs=True, requested_attributes=["job-id", "job-name",
-                                                                      "job-uri", "job-state"])
-
-    def quit(self):
-        """Do cleanup actions.
-        """
-        if self._notifier:
-            self._notifier.unsubscribe_all()
Binary files ../pibooth_local_copy/scripts/__pycache__/__init__.cpython-37.pyc and ./scripts/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/scripts/__pycache__/count.cpython-37.pyc and ./scripts/__pycache__/count.cpython-37.pyc differ
Binary files ../pibooth_local_copy/scripts/__pycache__/diagnostic.cpython-37.pyc and ./scripts/__pycache__/diagnostic.cpython-37.pyc differ
Binary files ../pibooth_local_copy/scripts/__pycache__/fonts.cpython-37.pyc and ./scripts/__pycache__/fonts.cpython-37.pyc differ
Binary files ../pibooth_local_copy/scripts/__pycache__/printer.cpython-37.pyc and ./scripts/__pycache__/printer.cpython-37.pyc differ
Binary files ../pibooth_local_copy/scripts/__pycache__/regenerate.cpython-37.pyc and ./scripts/__pycache__/regenerate.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/scripts/count.py ./scripts/count.py
--- ../pibooth_local_copy/scripts/count.py	2025-05-16 13:26:46
+++ ./scripts/count.py	1969-12-31 19:00:00
@@ -1,45 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Script to display/update counters.
-"""
-
-import sys
-import json
-from pibooth.counters import Counters
-from pibooth.utils import configure_logging
-from pibooth.config import PiConfigParser
-from pibooth.plugins import create_plugin_manager
-
-
-def main():
-    """Application entry point.
-    """
-    configure_logging()
-    plugin_manager = create_plugin_manager()
-    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
-
-    counters = Counters(config.join_path("counters.pickle"),
-                        taken=0, printed=0, forgotten=0,
-                        remaining_duplicates=config.getint('PRINTER', 'max_duplicates'))
-
-    if '--json' in sys.argv:
-        print(json.dumps(counters.data))
-    elif '--update' in sys.argv:
-        try:
-            print("\nUpdating counters (current value in square bracket):\n")
-            for name in counters:
-                value = input(" -> {:.<18} [{:>4}] : ".format(name.capitalize(), counters[name]))
-                if value.strip():
-                    setattr(counters, name, int(value))
-        except KeyboardInterrupt:
-            pass
-        print()
-    else:
-        print("\nListing current counters:\n")
-        for name in counters:
-            print(" -> {:.<25} : {:>4}".format(name.capitalize(), counters[name]))
-        print()
-
-
-if __name__ == "__main__":
-    main()
diff -ruN ../pibooth_local_copy/scripts/diagnostic.py ./scripts/diagnostic.py
--- ../pibooth_local_copy/scripts/diagnostic.py	2025-05-16 13:26:46
+++ ./scripts/diagnostic.py	1969-12-31 19:00:00
@@ -1,223 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth diagnostic module.
-"""
-
-import io
-import sys
-from PIL import Image
-try:
-    import gphoto2 as gp
-except ImportError:
-    gp = None  # gphoto2 is optional
-import pibooth
-from pibooth.config import PiConfigParser
-from pibooth.utils import configure_logging
-from pibooth.plugins import create_plugin_manager
-
-
-LOGFILE = None
-APPNAME = 'diagnostic'
-
-
-def gp_logging(level, domain, string, data=None):
-    write_log('Gphoto2: {}: {}'.format(domain, string))
-
-
-def write_log(text, new_section=False):
-    """Write text in the log file"""
-    global LOGFILE
-    if not LOGFILE:
-        LOGFILE = open(APPNAME + '.log', 'w')
-
-    if new_section:
-        print('\n' + '=' * 80)
-        LOGFILE.write('\n' + '=' * 80 + '\n')
-
-    text = str(text)
-    print(text[:200])
-    if len(text) > 200:
-        print("[... -> see log file for full message]")
-    LOGFILE.write(text + '\n')
-
-
-def print_config(config, parent=''):
-    """Print all parameters of the camera"""
-
-    gp_widget_types = {gp.GP_WIDGET_WINDOW: "Window toplevel",
-                       gp.GP_WIDGET_SECTION: "Section (or Tab)",
-                       gp.GP_WIDGET_TEXT: "Text",
-                       gp.GP_WIDGET_RANGE: "Slider",
-                       gp.GP_WIDGET_TOGGLE: "Toggle button (or check box)",
-                       gp.GP_WIDGET_RADIO: "Radio button",
-                       gp.GP_WIDGET_MENU: "Menu widget (same as Radio)",
-                       gp.GP_WIDGET_BUTTON: "Button press",
-                       gp.GP_WIDGET_DATE: "Date entering",
-                       }
-
-    for child in config.get_children():
-        path = '/'.join((parent, child.get_name()))
-        if child.get_type() == gp.GP_WIDGET_SECTION:
-            print_config(child, path)
-        else:
-            write_log('{}'.format(path))
-            write_log('  Label       : {}'.format(child.get_label()))
-            write_log('  Readonly    : {}'.format('yes' if child.get_readonly() else 'no'))
-            write_log('  Data type   : {}'.format(type(child.get_value())))
-            write_log('  Widget type : {}'.format(gp_widget_types[child.get_type()]))
-            write_log('  Current     : {}'.format(child.get_value()))
-            if child.get_type() == gp.GP_WIDGET_RADIO:
-                write_log('  Choices     : {}'.format([c for c in child.get_choices()]))
-            elif child.get_type() == gp.GP_WIDGET_RANGE:
-                write_log('  Choices     : min={}, max={}, step={}'.format(*child.get_range()))
-            elif child.get_type() == gp.GP_WIDGET_TOGGLE:
-                write_log('  Choices     : [0, 1]')
-            elif child.get_type() == gp.GP_WIDGET_MENU:
-                write_log('  Choices     : {}'.format([child.get_choice(n) for n in range(child.count_choices())]))
-            else:
-                write_log('  Choices     : n/a')
-
-
-def set_config_value(camera, section, option, value):
-    """Set camera configuration. """
-    try:
-        write_log('Setting option {}/{}="{}"'.format(section, option, value))
-        config = camera.get_config()
-        child = config.get_child_by_name(section).get_child_by_name(option)
-        if child.get_type() == gp.GP_WIDGET_RADIO:
-            choices = [c for c in child.get_choices()]
-        else:
-            choices = None
-
-        if choices and value not in choices:
-            write_log("   -> invalid value '{}' for option {} (possible choices: {})".format(value, option, choices))
-        child.set_value(value)
-        camera.set_config(config)
-    except gp.GPhoto2Error:
-        write_log('   -> unsupported setting {}/{}={} (nothing configured on DSLR)'.format(section, option, value))
-
-
-def get_config_value(camera, section, option):
-    """Get camera configuration option.
-    """
-    try:
-        config = camera.get_config()
-        child = config.get_child_by_name(section).get_child_by_name(option)
-        value = child.get_value()
-        write_log('Getting option {}/{}={}'.format(section, option, value))
-        return value
-    except gp.GPhoto2Error:
-        write_log('Unknown option {}/{}'.format(section, option))
-
-
-def camera_connected():
-    """Return the list of connected camera compatible with gPhoto2.
-    """
-    if hasattr(gp, 'gp_camera_autodetect'):
-        # gPhoto2 version 2.5+
-        cameras = gp.check_result(gp.gp_camera_autodetect())
-    else:
-        port_info_list = gp.PortInfoList()
-        port_info_list.load()
-        abilities_list = gp.CameraAbilitiesList()
-        abilities_list.load()
-        cameras = abilities_list.detect(port_info_list)
-    return cameras
-
-
-def main():
-    error = False
-    configure_logging()
-    write_log("Pibooth version installed: {}".format(pibooth.__version__))
-
-    plugin_manager = create_plugin_manager()
-    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
-
-    # Register plugins
-    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
-                                    config.gettuple('GENERAL', 'plugins_disabled', str))
-
-    write_log("Installed plugins: {}".format(", ".join(
-        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()])))
-
-    if not gp:
-        write_log("gPhoto2 not installed, cannot diagnose connected DSLR")
-        sys.exit(1)
-    else:
-        try:
-            info = gp.version.gp_library_version(gp.version.GP_VERSION_VERBOSE)
-            write_log("GPhoto2 version installed: {}".format(info[0]))
-            for opt in info[1:]:
-                write_log("  - {}".format(opt))
-        except:
-            pass
-
-    gp_log_callback = gp.check_result(gp.gp_log_add_func(gp.GP_LOG_VERBOSE, gp_logging))
-    write_log("Listing all connected DSLR camera")
-    cameras_list = camera_connected()
-
-    if not cameras_list:
-        write_log('No compatible DSLR camera detected')
-        sys.exit(1)
-
-    cameras_list = sorted(cameras_list, key=lambda x: x[0])
-    for index, (name, addr) in enumerate(cameras_list):
-        write_log("{:02d} : addr-> {}  name-> {}".format(index, addr, name))
-
-    write_log("Stating diagnostic of connected DSLR camera", True)
-    camera = gp.Camera()
-    camera.init()
-
-    abilities = camera.get_abilities()
-    preview_compat = gp.GP_OPERATION_CAPTURE_PREVIEW ==\
-        abilities.operations & gp.GP_OPERATION_CAPTURE_PREVIEW
-    write_log("* Preview compatible: {}".format(preview_compat))
-    capture_compat = gp.GP_OPERATION_CAPTURE_IMAGE ==\
-        abilities.operations & gp.GP_OPERATION_CAPTURE_IMAGE
-    write_log("* Capture compatible: {}".format(capture_compat))
-
-    if capture_compat:
-        try:
-            print_config(camera.get_config())
-
-            write_log("Testing commands used by pibooth", True)
-
-            set_config_value(camera, 'imgsettings', 'iso', '100')
-            set_config_value(camera, 'settings', 'capturetarget', 'Memory card')
-
-            viewfinder = get_config_value(camera, 'actions', 'viewfinder')
-            if viewfinder is not None:
-                set_config_value(camera, 'actions', 'viewfinder', 1)
-
-            write_log("Take capture preview")
-            camera.capture_preview()
-
-            if viewfinder is not None:
-                set_config_value(camera, 'actions', 'viewfinder', 0)
-
-            write_log("Take a capture")
-            gp_path = camera.capture(gp.GP_CAPTURE_IMAGE)
-
-            write_log("Download file from DSLR")
-            camera_file = camera.file_get(gp_path.folder, gp_path.name, gp.GP_FILE_TYPE_NORMAL)
-
-            write_log("Save capture locally from memory buffer")
-            data = camera_file.get_data_and_size()
-            with open(APPNAME + '.raw', 'wb') as fd:
-                fd.write(data)
-            image = Image.open(io.BytesIO(data))
-            image.save(APPNAME + '.jpg')
-
-        except Exception as ex:
-            write_log("ABORT   : exception occures: {}".format(ex), True)
-            error = True
-
-    if not error:
-        write_log("SUCCESS : diagnostic completed", True)
-
-    del gp_log_callback
-    camera.exit()
-
-    write_log("If you are investigating why pibooth does not work with your DSLR camera,")
-    write_log("please paste the content of generated file '{}'".format(APPNAME + '.log'))
-    write_log("on https://github.com/pibooth/pibooth/issues")
diff -ruN ../pibooth_local_copy/scripts/fonts.py ./scripts/fonts.py
--- ../pibooth_local_copy/scripts/fonts.py	2025-05-16 13:26:45
+++ ./scripts/fonts.py	1969-12-31 19:00:00
@@ -1,38 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Script to list all installed fonts.
-"""
-
-from itertools import zip_longest, islice
-from pibooth.fonts import get_available_fonts
-from pibooth.utils import LOGGER, configure_logging
-
-
-def take(n, iterable):
-    """Return first n items of the iterable as a list.
-    """
-    return list(islice(iterable, n))
-
-
-def print_columns_words(words, column_count=3):
-    """Print a list of words into columns.
-    """
-    columns, dangling = divmod(len(words), column_count)
-    iter_words = iter(words)
-    columns = [take(columns + (dangling > i), iter_words) for i in range(column_count)]
-    paddings = [max(map(len, column)) for column in columns]
-    for row in zip_longest(*columns, fillvalue=''):
-        print('  '.join(word.ljust(pad) for word, pad in zip(row, paddings)))
-
-
-def main():
-    """Application entry point.
-    """
-    configure_logging()
-    LOGGER.info("Listing all fonts available...")
-
-    print_columns_words(get_available_fonts(), 3)
-
-
-if __name__ == "__main__":
-    main()
diff -ruN ../pibooth_local_copy/scripts/printer.py ./scripts/printer.py
--- ../pibooth_local_copy/scripts/printer.py	2025-05-16 13:26:45
+++ ./scripts/printer.py	1969-12-31 19:00:00
@@ -1,78 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Script to display the configuration of the printer.
-"""
-
-import sys
-import json
-import cups
-from pibooth.utils import LOGGER, configure_logging
-from pibooth.config import PiConfigParser
-from pibooth.plugins import create_plugin_manager
-
-
-def main():
-    """Application entry point.
-    """
-    configure_logging()
-    plugin_manager = create_plugin_manager()
-    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
-
-    conn = cups.Connection()
-    name = config.get('PRINTER', 'printer_name')
-
-    if not name or name.lower() == 'default':
-        name = conn.getDefault()
-        if not name and conn.getPrinters():
-            name = list(conn.getPrinters().keys())[0]  # Take first one
-    elif name not in conn.getPrinters():
-        name = None
-
-    if not name:
-        if name.lower() == 'default':
-            LOGGER.warning("No printer configured in CUPS (see http://localhost:631)")
-            return
-        else:
-            LOGGER.warning("No printer named '%s' in CUPS (see http://localhost:631)", name)
-            return
-    else:
-        LOGGER.info("Connected to printer '%s'", name)
-
-    f = conn.getPPD(name)
-    ppd = cups.PPD(f)
-    groups = ppd.optionGroups
-    options = []
-    for group in groups:
-        group_name = "{} - {}".format(group.name, group.text)
-        for opt in group.options:
-            option = {'group': group_name}
-            values = list(map(lambda x: x["choice"], opt.choices))
-            texts = list(map(lambda x: x["text"], opt.choices))
-            option['keyword'] = opt.keyword
-            option['value'] = opt.defchoice
-            option['description'] = opt.text
-            if values != texts:
-                option['choices'] = dict([(v, texts[values.index(v)]) for v in values])
-            else:
-                option['choices'] = values
-            options.append(option)
-
-    if '--json' in sys.argv:
-        print(json.dumps(dict([(option['keyword'], option['value']) for option in options])))
-    else:
-        for option in options:
-            print("{} = {}".format(option['keyword'], option['value']))
-            print("     Description: {}".format(option['description']))
-            if isinstance(option['choices'], dict):
-                choices = ["{} = {}".format(value, descr) for value, descr in option['choices'].items()]
-                print("     Choices:     {}".format(choices[0]))
-                for choice in choices[1:]:
-                    print("                  {}".format(choice))
-            else:
-                print("     Choices:     {}".format(", ".join(option['choices'])))
-
-            print()
-
-
-if __name__ == "__main__":
-    main()
diff -ruN ../pibooth_local_copy/scripts/regenerate.py ./scripts/regenerate.py
--- ../pibooth_local_copy/scripts/regenerate.py	2025-05-16 13:26:45
+++ ./scripts/regenerate.py	1969-12-31 19:00:00
@@ -1,93 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth picture regeneration module.
-"""
-
-import os
-from os import path as osp
-from datetime import datetime
-
-from PIL import Image
-
-from pibooth.utils import LOGGER, configure_logging
-from pibooth.plugins import create_plugin_manager
-from pibooth.config import PiConfigParser
-from pibooth.pictures import get_picture_factory
-from pibooth.counters import Counters
-
-
-def get_captures(images_folder):
-    """Get a list of images from the folder given in input.
-    """
-    captures_paths = os.listdir(images_folder)
-    captures = []
-    for capture_path in captures_paths:
-        try:
-            image = Image.open(osp.join(images_folder, capture_path))
-            captures.append(image)
-        except OSError:
-            LOGGER.info("File %s doesn't seem to be an image", capture_path)
-    return captures
-
-
-def regenerate_all_images(plugin_manager, config, basepath):
-    """Regenerate the pibboth images from the raw images and the config.
-    """
-    if not osp.isdir(osp.join(basepath, 'raw')):
-        return
-
-    capture_choices = config.gettuple('PICTURE', 'captures', int, 2)
-
-    for captures_folder in os.listdir(osp.join(basepath, 'raw')):
-        captures_folder_path = osp.join(basepath, 'raw', captures_folder)
-        if not osp.isdir(captures_folder_path):
-            continue
-        captures = get_captures(captures_folder_path)
-        LOGGER.info("Generating image from raws in folder %s", captures_folder_path)
-
-        if len(captures) == capture_choices[0]:
-            idx = 0
-        elif len(captures) == capture_choices[1]:
-            idx = 1
-        else:
-            LOGGER.warning("Folder %s doesn't contain the correct number of pictures", captures_folder_path)
-            continue
-
-        default_factory = get_picture_factory(captures, config.get('PICTURE', 'orientation'))
-        factory = plugin_manager.hook.pibooth_setup_picture_factory(cfg=config,
-                                                                    opt_index=idx,
-                                                                    factory=default_factory)
-
-        picture_file = osp.join(basepath, captures_folder + "_pibooth.jpg")
-        factory.save(picture_file)
-
-
-def main():
-    """Application entry point.
-    """
-    configure_logging()
-    plugin_manager = create_plugin_manager()
-    config = PiConfigParser("~/.config/pibooth/pibooth.cfg", plugin_manager)
-
-    # Register plugins
-    plugin_manager.load_all_plugins(config.gettuple('GENERAL', 'plugins', 'path'),
-                                    config.gettuple('GENERAL', 'plugins_disabled', str))
-
-    LOGGER.info("Installed plugins: %s", ", ".join(
-        [plugin_manager.get_friendly_name(p) for p in plugin_manager.list_external_plugins()]))
-
-    # Update configuration with plugins ones
-    plugin_manager.hook.pibooth_configure(cfg=config)
-
-    # Initialize varibales normally done by the app
-    picture_plugin = plugin_manager.get_plugin('pibooth-core:picture')
-    picture_plugin.texts_vars['date'] = datetime.now()
-    picture_plugin.texts_vars['count'] = Counters(config.join_path("counters.pickle"), taken=0, printed=0, forgotten=0,
-                                                  remaining_duplicates=config.getint('PRINTER', 'max_duplicates'))
-
-    for path in config.gettuple('GENERAL', 'directory', 'path'):
-        regenerate_all_images(plugin_manager, config, path)
-
-
-if __name__ == "__main__":
-    main()
diff -ruN ../pibooth_local_copy/setup.py ./setup.py
--- ../pibooth_local_copy/setup.py	1969-12-31 19:00:00
+++ ./setup.py	2025-05-16 14:02:41
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+# -*- coding: utf-8 -*-
+
+import sys
+from io import open
+import os.path as osp
+from setuptools import setup, find_packages
+
+
+HERE = osp.abspath(osp.dirname(__file__))
+sys.path.insert(0, HERE)
+import pibooth  # nopep8 : import shall be done after adding setup to paths
+
+
+with open(osp.join(HERE, 'docs', 'requirements.txt')) as fd:
+    docs_require = fd.read().splitlines()
+
+
+def main():
+    setup(
+        name=pibooth.__name__,
+        version=pibooth.__version__,
+        description=pibooth.__doc__,
+        long_description=open(osp.join(HERE, 'README.rst'), encoding='utf-8').read(),
+        long_description_content_type='text/x-rst',
+        classifiers=[
+            'Development Status :: 5 - Production/Stable',
+            'Environment :: Other Environment',
+            'Intended Audience :: Developers',
+            'Intended Audience :: End Users/Desktop',
+            'License :: OSI Approved :: MIT License',
+            'Operating System :: POSIX :: Linux',
+            'Programming Language :: Python :: 3.6',
+            'Programming Language :: Python :: 3.7',
+            'Programming Language :: Python :: 3.8',
+            'Programming Language :: Python :: 3.9',
+            'Natural Language :: Danish',
+            'Natural Language :: Dutch',
+            'Natural Language :: English',
+            'Natural Language :: French',
+            'Natural Language :: German',
+            'Natural Language :: Hungarian',
+            'Natural Language :: Italian',
+            'Natural Language :: Norwegian',
+            'Natural Language :: Portuguese',
+            'Natural Language :: Portuguese (Brazilian)',
+            'Natural Language :: Spanish',
+            'Topic :: Multimedia :: Graphics :: Capture :: Digital Camera',
+        ],
+        author="Vincent Verdeil, Antoine Rousseaux",
+        url="https://github.com/pibooth/pibooth",
+        download_url="https://github.com/pibooth/pibooth/archive/{}.tar.gz".format(pibooth.__version__),
+        license='MIT license',
+        platforms=['unix', 'linux'],
+        keywords=[
+            'Raspberry Pi',
+            'camera',
+            'photobooth'
+        ],
+        packages=find_packages(),
+        package_data={
+            'pibooth': ['*.ini'],
+            'pibooth.fonts': ['*.ttf'],
+            'pibooth.pictures': ['*/*.png'],
+        },
+        include_package_data=True,
+        python_requires=">=3.6",
+        install_requires=[
+            'picamera>=1.13 ; platform_machine>="armv0l" and platform_machine<="armv9l"',
+            'Pillow==9.2.0',
+            'pygame>=1.9.6',
+            'pygame-menu==4.0.7',
+            'pygame-vkeyboard>=2.0.8',
+            'psutil>=5.5.1',
+            'pluggy>=0.13.1',
+            'gpiozero>=1.5.1',
+            # RPi.GPIO backend for gpiozero (not always installed by default)
+            'RPi.GPIO>=0.7.0 ; platform_machine>="armv0l" and platform_machine<="armv9l"'
+        ],
+        extras_require={
+            'dslr': ['gphoto2>=2.0.0'],
+            'printer': ['pycups>=1.9.73', 'pycups-notify>=0.0.4'],
+            'doc': docs_require
+        },
+        zip_safe=False,  # Don't install the lib as an .egg zipfile
+        entry_points={'console_scripts': ["pibooth = pibooth.booth:main",
+                                          "pibooth-count = pibooth.scripts.count:main",
+                                          "pibooth-diag = pibooth.scripts.diagnostic:main",
+                                          "pibooth-fonts = pibooth.scripts.fonts:main",
+                                          "pibooth-regen = pibooth.scripts.regenerate:main",
+                                          "pibooth-printcfg = pibooth.scripts.printer:main"]},
+    )
+
+
+if __name__ == '__main__':
+    main()
diff -ruN ../pibooth_local_copy/states.py ./states.py
--- ../pibooth_local_copy/states.py	2025-05-16 13:26:45
+++ ./states.py	1969-12-31 19:00:00
@@ -1,105 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth base states.
-"""
-
-import time
-from pibooth.utils import LOGGER, BlockConsoleHandler
-
-
-class StateMachine(object):
-
-    def __init__(self, plugins_manager, configuration, application, window):
-        self.states = set()
-        self.failsafe_state = None
-        self.active_state = None
-
-        # Share the application to manage between states
-        self.app = application
-        self.win = window
-        self.cfg = configuration
-        self.pm = plugins_manager
-
-        self._start_time = time.time()
-
-    def add_state(self, name):
-        """Add a state to the internal dictionary.
-        """
-        self.states.add(name)
-
-    def add_failsafe_state(self, name):
-        """Add a state that will be call in case of exception.
-        """
-        self.failsafe_state = name
-        self.states.add(name)
-
-    def remove_state(self, name):
-        """Remove a state to the internal dictionary.
-        """
-        self.states.discard(name)
-        if name == self.failsafe_state:
-            self.failsafe_state = None
-
-    def process(self, events):
-        """Let the current state do it's thing.
-        """
-        # Only continue if there is an active state
-        if self.active_state is None:
-            return
-
-        try:
-            # Perform the actions of the active state
-            hook = getattr(self.pm.hook, 'state_{}_do'.format(self.active_state))
-            hook(cfg=self.cfg, app=self.app, win=self.win, events=events)
-
-            # Check conditions to activate the next state
-            hook = getattr(self.pm.hook, 'state_{}_validate'.format(self.active_state))
-            new_state_name = hook(cfg=self.cfg, app=self.app, win=self.win, events=events)
-        except Exception as ex:
-            if self.failsafe_state and self.active_state != self.failsafe_state:
-                LOGGER.error(str(ex))
-                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
-                new_state_name = self.failsafe_state
-            else:
-                raise
-
-        if new_state_name is not None:
-            self.set_state(new_state_name)
-
-    def set_state(self, state_name):
-        """Change state machine's active state
-        """
-        try:
-            # Perform any exit actions of the current state
-            if self.active_state is not None:
-                hook = getattr(self.pm.hook, 'state_{}_exit'.format(self.active_state))
-                hook(cfg=self.cfg, app=self.app, win=self.win)
-                BlockConsoleHandler.dedent()
-                LOGGER.debug("took %0.3f seconds", time.time() - self._start_time)
-        except Exception as ex:
-            if self.failsafe_state and self.active_state != self.failsafe_state:
-                LOGGER.error(str(ex))
-                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
-                state_name = self.failsafe_state
-            else:
-                raise
-
-        if state_name not in self.states:
-            raise ValueError('"{}" not in registered states...'.format(state_name))
-
-        # Switch to the new state and perform its entry actions
-        BlockConsoleHandler.indent()
-        self._start_time = time.time()
-        LOGGER.debug("Activate state '%s'", state_name)
-        self.active_state = state_name
-
-        try:
-            hook = getattr(self.pm.hook, 'state_{}_enter'.format(self.active_state))
-            hook(cfg=self.cfg, app=self.app, win=self.win)
-        except Exception as ex:
-            if self.failsafe_state and self.active_state != self.failsafe_state:
-                LOGGER.error(str(ex))
-                LOGGER.debug('Back to failsafe state due to error:', exc_info=True)
-                self.set_state(self.failsafe_state)
-            else:
-                raise
Binary files ../pibooth_local_copy/tests/captures/fond.jpg and ./tests/captures/fond.jpg differ
Binary files ../pibooth_local_copy/tests/captures/landscape/capture0.jpg and ./tests/captures/landscape/capture0.jpg differ
Binary files ../pibooth_local_copy/tests/captures/landscape/capture1.jpg and ./tests/captures/landscape/capture1.jpg differ
Binary files ../pibooth_local_copy/tests/captures/landscape/capture2.jpg and ./tests/captures/landscape/capture2.jpg differ
Binary files ../pibooth_local_copy/tests/captures/landscape/capture3.jpg and ./tests/captures/landscape/capture3.jpg differ
Binary files ../pibooth_local_copy/tests/captures/landscape/overlay0.png and ./tests/captures/landscape/overlay0.png differ
Binary files ../pibooth_local_copy/tests/captures/landscape/overlay1.png and ./tests/captures/landscape/overlay1.png differ
Binary files ../pibooth_local_copy/tests/captures/landscape/overlay2.png and ./tests/captures/landscape/overlay2.png differ
Binary files ../pibooth_local_copy/tests/captures/landscape/overlay3.png and ./tests/captures/landscape/overlay3.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/capture0.png and ./tests/captures/portrait/capture0.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/capture1.png and ./tests/captures/portrait/capture1.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/capture2.png and ./tests/captures/portrait/capture2.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/capture3.jpg and ./tests/captures/portrait/capture3.jpg differ
Binary files ../pibooth_local_copy/tests/captures/portrait/overlay0.png and ./tests/captures/portrait/overlay0.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/overlay1.png and ./tests/captures/portrait/overlay1.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/overlay2.png and ./tests/captures/portrait/overlay2.png differ
Binary files ../pibooth_local_copy/tests/captures/portrait/overlay3.png and ./tests/captures/portrait/overlay3.png differ
diff -ruN ../pibooth_local_copy/tests/conftest.py ./tests/conftest.py
--- ../pibooth_local_copy/tests/conftest.py	1969-12-31 19:00:00
+++ ./tests/conftest.py	2025-05-16 14:02:41
@@ -0,0 +1,125 @@
+# -*- coding: utf-8 -*-
+
+
+import os
+import pytest
+from PIL import Image
+from pibooth import language
+from pibooth.counters import Counters
+from pibooth.config.parser import PiConfigParser
+from pibooth.camera import get_rpi_camera_proxy, get_gp_camera_proxy, get_cv_camera_proxy
+from pibooth.camera import RpiCamera, GpCamera, CvCamera, HybridRpiCamera, HybridCvCamera
+
+
+ISO = 100
+RESOLUTION = (1934, 2464)
+MOCKS_DIR = os.path.join(os.path.dirname(__file__), 'mocks')
+CAPTURES_DIR = os.path.join(os.path.dirname(__file__), 'captures')
+
+
+@pytest.fixture
+def init(tmpdir):
+    return language.init(str(tmpdir.join('translations.cfg')))
+
+
+@pytest.fixture(scope='session')
+def captures_portrait():
+    return [Image.open(os.path.join(CAPTURES_DIR, 'portrait', img))
+            for img in os.listdir(os.path.join(CAPTURES_DIR, 'portrait'))
+            if img.startswith('capture')]
+
+
+@pytest.fixture(scope='session')
+def overlays_portrait_path():
+    return [os.path.join(CAPTURES_DIR, 'portrait', img)
+            for img in os.listdir(os.path.join(CAPTURES_DIR, 'portrait'))
+            if img.startswith('overlay')]
+
+
+@pytest.fixture(scope='session')
+def captures_landscape():
+    return [Image.open(os.path.join(CAPTURES_DIR, 'landscape', img))
+            for img in os.listdir(os.path.join(CAPTURES_DIR, 'landscape'))
+            if img.startswith('capture')]
+
+
+@pytest.fixture(scope='session')
+def overlays_landscape_path():
+    return [os.path.join(CAPTURES_DIR, 'landscape', img)
+            for img in os.listdir(os.path.join(CAPTURES_DIR, 'landscape'))
+            if img.startswith('overlay')]
+
+
+@pytest.fixture(scope='session')
+def fond_path():
+    return os.path.join(CAPTURES_DIR, 'fond.jpg')
+
+
+@pytest.fixture(scope='session')
+def cfg_path():
+    return os.path.join(MOCKS_DIR, 'pibooth.cfg')
+
+
+@pytest.fixture(scope='session')
+def cfg(cfg_path):
+    return PiConfigParser(cfg_path, None)
+
+
+@pytest.fixture
+def counters(tmpdir):
+    return Counters(str(tmpdir.join('data.pickle')), nbr_printed=0)
+
+
+@pytest.fixture(scope='session')
+def proxy_rpi():
+    return get_rpi_camera_proxy()
+
+
+@pytest.fixture(scope='session')
+def camera_rpi(proxy_rpi):
+    cam = RpiCamera(proxy_rpi)
+    cam.initialize(ISO, RESOLUTION, delete_internal_memory=True)
+    yield cam
+    cam.quit()
+
+
+@pytest.fixture(scope='session')
+def camera_rpi_gp(proxy_rpi, proxy_gp):
+    cam = HybridRpiCamera(proxy_rpi, proxy_gp)
+    cam.initialize(ISO, RESOLUTION, delete_internal_memory=True)
+    yield cam
+    cam.quit()
+
+
+@pytest.fixture(scope='session')
+def proxy_cv():
+    return get_cv_camera_proxy()
+
+
+@pytest.fixture(scope='session')
+def camera_cv(proxy_cv):
+    cam = CvCamera(proxy_cv)
+    cam.initialize(ISO, RESOLUTION, delete_internal_memory=True)
+    yield cam
+    cam.quit()
+
+
+@pytest.fixture(scope='session')
+def camera_cv_gp(proxy_cv, proxy_gp):
+    cam = HybridCvCamera(proxy_cv, proxy_gp)
+    cam.initialize(ISO, RESOLUTION, delete_internal_memory=True)
+    yield cam
+    cam.quit()
+
+
+@pytest.fixture(scope='session')
+def proxy_gp():
+    return get_gp_camera_proxy()
+
+
+@pytest.fixture(scope='session')
+def camera_gp(proxy_gp):
+    cam = GpCamera(proxy_gp)
+    cam.initialize(ISO, RESOLUTION, delete_internal_memory=True)
+    yield cam
+    cam.quit()
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Canon EOS 1300D.txt ./tests/dslr_diag/Canon EOS 1300D.txt
--- ../pibooth_local_copy/tests/dslr_diag/Canon EOS 1300D.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Canon EOS 1300D.txt	2025-05-16 14:02:41
@@ -0,0 +1,482 @@
+
+================================================================================
+Pibooth version installed: 1.1.0
+Camera(s) detected: True
+Listing all connected DSLR camera
+00 : addr-> usb:001,005  name-> Canon EOS 1300D
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+/actions/syncdatetimeutc
+  Label       : Synchronize camera date and time with PC
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/syncdatetime
+  Label       : Synchronize camera date and time with PC
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/uilock
+  Label       : UI Lock
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Canon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Canon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['Near 1', 'Near 2', 'Near 3', 'None', 'Far 1', 'Far 2', 'Far 3']
+/actions/cancelautofocus
+  Label       : Cancel Canon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/eoszoom
+  Label       : Canon EOS Zoom
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/eoszoomposition
+  Label       : Canon EOS Zoom Position
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Canon EOS Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/eosremoterelease
+  Label       : Canon EOS Remote Release
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['None', 'Press Half', 'Press Full', 'Release Half', 'Release Full', 'Immediate', 'Press 1', 'Press 2', 'Press 3', 'Release 1', 'Release 2', 'Release 3']
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetimeutc
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1565508327
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1565504727
+  Choices     : n/a
+/settings/reviewtime
+  Label       : Quick Review Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 2 seconds
+  Choices     : ['None', '2 seconds', '4 seconds', '8 seconds', 'Hold']
+/settings/output
+  Label       : Camera Output
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['TFT', 'PC', 'TFT + PC', 'Setting 4', 'Setting 5', 'Setting 6', 'Setting 7', 'Unknown value 0008', 'Unknown value 0009', 'Unknown value 000a', 'Unknown value 000b', 'Off']
+/settings/movierecordtarget
+  Label       : Recording Destination
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['None']
+/settings/evfmode
+  Label       : EVF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1
+  Choices     : ['1', '0']
+/settings/ownername
+  Label       : Owner Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/artist
+  Label       : Artist
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/copyright
+  Label       : Copyright
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/customfuncex
+  Label       : Custom Functions Ex
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : bc,4,1,2c,3,101,1,0,103,1,0,10f,1,0,2,2c,3,201,1,0,202,1,0,203,1,0,3,14,1,50e,1,0,4,38,4,701,1,0,704,1,0,70e,1,0,811,1,0,
+  Choices     : n/a
+/settings/focusinfo
+  Label       : Focus Info
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : eosversion=0,size=5184x3456,size2=5184x3456,points={{0,743,117,181},{-839,393,172,129},{839,393,172,129},{-1394,0,172,129},{0,0,224,222},{1394,0,172,129},{-839,-393,172,129},{839,-393,172,129},{0,-743,117,181}},select={},unknown={10000000ffff}
+  Choices     : n/a
+/settings/autopoweroff
+  Label       : Auto Power Off
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/depthoffield
+  Label       : Depth of Field
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/capture
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 35fd1a0
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon Inc.
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 1300D
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 3-1.1.0
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : None
+  Choices     : n/a
+/status/model
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2147484676
+  Choices     : n/a
+/status/ptpversion
+  Label       : PTP Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 256
+  Choices     : n/a
+/status/
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/lensname
+  Label       : Lens Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : EF-S18-55mm f/3.5-5.6 IS II
+  Choices     : n/a
+/status/eosserialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 203073067990
+  Choices     : n/a
+/status/shuttercounter
+  Label       : Shutter Counter
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5601
+  Choices     : n/a
+/status/availableshots
+  Label       : Available Shots
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2231
+  Choices     : n/a
+/imgsettings/imageformat
+  Label       : Image Format
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Large Fine JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'Smaller JPEG', 'Tiny JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/imageformatsd
+  Label       : Image Format SD
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Large Fine JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'Smaller JPEG', 'Tiny JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 100
+  Choices     : ['Auto', '100', '200', '400', '800', '1600', '3200', '6400']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto', 'Unknown value 0017', 'Daylight', 'Shadow', 'Cloudy', 'Tungsten', 'Fluorescent', 'Flash', 'Manual']
+/imgsettings/whitebalanceadjusta
+  Label       : WhiteBalance Adjust A
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/imgsettings/whitebalanceadjustb
+  Label       : WhiteBalance Adjust B
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/imgsettings/whitebalancexa
+  Label       : WhiteBalance X A
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/whitebalancexb
+  Label       : WhiteBalance X B
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-5', '-4.6', '-4.3', '-4', '-3.6', '-3.3', '-3', '-2.6', '-2.3', '-2', '-1.6', '-1.3', '-1', '-0.6', '-0.3', '0', '0.3', '0.6', '1', '1.3', '1.6', '2', '2.3', '2.6', '3', '3.3', '3.6', '4', '4.3', '4.6', '5']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Manual
+  Choices     : ['One Shot', 'AI Focus', 'AI Servo', 'Manual']
+/capturesettings/aspectratio
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3:2
+  Choices     : ['3:2', '4:3', '16:9', '1:1']
+/capturesettings/storageid
+  Label       : Storage Device
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00020001
+  Choices     : n/a
+/capturesettings/autoexposuremode
+  Label       : Canon Auto Exposure Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : P
+  Choices     : ['P', 'TV', 'AV', 'Manual', 'Bulb', 'A_DEP', 'DEP', 'Custom', 'Lock', 'Green', 'Night Portrait', 'Sports', 'Portrait', 'Landscape', 'Closeup', 'Flash Off']
+/capturesettings/drivemode
+  Label       : Drive Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single
+  Choices     : ['Single', 'Continuous', 'Timer 10 sec', 'Timer 2 sec', 'Unknown value 0007']
+/capturesettings/picturestyle
+  Label       : Picture Style
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto', 'Standard', 'Portrait', 'Landscape', 'Neutral', 'Faithful', 'Monochrome', 'User defined 1', 'User defined 2', 'User defined 3']
+/capturesettings/aperture
+  Label       : Aperture
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : implicit auto
+  Choices     : ['implicit auto']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : auto
+  Choices     : ['auto']
+/capturesettings/meteringmode
+  Label       : Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Evaluative
+  Choices     : ['Evaluative', 'Partial', 'Center-weighted average']
+/capturesettings/bracketmode
+  Label       : Bracket Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/capturesettings/aeb
+  Label       : Auto Exposure Bracketing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : off
+  Choices     : ['off', '+/- 1/3', '+/- 2/3', '+/- 1', '+/- 1 1/3', '+/- 1 2/3', '+/- 2']
+/other/d402
+  Label       : PTP Property 0xd402
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 1300D
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Unknown Initiator
+  Choices     : n/a
+/other/d303
+  Label       : PTP Property 0xd303
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['100', '0', '75', '0', '50']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Setting option settings/capturetarget="Memory card"
+Getting option actions/viewfinder=2
+Setting option actions/viewfinder="1"
+Take capture preview
+Setting option actions/viewfinder="2"
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS: diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'dslr-diagnostic.log'
+on https://github.com/werdeil/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Canon EOS 1500D.txt ./tests/dslr_diag/Canon EOS 1500D.txt
--- ../pibooth_local_copy/tests/dslr_diag/Canon EOS 1500D.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Canon EOS 1500D.txt	2025-05-16 14:02:41
@@ -0,0 +1,575 @@
+
+pygame 1.9.6
+Hello from the pygame community. https://www.pygame.org/contribute.html
+pygame-menu 4.0.7
+Pibooth version installed: 2.0.7
+Installed plugins: extra-lights-1.0.1, picture-template-1.1.0
+GPhoto2 version installed: 2.5.27
+  - standard camlib set (ax203 canon digigr8 dimagev directory docupen jl2005a jl2005c kodak_dc240 lumix mars pentax ptp2 ricoh_g3 sierra sonix sq905 st2205 topfield tp6801)
+  - gcc (C compiler used)
+  - ltdl (for portable loading of camlibs)
+  - EXIF (for special handling of EXIF files)
+Listing all connected DSLR camera
+00 : addr-> usb:001,004  name-> Canon EOS 1500D
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+/actions/syncdatetimeutc
+  Label       : Synchronize camera date and time with PC
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/syncdatetime
+  Label       : Synchronize camera date and time with PC
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/uilock
+  Label       : UI Lock
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/popupflash
+  Label       : Popup Flash
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Canon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Canon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['Near 1', 'Near 2', 'Near 3', 'None', 'Far 1', 'Far 2', 'Far 3']
+/actions/cancelautofocus
+  Label       : Cancel Canon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/eoszoom
+  Label       : Canon EOS Zoom
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/eoszoomposition
+  Label       : Canon EOS Zoom Position
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Canon EOS Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/eosremoterelease
+  Label       : Canon EOS Remote Release
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['None', 'Press Half', 'Press Full', 'Release Half', 'Release Full', 'Immediate', 'Press 1', 'Press 2', 'Press 3', 'Release 1', 'Release 2', 'Release 3']
+/actions/eosmoviemode
+  Label       : Movie Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetimeutc
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1705941532
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1705941532
+  Choices     : n/a
+/settings/reviewtime
+  Label       : Quick Review Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['None', '2 seconds', '4 seconds', '8 seconds', 'Hold']
+/settings/output
+  Label       : Camera Output
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['TFT', 'PC', 'TFT + PC', 'MOBILE', 'TFT + MOBILE', 'PC + MOBILE', 'TFT + PC + MOBILE', 'MOBILE2', 'TFT + MOBILE2', 'PC + MOBILE2', 'TFT + PC + MOBILE2', 'Off']
+/settings/movierecordtarget
+  Label       : Recording Destination
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['None']
+/settings/evfmode
+  Label       : EVF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1
+  Choices     : ['1', '0']
+/settings/ownername
+  Label       : Owner Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/artist
+  Label       : Artist
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/copyright
+  Label       : Copyright
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/customfuncex
+  Label       : Custom Functions Ex
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : bc,4,1,2c,3,101,1,0,103,1,0,10f,1,0,2,2c,3,201,1,0,202,1,0,203,1,0,3,14,1,50e,1,0,4,38,4,701,1,0,704,1,0,70e,1,0,811,1,0,
+  Choices     : n/a
+/settings/focusinfo
+  Label       : Focus Info
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : eosversion=4,size=6000x4000,size2=6000x4000,points={{0,860,136,210},{-972,456,200,150},{972,456,200,150},{-1614,0,200,150},{0,0,260,258},{1614,0,200,150},{-972,-456,200,150},{972,-456,
+[... -> see log file for full message]
+  Choices     : n/a
+/settings/strobofiring
+  Label       : Strobo Firing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2
+  Choices     : n/a
+/settings/flashcharged
+  Label       : Flash Charging State
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/autopoweroff
+  Label       : Auto Power Off
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/depthoffield
+  Label       : Depth of Field
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/capture
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/settings/remotemode
+  Label       : Remote Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/settings/eventmode
+  Label       : Event Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 4d0a99df1242425d9f559a5919628913
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon Inc.
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 2000D
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 3-1.1.0
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/status/model
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2147484722
+  Choices     : n/a
+/status/ptpversion
+  Label       : PTP Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 256
+  Choices     : n/a
+/status/
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/lensname
+  Label       : Lens Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : EF-S24mm f/2.8 STM
+  Choices     : n/a
+/status/eosserialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 453076036997
+  Choices     : n/a
+/status/shuttercounter
+  Label       : Shutter Counter
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 19059
+  Choices     : n/a
+/status/availableshots
+  Label       : Available Shots
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 77
+  Choices     : n/a
+/status/eosmovieswitch
+  Label       : Movie Switch
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/imageformat
+  Label       : Image Format
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Smaller JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'Smaller JPEG', 'Tiny JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/imageformatsd
+  Label       : Image Format SD
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Smaller JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'Smaller JPEG', 'Tiny JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto']
+/imgsettings/whitebalancexa
+  Label       : WhiteBalance X A
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/whitebalancexb
+  Label       : WhiteBalance X B
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['0']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AI Focus
+  Choices     : ['AI Focus']
+/capturesettings/aspectratio
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3:2
+  Choices     : ['3:2']
+/capturesettings/storageid
+  Label       : Storage Device
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00020001
+  Choices     : n/a
+/capturesettings/autoexposuremode
+  Label       : Canon Auto Exposure Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Green
+  Choices     : ['P', 'TV', 'AV', 'Manual', 'Bulb', 'A_DEP', 'DEP', 'Custom', 'Lock', 'Green', 'Night Portrait', 'Sports', 'Portrait', 'Landscape', 'Closeup', 'Flash Off', 'Auto', 'Handheld Night Scen
+[... -> see log file for full message]
+/capturesettings/autoexposuremodedial
+  Label       : Canon Auto Exposure Mode Dial
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Green
+  Choices     : ['P', 'TV', 'AV', 'Manual', 'Bulb', 'A_DEP', 'DEP', 'Custom', 'Lock', 'Green', 'Night Portrait', 'Sports', 'Portrait', 'Landscape', 'Closeup', 'Flash Off', 'Auto', 'Handheld Night Scen
+[... -> see log file for full message]
+/capturesettings/drivemode
+  Label       : Drive Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single
+  Choices     : ['Single', 'Timer 10 sec', 'Continuous timer']
+/capturesettings/picturestyle
+  Label       : Picture Style
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto']
+/capturesettings/aperture
+  Label       : Aperture
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : implicit auto
+  Choices     : ['implicit auto']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : auto
+  Choices     : ['auto']
+/capturesettings/meteringmode
+  Label       : Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Evaluative
+  Choices     : ['Evaluative']
+/capturesettings/liveviewsize
+  Label       : Live View Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : val 0
+  Choices     : ['Large', 'Medium', 'Small']
+/capturesettings/bracketmode
+  Label       : Bracket Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['Unknown value 0000']
+/capturesettings/aeb
+  Label       : Auto Exposure Bracketing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : off
+  Choices     : ['off']
+/capturesettings/alomode
+  Label       : Auto Lighting Optimization
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Standard (disabled in manual exposure)
+  Choices     : ['Standard (disabled in manual exposure)']
+/other/d402
+  Label       : PTP Property 0xd402
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 2000D
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Unknown Initiator
+  Choices     : n/a
+/other/d303
+  Label       : PTP Property 0xd303
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['100', '0', '75', '0', '50']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+   -> invalid value '100' for option iso (possible choices: ['Auto'])
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9110 receiving resp failed: PTP Device Busy (0x2019)'
+Gphoto2: b'_set_config [config.c:10780]': b"'ptp_canon_eos_setdevicepropvalue (params, cursub->propid, &propval, cursub->type)' failed: PTP Device Busy (0x2019)"
+Gphoto2: b'gp_context_error': b"The property 'ISO Speed' / 0xd103 was not set (0x2019: PTP Device Busy)."
+Gphoto2: b'gp_camera_set_config [gphoto2-camera.c:1114]': b"'camera->functions->set_config (camera, window, context)' failed: -110"
+   -> unsupported setting imgsettings/iso=100 (nothing configured on DSLR)
+Setting option settings/capturetarget="Memory card"
+Getting option actions/viewfinder=0
+Setting option actions/viewfinder="1"
+Take capture preview
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Gphoto2: b'ptp_usb_getresp [usb.c:515]': b'PTP_OC 0x9153 receiving resp failed: Camera Not Ready (0xa102)'
+Setting option actions/viewfinder="0"
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Canon EOS 450D.txt ./tests/dslr_diag/Canon EOS 450D.txt
--- ../pibooth_local_copy/tests/dslr_diag/Canon EOS 450D.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Canon EOS 450D.txt	2025-05-16 14:02:41
@@ -0,0 +1,409 @@
+Pibooth version installed: 2.0.0
+Listing all connected DSLR camera
+00 : addr-> usb:001,009  name-> Canon EOS 450D (PTP mode)
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+/actions/syncdatetime
+  Label       : Synchronize camera date and time with PC
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/uilock
+  Label       : UI Lock
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Canon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Canon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['Near 1', 'Near 2', 'Near 3', 'None', 'Far 1', 'Far 2', 'Far 3']
+/actions/eoszoom
+  Label       : Canon EOS Zoom
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/eoszoomposition
+  Label       : Canon EOS Zoom Position
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Canon EOS Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1601242178
+  Choices     : n/a
+/settings/reviewtime
+  Label       : Quick Review Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 4 seconds
+  Choices     : ['None', '2 seconds', '4 seconds', '8 seconds', 'Hold']
+/settings/output
+  Label       : Camera Output
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['TFT', 'PC', 'Off']
+/settings/evfmode
+  Label       : EVF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1
+  Choices     : ['0', '1']
+/settings/ownername
+  Label       : Owner Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 
+  Choices     : n/a
+/settings/customfuncex
+  Label       : Custom Functions Ex
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : d4,4,1,20,2,101,1,0,10f,1,0,2,38,4,201,1,0,202,1,0,203,1,0,204,1,0,3,2c,3,50e,1,0,511,1,0,60f,1,0,4,38,4,701,1,0,704,1,0,811,1,0,80f,1,0,
+  Choices     : n/a
+/settings/autopoweroff
+  Label       : Auto Power Off
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/depthoffield
+  Label       : Depth of Field
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/capture
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5bdd23d9acbd47dc9989f30ea2de510b
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon Inc.
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 450D
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 3-1.1.0
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : None
+  Choices     : n/a
+/status/model
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2147484022
+  Choices     : n/a
+/status/ptpversion
+  Label       : PTP Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 256
+  Choices     : n/a
+/status/dpofversion
+  Label       : DPOF Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 257
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/eosserialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 330119900
+  Choices     : n/a
+/status/shuttercounter
+  Label       : Shutter Counter
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 38667
+  Choices     : n/a
+/status/availableshots
+  Label       : Available Shots
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 250637
+  Choices     : n/a
+/imgsettings/imageformat
+  Label       : Image Format
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Large Fine JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/imageformatsd
+  Label       : Image Format SD
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Large Fine JPEG
+  Choices     : ['Large Fine JPEG', 'Large Normal JPEG', 'Medium Fine JPEG', 'Medium Normal JPEG', 'Small Fine JPEG', 'Small Normal JPEG', 'RAW + Large Fine JPEG', 'RAW']
+/imgsettings/imageformatcf
+  Label       : Image Format CF
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : RAW
+  Choices     : ['RAW']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 100
+  Choices     : ['Auto', '100', '200', '400', '800', '1600']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Shadow
+  Choices     : ['Auto', 'Daylight', 'Shadow', 'Cloudy', 'Tungsten', 'Fluorescent', 'Flash', 'Manual']
+/imgsettings/colortemperature
+  Label       : Color Temperature
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/whitebalanceadjusta
+  Label       : WhiteBalance Adjust A
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/imgsettings/whitebalanceadjustb
+  Label       : WhiteBalance Adjust B
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/imgsettings/whitebalancexa
+  Label       : WhiteBalance X A
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/whitebalancexb
+  Label       : WhiteBalance X B
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-2', '-1.6', '-1.3', '-1', '-0.6', '-0.3', '0', '0.3', '0.6', '1', '1.3', '1.6', '2']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Manual
+  Choices     : ['Manual']
+/capturesettings/storageid
+  Label       : Storage Device
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00020000
+  Choices     : n/a
+/capturesettings/autoexposuremode
+  Label       : Canon Auto Exposure Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : TV
+  Choices     : ['P', 'TV', 'AV', 'Manual', 'Bulb', 'A_DEP', 'DEP', 'Custom', 'Lock', 'Green', 'Night Portrait', 'Sports', 'Portrait', 'Landscape', 'Closeup', 'Flash Off']
+/capturesettings/drivemode
+  Label       : Drive Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single
+  Choices     : ['Single', 'Continuous', 'Timer 10 sec', 'Timer 2 sec', 'Unknown value 0007']
+/capturesettings/picturestyle
+  Label       : Picture Style
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Neutral
+  Choices     : ['Standard', 'Portrait', 'Landscape', 'Neutral', 'Faithful', 'Monochrome', 'User defined 1', 'User defined 2', 'User defined 3']
+/capturesettings/aperture
+  Label       : Aperture
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : implicit auto
+  Choices     : ['implicit auto']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/125
+  Choices     : ['30', '25', '20', '15', '13', '10', '8', '6', '5', '4', '3.2', '2.5', '2', '1.6', '1.3', '1', '0.8', '0.6', '0.5', '0.4', '0.3', '1/4', '1/5', '1/6', '1/8', '1/10', '1/13', '1/15', '1/20', '1/25', '1/30', '1/40', '1/50', '1/60', '1/80', '1/100', '1/125', '1/160', '1/200', '1/250', '1/320', '1/400', '1/500', '1/640', '1/800', '1/1000', '1/1250', '1/1600', '1/2000', '1/2500', '1/3200', '1/4000']
+/capturesettings/meteringmode
+  Label       : Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Center-weighted average
+  Choices     : ['Evaluative', 'Partial', 'Spot', 'Center-weighted average']
+/capturesettings/bracketmode
+  Label       : Bracket Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/other/d402
+  Label       : PTP Property 0xd402
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Canon EOS 450D
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Unknown Initiator
+  Choices     : n/a
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Setting option settings/capturetarget="Memory card"
+Getting option actions/viewfinder=2
+Setting option actions/viewfinder="1"
+Take capture preview
+Setting option actions/viewfinder="0"
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Fuji Fujifilm X-T2.txt ./tests/dslr_diag/Fuji Fujifilm X-T2.txt
--- ../pibooth_local_copy/tests/dslr_diag/Fuji Fujifilm X-T2.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Fuji Fujifilm X-T2.txt	2025-05-16 14:02:41
@@ -0,0 +1,894 @@
+Pibooth version installed: 2.0.3
+Installed plugins:
+Listing all connected DSLR camera
+00 : addr-> usb:001,010  name-> Fuji Fujifilm X-T2
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Fuji Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/movie
+  Label       : Movie Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1626977700
+  Choices     : n/a
+/settings/imagecomment
+  Label       : Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/settings/devicename
+  Label       : Device Name
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/settings/copyright
+  Label       : Copyright
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/settings/cameraaction
+  Label       : Camera Action
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Shoot
+  Choices     : ['Unknown value 0104', 'AF', 'Cancel AF', 'Shoot', 'Bulb On', 'Bulb Off', 'Unknown value a000', 'Unknown value 0006', 'Unknown value 9000', 'Unknown value 0002', 'Unknown value 9100', 'Unknown value 0001', 'Unknown value 9300', 'Unknown value 0005']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 59353331303216082465202062083D
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : FUJIFILM
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : X-T2
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 4.30
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : fujifilm.co.jp: 1.0;
+  Choices     : n/a
+/status/lensname
+  Label       : Lens Name
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : ,,
+  Choices     : n/a
+/status/shuttercounter
+  Label       : Shutter Counter
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 24583
+  Choices     : n/a
+/imgsettings/imageformat
+  Label       : Image Format
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : JPEG Normal
+  Choices     : ['RAW', 'JPEG Fine', 'JPEG Normal', 'RAW + JPEG Fine', 'RAW + JPEG Normal']
+/imgsettings/filmsimulation
+  Label       : Film Simulation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : PRO Neg.Std
+  Choices     : ['PROVIA/Standard', 'Velvia/Vivid', 'ASTIA/Soft', 'PRO Neg.Hi', 'PRO Neg.Std', 'Black & White', 'Black & White+Ye Filter', 'Black & White+R Filter', 'Black & White+G Filter', 'Sepia', 'Classic Chrome', 'ACROS', 'ACROS+Ye Filter', 'ACROS+R Filter,', 'ACROS+G Filter']
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3008x2000
+  Choices     : ['3008x2000', '3008x1688', '2000x2000', '4240x2832', '4240x2384', '2832x2832', '6000x4000', '6000x3376', '4000x4000']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : -1
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '25600', '51200', '-1', '-2', '-3']
+/imgsettings/colortemperature
+  Label       : Color Temperature
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 10000
+  Choices     : ['2500', '2550', '2650', '2700', '2800', '2850', '2950', '3000', '3100', '3200', '3300', '3400', '3600', '3700', '3800', '4000', '4200', '4300', '4500', '4800', '5000', '5300', '5600', '5900', '6300', '6700', '7100', '7700', '8300', '9100', '10000']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'Daylight', 'Tungsten', 'Unknown value 0008', 'Fluorescent Lamp 1', 'Fluorescent Lamp 2', 'Fluorescent Lamp 3', 'Shade', 'Choose Color Temperature', 'Preset Custom 1', 'Preset Custom 2', 'Preset Custom 3']
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AdobeRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : no
+  Data type   : <class 'NoneType'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['f/1.2', 'f/1.4', 'f/1.6', 'f/1.8', 'f/2', 'f/2.2', 'f/2.5', 'f/2.8', 'f/3.2', 'f/3.6', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.4', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16', 'f/18', 'f/20', 'f/22']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Manual
+  Choices     : ['Manual', 'Single-Servo AF', 'Continuous-Servo AF']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : A
+  Choices     : ['M', 'A', 'S', 'Action']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Self-timer
+  Choices     : ['Self-timer']
+/capturesettings/focusmetermode
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single-area AF
+  Choices     : ['Single-area AF', 'Dynamic-area AF', 'Group-dynamic AF']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Center Spot
+  Choices     : ['Average', 'Center Weighted', 'Multi Spot', 'Center Spot']
+/capturesettings/capturedelay
+  Label       : Capture Delay
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.000s
+  Choices     : ['10.000s', '2.000s', '0.000s']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/30
+  Choices     : ['bulb', '60m', '30m', '15m', '8m', '4m', '2m', '60s', '50s', '40s', '30s', '25s', '20s', '15s', '13s', '10s', '8s', '6s', '5s', '4s', '3s', '2.5s', '2s', '1.6s', '1.3s', '1s', '0.8s', '0.6s', '1/2', '0.4s', '1/3', '1/4', '1/5', '1/6', '1/8', '1/10', '1/13', '1/15', '1/20', '1/25', '1/30', '1/40', '1/50', '1/60', '1/80', '1/100', '1/125', '1/160', '1/200', '1/250', '1/320', '1/400', '1/500', '1/640', '1/800', '1/1000', '1/1250', '1/1600', '1/2000', '1/2500', '1/3200', '1/4000', '1/5000', '1/6400', '1/8000', '1/10000', '1/13000', '1/16000', '1/20000', '1/25000', '1/32000']
+/capturesettings/liveviewsize
+  Label       : Live View Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : VGA
+  Choices     : ['XGA', 'VGA', 'QVGA']
+/other/5003
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3008x2000
+  Choices     : ['3008x2000', '3008x1688', '2000x2000', '4240x2832', '4240x2384', '2832x2832', '6000x4000', '6000x3376', '4000x4000']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4', '6', '8', '32769', '32770', '32771', '32774', '32775', '32776', '32777', '32778']
+/other/500a
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '32769', '32770']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 4
+  Choices     : ['1', '2', '3', '4']
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['1', '3', '4', '6']
+/other/500f
+  Label       : Exposure Index (film speed ISO)
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : -1
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '25600', '51200', '-1', '-2', '-3']
+/other/5011
+  Label       : Date & Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 20210722T191500
+  Choices     : n/a
+/other/5012
+  Label       : Pre-Capture Delay
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['10000', '2000', '0']
+/other/5015
+  Label       : Sharpness
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-40.0, max=40.0, step=10.0
+/other/501c
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32769
+  Choices     : ['32769', '32770', '32771']
+/other/d001
+  Label       : Film Simulation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']
+/other/d007
+  Label       : DRangeMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 65535
+  Choices     : ['65535', '100', '200', '400']
+/other/d008
+  Label       : ColorMode
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 30.0
+  Choices     : min=-40.0, max=40.0, step=10.0
+/other/d00a
+  Label       : ColorSpace
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d00b
+  Label       : WhitebalanceTune1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/other/d00c
+  Label       : WhitebalanceTune2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/other/d017
+  Label       : Color Temperature
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 10000
+  Choices     : ['2500', '2550', '2650', '2700', '2800', '2850', '2950', '3000', '3100', '3200', '3300', '3400', '3600', '3700', '3800', '4000', '4200', '4300', '4500', '4800', '5000', '5300', '5600', '5900', '6300', '6700', '7100', '7700', '8300', '9100', '10000']
+/other/d018
+  Label       : Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['1', '2', '3', '4', '5']
+/other/d01b
+  Label       : ThroughImageZoom
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d01c
+  Label       : NoiseReduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 8192
+  Choices     : ['0', '4096', '8192', '12288', '16384', '20480', '24576', '28672', '32768']
+/other/d100
+  Label       : Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d106
+  Label       : FrameGuideMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d10a
+  Label       : ShutterPriorityMode1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d10b
+  Label       : ShutterPriorityMode2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d112
+  Label       : AFIlluminator
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d136
+  Label       : FunctionLock
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d145
+  Label       : Password
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0000
+  Choices     : n/a
+/other/d153
+  Label       : FirmwareVersion
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1072
+  Choices     : n/a
+/other/d154
+  Label       : ShotCount
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1269628928
+  Choices     : n/a
+/other/d155
+  Label       : ShutterExchangeCount
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/other/d201
+  Label       : ReleaseMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 4
+  Choices     : ['4']
+/other/d207
+  Label       : PriorityMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d208
+  Label       : PTP Property 0xd208
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 772
+  Choices     : ['260', '512', '4', '772', '1280', '12', '40960', '6', '36864', '2', '37120', '1', '37632', '5']
+/other/d209
+  Label       : AFStatus
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 4
+  Choices     : ['1', '2', '3', '4']
+/other/d20b
+  Label       : DeviceName
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d20c
+  Label       : MediaRecord
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4']
+/other/d20d
+  Label       : MediaCapacity
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6002,14,29592064,9,0,0,0,0
+  Choices     : n/a
+/other/d20e
+  Label       : FreeSDRAMImages
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 19
+  Choices     : ['0', '1']
+/other/d211
+  Label       : MediaStatus
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 769.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d215
+  Label       : Copyright
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d216
+  Label       : Copyright2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/500d
+  Label       : Exposure Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 31250
+  Choices     : []
+/other/5007
+  Label       : F-Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['120', '140', '160', '180', '200', '220', '250', '280', '320', '360', '400', '450', '500', '560', '640', '710', '800', '900', '1000', '1100', '1300', '1400', '1600', '1800', '2000', '2200']
+/other/d38c
+  Label       : LensZoomPosCaps
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1']
+/other/d171
+  Label       : FocusPosition
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '0', '0', '0', '0', '0']
+/other/d21c
+  Label       : PTP Property 0xd21c
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
+/other/d170
+  Label       : LensZoomPos
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1']
+/other/d174
+  Label       : LiveViewImageSize
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2', '3']
+/other/d173
+  Label       : LiveViewImageQuality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '3']
+/other/d230
+  Label       : ForceMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1']
+/other/d020
+  Label       : FaceDetectionMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d022
+  Label       : RawCompression
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d023
+  Label       : GrainEffect
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d024
+  Label       : SetEyeAFMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4']
+/other/d025
+  Label       : FocusPoints
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d026
+  Label       : MFAssistMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9']
+/other/d027
+  Label       : InterlockAEAFArea
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d02f
+  Label       : TNumber
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d320
+  Label       : HighLightTone
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-20.0, max=40.0, step=10.0
+/other/d321
+  Label       : ShadowTone
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : -10.0
+  Choices     : min=-20.0, max=40.0, step=10.0
+/other/d322
+  Label       : LongExposureNR
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d323
+  Label       : FullTimeManualFocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d346
+  Label       : LensISSwitch
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d34a
+  Label       : InstantAFMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d34b
+  Label       : PreAFMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d34d
+  Label       : LMOMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d351
+  Label       : ISMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['1', '2', '3']
+/other/d35e
+  Label       : FocusCheckMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d173
+  Label       : LiveViewImageQuality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '3']
+/other/d365
+  Label       : FileNamePrefix1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : DSCF
+  Choices     : n/a
+/other/d366
+  Label       : FileNamePrefix2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : DSF
+  Choices     : n/a
+/other/d310
+  Label       : TotalShotCount
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1611071488
+  Choices     : n/a
+/other/d359
+  Label       : ExposurePreview
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d375
+  Label       : FrameGuideGridInfo1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0,0,0,850,0,0,0,0,850,0,0,0,0,
+  Choices     : n/a
+/other/d376
+  Label       : FrameGuideGridInfo2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0,0,0,850,0,0,0,0,850,0,0,0,0,
+  Choices     : n/a
+/other/d33f
+  Label       : ViewMode1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['1', '2', '3', '4', '5']
+/other/d364
+  Label       : CustomAutoPowerOff
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=255.0, step=1.0
+/other/d34e
+  Label       : LockButtonMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d36d
+  Label       : LensNameAndSerial
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : ,,
+  Choices     : n/a
+/other/d38a
+  Label       : LensUnknownData
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5']
+/other/d36a
+  Label       : BatteryInfo1
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 11.0
+  Choices     : min=0.0, max=16777215.0, step=1.0
+/other/d36b
+  Label       : BatteryInfo2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 72,0,0
+  Choices     : n/a
+/other/d36f
+  Label       : FunctionLockCategory1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 65536
+  Choices     : n/a
+/other/d370
+  Label       : FunctionLockCategory2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 65536
+  Choices     : n/a
+/other/d222
+  Label       : SensitivityFineTune1
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 8192.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d223
+  Label       : SensitivityFineTune2
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 8192.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d38c
+  Label       : LensZoomPosCaps
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1']
+/other/d38d
+  Label       : LensFNumberList
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :
+  Choices     : n/a
+/other/d38e
+  Label       : LensFocalLengthList
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0,0
+  Choices     : n/a
+/other/d17b
+  Label       : PTP Property 0xd17b
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Setting option settings/capturetarget="Memory card"
+   -> unsupported setting settings/capturetarget=Memory card (nothing configured on DSLR)
+Unknown option actions/viewfinder
+Take capture preview
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Nikon DSC D5300.txt ./tests/dslr_diag/Nikon DSC D5300.txt
--- ../pibooth_local_copy/tests/dslr_diag/Nikon DSC D5300.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Nikon DSC D5300.txt	2025-05-16 14:02:41
@@ -0,0 +1,3303 @@
+pygame 2.1.2 (SDL 2.26.5, Python 3.11.2)
+Hello from the pygame community. https://www.pygame.org/contribute.html
+pygame-menu 4.0.7
+Pibooth version installed: 2.0.8
+Installed plugins: 
+GPhoto2 version installed: 2.5.30
+  - standard camlib set (ax203 canon digigr8 dimagev directory docupen jl2005a jl2005c kodak_dc240 lumix mars pentax ptp2 ricoh_g3 sierra sonix sq905 st2205 topfield tp6801)
+  - gcc (C compiler used)
+  - no ltdl (for portable loading of camlibs)
+  - EXIF (for special handling of EXIF files)
+Listing all connected DSLR camera
+00 : addr-> usb:001,003  name-> Nikon DSC D5300
+
+================================================================================
+Stating diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Nikon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Nikon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-32767.0, max=32767.0, step=1.0
+/actions/changeafarea
+  Label       : Set Nikon Autofocus area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x0
+  Choices     : n/a
+/actions/controlmode
+  Label       : Set Nikon Control Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Nikon Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/movie
+  Label       : Movie Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1712515165
+  Choices     : n/a
+/settings/imagecomment
+  Label       : Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/settings/imagecommentenable
+  Label       : Enable Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/settings/recordingmedia
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Card
+  Choices     : ['Card', 'SDRAM', 'Unknown value 0002']
+/settings/cleansensor
+  Label       : Clean Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Startup and Shutdown
+  Choices     : ['Off', 'Startup', 'Shutdown', 'Startup and Shutdown']
+/settings/thumbsize
+  Label       : Thumb Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 
+  Choices     : ['normal', 'large']
+/settings/fastfs
+  Label       : Fast Filesystem
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 1
+  Choices     : [0, 1]
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/autofocus
+  Label       : Autofocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00000000000000000000000004737581
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Nikon Corporation
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : D5300
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : V1.01
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : microsoft.com: 1.0
+  Choices     : n/a
+/status/acpower
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/externalflash
+  Label       : External Flash
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/continousshootingcount
+  Label       : Continuous Shooting Count
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 13.0
+  Choices     : min=0.0, max=62.0, step=1.0
+/status/orientation
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0'
+  Choices     : ["0'", "270'", "90'", "180'"]
+/status/flashopen
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/flashcharged
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/availableshots
+  Label       : Available Shots
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3016.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/status/minfocallength
+  Label       : Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 18 mm
+  Choices     : n/a
+/status/maxfocallength
+  Label       : Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 55 mm
+  Choices     : n/a
+/status/apertureatminfocallength
+  Label       : Maximum Aperture at Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 4
+  Choices     : n/a
+/status/apertureatmaxfocallength
+  Label       : Maximum Aperture at Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6
+  Choices     : n/a
+/status/lowlight
+  Label       : Low Light
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3.0
+  Choices     : min=0.0, max=3.0, step=1.0
+/status/lightmeter
+  Label       : Light Meter
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-60.0, max=60.0, step=1.0
+/status/aflocked
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/aelocked
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/movieprohibit
+  Label       : Movie Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Movie prohibit conditions: Not in application mode
+  Choices     : n/a
+/status/liveviewprohibit
+  Label       : Liveview Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Live View prohibit conditions: Exposure Program Mode is not P/A/S/M
+  Choices     : n/a
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 6000x4000
+  Choices     : ['6000x4000', '4496x3000', '2992x2000']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 100
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000
+[... -> see log file for full message]
+/imgsettings/isoauto
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/imgsettings/autoiso
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'Daylight', 'Fluorescent', 'Tungsten', 'Flash', 'Cloudy', 'Shade', 'Preset']
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/minimumshutterspeed
+  Label       : Minimum Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0018
+  Choices     : ['1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50', '1/40', '1/30', '1/15', '1/8'
+[... -> see log file for full message]
+/capturesettings/isoautohilimit
+  Label       : ISO Auto Hi Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0006
+  Choices     : ['400', '800', '1600', '3200', 'Hi 1', 'Hi 2', 'Unknown value 0006', 'Unknown value 0007']
+/capturesettings/dlighting
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Extra high', 'High', 'Normal', 'Low', 'Off', 'Auto']
+/capturesettings/highisonr
+  Label       : High ISO Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Normal
+  Choices     : ['Off', 'Low', 'Normal', 'High']
+/capturesettings/moviequality
+  Label       : Movie Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 320x216
+  Choices     : ['320x216', '640x424', '1280x720', 'Unknown value 0003', 'Unknown value 0004', 'Unknown value 0005']
+/capturesettings/liveviewsize
+  Label       : Live View Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : VGA
+  Choices     : ['QVGA', 'VGA']
+/capturesettings/longexpnr
+  Label       : Long Exp Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/assistlight
+  Label       : Assist Light
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-5', '-4.666', '-4.333', '-4', '-3.666', '-3.333', '-3', '-2.666', '-2.333', '-2', '-1.666', '-1.333', '-1', '-0.666', '-0.333', '0', '0.333', '0.666', '1', '1.333', '1.666', '2', '2
+[... -> see log file for full message]
+/capturesettings/flashmode
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Flash off
+  Choices     : ['Flash off']
+/capturesettings/nikonflashmode
+  Label       : Nikon Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : iTTL
+  Choices     : ['iTTL', 'Manual']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : f/3.5
+  Choices     : ['f/3.5', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.3', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16', 'f/18', 'f/20', 'f/22']
+/capturesettings/flexibleprogram
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/capturesettings/imagequality
+  Label       : Image Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : JPEG Normal
+  Choices     : ['JPEG Basic', 'JPEG Normal', 'JPEG Fine', 'NEF (Raw)', 'NEF+Basic', 'NEF+Normal', 'NEF+Fine']
+/capturesettings/focallength
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 18.0
+  Choices     : min=18.0, max=55.0, step=0.009999999776482582
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['Manual', 'AF-S', 'AF-C', 'AF-A', 'Unknown value 8013']
+/capturesettings/focusmode2
+  Label       : Focus Mode 2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['AF-S', 'AF-C', 'AF-A', 'MF (fixed)', 'MF (selection)']
+/capturesettings/effectmode
+  Label       : Effect Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Selective color
+  Choices     : ['Night Vision', 'Color sketch', 'Miniature effect', 'Selective color', 'Silhouette', 'High key', 'Low key', 'Unknown value 0007', 'Unknown value 0008']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Night Landscape
+  Choices     : ['M', 'P', 'A', 'S', 'Auto', 'Portrait', 'Landscape', 'Macro', 'Sports', 'Night Landscape', 'Children', 'Automatic (No Flash)', 'Unknown value 8019']
+/capturesettings/scenemode
+  Label       : Scene Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Night Portrait
+  Choices     : ['Night landscape', 'Party/Indoor', 'Beach/Snow', 'Sunset', 'Dusk/Dawn', 'Pet Portrait', 'Candlelight', 'Blossom', 'Autumn colors', 'Food', 'Unknown value 000a', 'Unknown value 000b', 
+[... -> see log file for full message]
+/capturesettings/hdrmode
+  Label       : HDR Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single Shot
+  Choices     : ['Single Shot', 'Burst', 'Continuous Low Speed', 'Timer', 'Quick Response Remote', 'Delayed Remote', 'Quiet Release']
+/capturesettings/focusmetermode
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Closest Subject
+  Choices     : ['Multi-spot', 'Single Area', 'Closest Subject', 'Group Dynamic', 'Unknown value 8013', 'Unknown value 8014']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Multi Spot
+  Choices     : ['Center Weighted', 'Multi Spot', 'Center Spot']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.5000s
+  Choices     : ['0.0002s', '0.0003s', '0.0004s', '0.0005s', '0.0006s', '0.0008s', '0.0010s', '0.0012s', '0.0015s', '0.0020s', '0.0025s', '0.0031s', '0.0040s', '0.0050s', '0.0062s', '0.0080s', '0.0100
+[... -> see log file for full message]
+/capturesettings/shutterspeed2
+  Label       : Shutter Speed 2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/2
+  Choices     : ['1/4000', '1/3200', '1/2500', '1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50',
+[... -> see log file for full message]
+/capturesettings/exposuredelaymode
+  Label       : Exposure Delay Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/liveviewafmode
+  Label       : Live View AF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Face-priority AF
+  Choices     : ['Face-priority AF', 'Wide-area AF', 'Normal-area AF', 'Subject-tracking AF']
+/capturesettings/liveviewaffocus
+  Label       : Live View AF Focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single-servo AF
+  Choices     : ['Single-servo AF', 'Full-time-servo AF', 'Manual Focus (fixed)', 'Manual Focus (selection)']
+/capturesettings/liveviewimagezoomratio
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Entire Display
+  Choices     : ['Entire Display', 'Unknown value 0001', '25%', 'Unknown value 0003', '50%', 'Unknown value 0005']
+/capturesettings/filenrsequencing
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/imagerotationflag
+  Label       : Image Rotation Flag
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/nocfcardrelease
+  Label       : Release without CF card
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/autofocusarea
+  Label       : Auto Focus Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Centre
+  Choices     : ['Top', 'Bottom', 'Left', 'Right', 'Unknown value 0005', 'Unknown value 0006', 'Unknown value 0007', 'Unknown value 0008', 'Unknown value 0009', 'Unknown value 000a', 'Unknown value 00
+[... -> see log file for full message]
+/capturesettings/flashexposurecompensation
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-3.0, max=1.0, step=0.3333333432674408
+/capturesettings/bracketing
+  Label       : Bracketing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/evstep
+  Label       : EV Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3
+  Choices     : ['1/3', '1/2']
+/capturesettings/bracketset
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AE only
+  Choices     : ['AE & Flash', 'AE only', 'Flash only', 'WB bracketing', 'ADL bracketing']
+/capturesettings/aebracketingstep
+  Label       : AE Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3 EV
+  Choices     : ['1/3 EV', '1/2 EV', '2/3 EV', '1 EV', '2 EV', '3 EV', 'Unknown value 0006', 'Unknown value 0007']
+/capturesettings/wbbracketingstep
+  Label       : WB Bracketing Step
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1 EV
+  Choices     : ['1 EV', '2 EV', '3 EV']
+/capturesettings/aebracketingpattern
+  Label       : AE Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 images (normal and 2 unders)
+  Choices     : ['3 images (normal and 2 unders)']
+/capturesettings/wbbracketingpattern
+  Label       : WB Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 images (normal and 2 unders)
+  Choices     : ['3 images (normal and 2 unders)']
+/capturesettings/aebracketingcount
+  Label       : AE Bracketing Count
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=3.0, step=1.0
+/capturesettings/adlbracketingpattern
+  Label       : ADL Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 2 shots (Off -> User setting)
+  Choices     : ['2 shots (Off -> User setting)']
+/capturesettings/burstnumber
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=100.0, step=1.0
+/capturesettings/autowhitebias
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/tungstenwhitebias
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flourescentwhitebias
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/daylightwhitebias
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flashwhitebias
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/cloudywhitebias
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/shadewhitebias
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/whitebiaspresetno
+  Label       : White Balance Bias Preset Nr
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['0']
+/capturesettings/whitebiaspreset0
+  Label       : White Balance Bias Preset 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/capturesettings/whitebiaspreset1
+  Label       : White Balance Bias Preset 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/capturesettings/applicationmode
+  Label       : Application Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Application Mode 0
+  Choices     : ['Application Mode 0', 'Application Mode 1']
+/capturesettings/manualmoviesetting
+  Label       : Manual Movie Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/microphone
+  Label       : Microphone
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto sensitivity
+  Choices     : ['Auto sensitivity', 'High sensitivity', 'Medium sensitivity', 'Low sensitivity', 'Microphone off', 'Unknown value 0005']
+/capturesettings/autodistortioncontrol
+  Label       : Auto Distortion Control
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/videomode
+  Label       : Video Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : PAL
+  Choices     : ['NTSC', 'PAL']
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '
+[... -> see log file for full message]
+/other/5003
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 6000x4000
+  Choices     : ['6000x4000', '4496x3000', '2992x2000']
+/other/5004
+  Label       : Compression Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '4', '5', '6', '7']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4', '5', '6', '7', '32784', '32785', '32787']
+/other/5007
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 350
+  Choices     : ['350', '400', '450', '500', '560', '630', '710', '800', '900', '1000', '1100', '1300', '1400', '1600', '1800', '2000', '2200']
+/other/5008
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1800.0
+  Choices     : min=1800.0, max=5500.0, step=1.0
+/other/500a
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32786
+  Choices     : ['1', '32784', '32785', '32786', '32787']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['2', '3', '4']
+/other/500c
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/500d
+  Label       : Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5000
+  Choices     : ['2', '3', '4', '5', '6', '8', '10', '12', '15', '20', '25', '31', '40', '50', '62', '80', '100', '125', '166', '200', '250', '333', '400', '500', '666', '769', '1000', '1250', '1666',
+[... -> see log file for full message]
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32790
+  Choices     : ['1', '2', '3', '4', '32784', '32785', '32786', '32787', '32788', '32790', '32791', '32792', '32793']
+/other/500f
+  Label       : Exposure Index (film speed ISO)
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000
+[... -> see log file for full message]
+/other/5010
+  Label       : Exposure Bias Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-5000', '-4666', '-4333', '-4000', '-3666', '-3333', '-3000', '-2666', '-2333', '-2000', '-1666', '-1333', '-1000', '-666', '-333', '0', '333', '666', '1000', '1333', '1666', '2000',
+[... -> see log file for full message]
+/other/5011
+  Label       : Date & Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 20240407T203925
+  Choices     : n/a
+/other/5013
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '32784', '32785', '32788', '32789', '32790']
+/other/5018
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', 
+[... -> see log file for full message]
+/other/501c
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32785
+  Choices     : ['2', '32784', '32785', '32786', '32787', '32788']
+/other/d303
+  Label       : UseDeviceStageFlag
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Windows/6.0.5330.0 MTPClassDriver/6.0.5330.0
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d015
+  Label       : Reset Bank 0
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d017
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d018
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d019
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01a
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01b
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01c
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01d
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01f
+  Label       : White Balance Preset Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d025
+  Label       : White Balance Preset Value 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/other/d026
+  Label       : White Balance Preset Value 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/other/d032
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d036
+  Label       : Video Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d037
+  Label       : Effect Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8']
+/other/d045
+  Label       : Reset Menu Bank
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d048
+  Label       : PTP_DPC_NIKON_A1AFCModePriority
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d054
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d056
+  Label       : Exposure Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d05d
+  Label       : Live View AF Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d061
+  Label       : Live View AF Focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '2', '3', '4']
+/other/d066
+  Label       : Auto Off Timers
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3']
+/other/d06a
+  Label       : Exposure delay mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d06b
+  Label       : Long Exposure Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d06c
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d070
+  Label       : High ISO noise reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3']
+/other/d078
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d08a
+  Label       : No CF Card Release
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d08d
+  Label       : AF Area Point
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d08f
+  Label       : Clean Image Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3']
+/other/d090
+  Label       : Image Comment String
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d091
+  Label       : Image Comment Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d092
+  Label       : Image Rotation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d09c
+  Label       : RetractableLensWarning
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a0
+  Label       : Movie Screen Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0a2
+  Label       : Movie Microphone
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0a4
+  Label       : MovRecProhibitCondition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 16384
+  Choices     : n/a
+/other/d0a6
+  Label       : Manual Movie Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a7
+  Label       : Movie Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a8
+  Label       : MovRecordMicrophoneLevelValue
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 15
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']
+/other/d0aa
+  Label       : MovWindNoiseReduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0b5
+  Label       : ISOControlSensitivity
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6400
+  Choices     : n/a
+/other/d0c0
+  Label       : Bracketing Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0c1
+  Label       : Exposure Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d0c2
+  Label       : Exposure Bracketing Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/d0c3
+  Label       : Auto Exposure Bracket Count
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d0c4
+  Label       : White Balance Bracket Step
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d0c5
+  Label       : White Balance Bracket Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/d0c6
+  Label       : ADLBracketingPattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0']
+/other/d0e0
+  Label       : Lens ID
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 928
+  Choices     : n/a
+/other/d0e1
+  Label       : Lens Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d0e2
+  Label       : Lens Type
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 383
+  Choices     : n/a
+/other/d0e3
+  Label       : Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1800
+  Choices     : n/a
+/other/d0e4
+  Label       : Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5500
+  Choices     : n/a
+/other/d0e5
+  Label       : Max. Aperture at Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 350
+  Choices     : n/a
+/other/d0e6
+  Label       : Max. Aperture at Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 560
+  Choices     : n/a
+/other/d0f8
+  Label       : Auto Distortion Control
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0f9
+  Label       : Scene Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 18
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d100
+  Label       : Nikon Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 65538
+  Choices     : ['69536', '68736', '68036', '67536', '67136', '66786', '66536', '66336', '66176', '66036', '65936', '65856', '65786', '65736', '65696', '65661', '65636', '65616', '65596', '65586', '65
+[... -> see log file for full message]
+/other/d101
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d102
+  Label       : Warning Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/other/d104
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d105
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d108
+  Label       : Active AF Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', 
+[... -> see log file for full message]
+/other/d109
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/other/d10b
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d10e
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d120
+  Label       : External Flash Attached
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d121
+  Label       : External Flash Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d122
+  Label       : External Flash Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d124
+  Label       : External Flash Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-18', '-17', '-16', '-15', '-14', '-13', '-12', '-11', '-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'
+[... -> see log file for full message]
+/other/d125
+  Label       : External Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d126
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-18.0, max=6.0, step=2.0
+/other/d130
+  Label       : HDR Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d149
+  Label       : Raw Bit Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d14e
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d14f
+  Label       : Fluorescent Type
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6']
+/other/d161
+  Label       : Autofocus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d163
+  Label       : AF Assist Lamp
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d164
+  Label       : Auto ISO P/A/DVP Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 24
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']
+/other/d167
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d16a
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d183
+  Label       : ISO Auto High Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 6
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d1a2
+  Label       : Live View Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1a3
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d1a4
+  Label       : Live View Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : -2147483648
+  Choices     : n/a
+/other/d1ac
+  Label       : LiveViewMovieMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d1b0
+  Label       : Exposure Display Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3']
+/other/d1b1
+  Label       : Exposure Indicate Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-60', '-59', '-58', '-57', '-56', '-55', '-54', '-53', '-52', '-51', '-50', '-49', '-48', '-47', '-46', '-45', '-44', '-43', '-42', '-41', '-40', '-39', '-38', '-37', '-36', '-35', '
+[... -> see log file for full message]
+/other/d1b2
+  Label       : Info Display Error Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1b3
+  Label       : Exposure Indicate Lightup
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1b4
+  Label       : ContinousShootingCount
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 13
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '
+[... -> see log file for full message]
+/other/d1b5
+  Label       : PTP Property 0xd1b5
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '32784', '32785', '32786', '32787', '32800']
+/other/d1c0
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1c1
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1f0
+  Label       : ApplicationMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1f1
+  Label       : ExposureRemaining
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3016.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d1f4
+  Label       : ISOAutoShutterCorrectionTime
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-2', '-1', '0', '1', '2']
+/other/d200
+  Label       : Active Pic Ctrl Item
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '201', '202', '203', '204', '205', '206', '207', '208', '209']
+/other/d201
+  Label       : Change Pic Ctrl Item
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Setting option settings/capturetarget="Memory card"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Getting option actions/viewfinder=0
+Setting option actions/viewfinder="1"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Gphoto2: gp_context_error: Liveview cannot start: Exposure Program Mode is not P/A/S/M
+Gphoto2: gp_camera_set_config [gphoto2-camera.c:1099]: 'camera->functions->set_config (camera, window, context)' failed: -1
+   -> unsupported setting actions/viewfinder=1 (nothing configured on DSLR)
+Take capture preview
+Gphoto2: gp_context_error: Liveview cannot start: Exposure Program Mode is not P/A/S/M
+Gphoto2: gp_camera_capture_preview [gphoto2-camera.c:1388]: 'camera->functions->capture_preview ( camera, file, context)' failed: -1
+
+================================================================================
+ABORT   : exception occures: [-1] Unspecified error
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
+lucas@buibuitesbooth:~ $ ls
+Bookshelf  Desktop  diagnostic.log  Documents  Downloads  gphoto2-updater.sh  Music  Pictures  Public  Templates  Videos
+lucas@buibuitesbooth:~ $ cat diagnostic.log 
+Pibooth version installed: 2.0.8
+Installed plugins: 
+GPhoto2 version installed: 2.5.30
+  - standard camlib set (ax203 canon digigr8 dimagev directory docupen jl2005a jl2005c kodak_dc240 lumix mars pentax ptp2 ricoh_g3 sierra sonix sq905 st2205 topfield tp6801)
+  - gcc (C compiler used)
+  - no ltdl (for portable loading of camlibs)
+  - EXIF (for special handling of EXIF files)
+Listing all connected DSLR camera
+00 : addr-> usb:001,003  name-> Nikon DSC D5300
+
+================================================================================
+Stating diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/autofocusdrive
+  Label       : Drive Nikon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Nikon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-32767.0, max=32767.0, step=1.0
+/actions/changeafarea
+  Label       : Set Nikon Autofocus area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x0
+  Choices     : n/a
+/actions/controlmode
+  Label       : Set Nikon Control Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Nikon Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/movie
+  Label       : Movie Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1712515165
+  Choices     : n/a
+/settings/imagecomment
+  Label       : Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/settings/imagecommentenable
+  Label       : Enable Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/settings/recordingmedia
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Card
+  Choices     : ['Card', 'SDRAM', 'Unknown value 0002']
+/settings/cleansensor
+  Label       : Clean Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Startup and Shutdown
+  Choices     : ['Off', 'Startup', 'Shutdown', 'Startup and Shutdown']
+/settings/thumbsize
+  Label       : Thumb Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 
+  Choices     : ['normal', 'large']
+/settings/fastfs
+  Label       : Fast Filesystem
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 1
+  Choices     : [0, 1]
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/autofocus
+  Label       : Autofocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00000000000000000000000004737581
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Nikon Corporation
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : D5300
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : V1.01
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : microsoft.com: 1.0
+  Choices     : n/a
+/status/acpower
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/externalflash
+  Label       : External Flash
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 100%
+  Choices     : n/a
+/status/continousshootingcount
+  Label       : Continuous Shooting Count
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 13.0
+  Choices     : min=0.0, max=62.0, step=1.0
+/status/orientation
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0'
+  Choices     : ["0'", "270'", "90'", "180'"]
+/status/flashopen
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/flashcharged
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/availableshots
+  Label       : Available Shots
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3016.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/status/minfocallength
+  Label       : Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 18 mm
+  Choices     : n/a
+/status/maxfocallength
+  Label       : Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 55 mm
+  Choices     : n/a
+/status/apertureatminfocallength
+  Label       : Maximum Aperture at Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 4
+  Choices     : n/a
+/status/apertureatmaxfocallength
+  Label       : Maximum Aperture at Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6
+  Choices     : n/a
+/status/lowlight
+  Label       : Low Light
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3.0
+  Choices     : min=0.0, max=3.0, step=1.0
+/status/lightmeter
+  Label       : Light Meter
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-60.0, max=60.0, step=1.0
+/status/aflocked
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/aelocked
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/movieprohibit
+  Label       : Movie Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Movie prohibit conditions: Not in application mode
+  Choices     : n/a
+/status/liveviewprohibit
+  Label       : Liveview Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Live View prohibit conditions: Exposure Program Mode is not P/A/S/M
+  Choices     : n/a
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 6000x4000
+  Choices     : ['6000x4000', '4496x3000', '2992x2000']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 100
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000', '25600']
+/imgsettings/isoauto
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/imgsettings/autoiso
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'Daylight', 'Fluorescent', 'Tungsten', 'Flash', 'Cloudy', 'Shade', 'Preset']
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/minimumshutterspeed
+  Label       : Minimum Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0018
+  Choices     : ['1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50', '1/40', '1/30', '1/15', '1/8', '1/4', '1/2', '1', 'Unknown value 0018']
+/capturesettings/isoautohilimit
+  Label       : ISO Auto Hi Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0006
+  Choices     : ['400', '800', '1600', '3200', 'Hi 1', 'Hi 2', 'Unknown value 0006', 'Unknown value 0007']
+/capturesettings/dlighting
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Extra high', 'High', 'Normal', 'Low', 'Off', 'Auto']
+/capturesettings/highisonr
+  Label       : High ISO Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Normal
+  Choices     : ['Off', 'Low', 'Normal', 'High']
+/capturesettings/moviequality
+  Label       : Movie Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 320x216
+  Choices     : ['320x216', '640x424', '1280x720', 'Unknown value 0003', 'Unknown value 0004', 'Unknown value 0005']
+/capturesettings/liveviewsize
+  Label       : Live View Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : VGA
+  Choices     : ['QVGA', 'VGA']
+/capturesettings/longexpnr
+  Label       : Long Exp Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/assistlight
+  Label       : Assist Light
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-5', '-4.666', '-4.333', '-4', '-3.666', '-3.333', '-3', '-2.666', '-2.333', '-2', '-1.666', '-1.333', '-1', '-0.666', '-0.333', '0', '0.333', '0.666', '1', '1.333', '1.666', '2', '2.333', '2.666', '3', '3.333', '3.666', '4', '4.333', '4.666', '5']
+/capturesettings/flashmode
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Flash off
+  Choices     : ['Flash off']
+/capturesettings/nikonflashmode
+  Label       : Nikon Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : iTTL
+  Choices     : ['iTTL', 'Manual']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : f/3.5
+  Choices     : ['f/3.5', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.3', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16', 'f/18', 'f/20', 'f/22']
+/capturesettings/flexibleprogram
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/capturesettings/imagequality
+  Label       : Image Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : JPEG Normal
+  Choices     : ['JPEG Basic', 'JPEG Normal', 'JPEG Fine', 'NEF (Raw)', 'NEF+Basic', 'NEF+Normal', 'NEF+Fine']
+/capturesettings/focallength
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 18.0
+  Choices     : min=18.0, max=55.0, step=0.009999999776482582
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['Manual', 'AF-S', 'AF-C', 'AF-A', 'Unknown value 8013']
+/capturesettings/focusmode2
+  Label       : Focus Mode 2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['AF-S', 'AF-C', 'AF-A', 'MF (fixed)', 'MF (selection)']
+/capturesettings/effectmode
+  Label       : Effect Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Selective color
+  Choices     : ['Night Vision', 'Color sketch', 'Miniature effect', 'Selective color', 'Silhouette', 'High key', 'Low key', 'Unknown value 0007', 'Unknown value 0008']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Night Landscape
+  Choices     : ['M', 'P', 'A', 'S', 'Auto', 'Portrait', 'Landscape', 'Macro', 'Sports', 'Night Landscape', 'Children', 'Automatic (No Flash)', 'Unknown value 8019']
+/capturesettings/scenemode
+  Label       : Scene Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Night Portrait
+  Choices     : ['Night landscape', 'Party/Indoor', 'Beach/Snow', 'Sunset', 'Dusk/Dawn', 'Pet Portrait', 'Candlelight', 'Blossom', 'Autumn colors', 'Food', 'Unknown value 000a', 'Unknown value 000b', 'Unknown value 000c', 'Portrait', 'Landscape', 'Child', 'Sports', 'Close up', 'Night Portrait']
+/capturesettings/hdrmode
+  Label       : HDR Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single Shot
+  Choices     : ['Single Shot', 'Burst', 'Continuous Low Speed', 'Timer', 'Quick Response Remote', 'Delayed Remote', 'Quiet Release']
+/capturesettings/focusmetermode
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Closest Subject
+  Choices     : ['Multi-spot', 'Single Area', 'Closest Subject', 'Group Dynamic', 'Unknown value 8013', 'Unknown value 8014']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Multi Spot
+  Choices     : ['Center Weighted', 'Multi Spot', 'Center Spot']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.5000s
+  Choices     : ['0.0002s', '0.0003s', '0.0004s', '0.0005s', '0.0006s', '0.0008s', '0.0010s', '0.0012s', '0.0015s', '0.0020s', '0.0025s', '0.0031s', '0.0040s', '0.0050s', '0.0062s', '0.0080s', '0.0100s', '0.0125s', '0.0166s', '0.0200s', '0.0250s', '0.0333s', '0.0400s', '0.0500s', '0.0666s', '0.0769s', '0.1000s', '0.1250s', '0.1666s', '0.2000s', '0.2500s', '0.3333s', '0.4000s', '0.5000s', '0.6250s', '0.7692s', '1.0000s', '1.3000s', '1.6000s', '2.0000s', '2.5000s', '3.0000s', '4.0000s', '5.0000s', '6.0000s', '8.0000s', '10.0000s', '13.0000s', '15.0000s', '20.0000s', '25.0000s', '30.0000s']
+/capturesettings/shutterspeed2
+  Label       : Shutter Speed 2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/2
+  Choices     : ['1/4000', '1/3200', '1/2500', '1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50', '1/40', '1/30', '1/25', '1/20', '1/15', '1/13', '1/10', '1/8', '1/6', '1/5', '1/4', '1/3', '10/25', '1/2', '10/16', '10/13', '1', '13/10', '16/10', '2', '25/10', '3', '4', '5', '6', '8', '10', '13', '15', '20', '25', '30']
+/capturesettings/exposuredelaymode
+  Label       : Exposure Delay Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/liveviewafmode
+  Label       : Live View AF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Face-priority AF
+  Choices     : ['Face-priority AF', 'Wide-area AF', 'Normal-area AF', 'Subject-tracking AF']
+/capturesettings/liveviewaffocus
+  Label       : Live View AF Focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single-servo AF
+  Choices     : ['Single-servo AF', 'Full-time-servo AF', 'Manual Focus (fixed)', 'Manual Focus (selection)']
+/capturesettings/liveviewimagezoomratio
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Entire Display
+  Choices     : ['Entire Display', 'Unknown value 0001', '25%', 'Unknown value 0003', '50%', 'Unknown value 0005']
+/capturesettings/filenrsequencing
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/imagerotationflag
+  Label       : Image Rotation Flag
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/nocfcardrelease
+  Label       : Release without CF card
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/autofocusarea
+  Label       : Auto Focus Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Centre
+  Choices     : ['Top', 'Bottom', 'Left', 'Right', 'Unknown value 0005', 'Unknown value 0006', 'Unknown value 0007', 'Unknown value 0008', 'Unknown value 0009', 'Unknown value 000a', 'Unknown value 000b', 'Unknown value 000c', 'Unknown value 000d', 'Unknown value 000e', 'Unknown value 000f', 'Unknown value 0010', 'Unknown value 0011', 'Unknown value 0012', 'Unknown value 0013', 'Unknown value 0014', 'Unknown value 0015', 'Unknown value 0016', 'Unknown value 0017', 'Unknown value 0018', 'Unknown value 0019', 'Unknown value 001a', 'Unknown value 001b', 'Unknown value 001c', 'Unknown value 001d', 'Unknown value 001e', 'Unknown value 001f', 'Unknown value 0020', 'Unknown value 0021', 'Unknown value 0022', 'Unknown value 0023', 'Unknown value 0024', 'Unknown value 0025', 'Unknown value 0026', 'Unknown value 0027', 'Centre']
+/capturesettings/flashexposurecompensation
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-3.0, max=1.0, step=0.3333333432674408
+/capturesettings/bracketing
+  Label       : Bracketing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/evstep
+  Label       : EV Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3
+  Choices     : ['1/3', '1/2']
+/capturesettings/bracketset
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AE only
+  Choices     : ['AE & Flash', 'AE only', 'Flash only', 'WB bracketing', 'ADL bracketing']
+/capturesettings/aebracketingstep
+  Label       : AE Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3 EV
+  Choices     : ['1/3 EV', '1/2 EV', '2/3 EV', '1 EV', '2 EV', '3 EV', 'Unknown value 0006', 'Unknown value 0007']
+/capturesettings/wbbracketingstep
+  Label       : WB Bracketing Step
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1 EV
+  Choices     : ['1 EV', '2 EV', '3 EV']
+/capturesettings/aebracketingpattern
+  Label       : AE Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 images (normal and 2 unders)
+  Choices     : ['3 images (normal and 2 unders)']
+/capturesettings/wbbracketingpattern
+  Label       : WB Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 images (normal and 2 unders)
+  Choices     : ['3 images (normal and 2 unders)']
+/capturesettings/aebracketingcount
+  Label       : AE Bracketing Count
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=3.0, step=1.0
+/capturesettings/adlbracketingpattern
+  Label       : ADL Bracketing Pattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 2 shots (Off -> User setting)
+  Choices     : ['2 shots (Off -> User setting)']
+/capturesettings/burstnumber
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=100.0, step=1.0
+/capturesettings/autowhitebias
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/tungstenwhitebias
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flourescentwhitebias
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/daylightwhitebias
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flashwhitebias
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/cloudywhitebias
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/shadewhitebias
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/whitebiaspresetno
+  Label       : White Balance Bias Preset Nr
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['0']
+/capturesettings/whitebiaspreset0
+  Label       : White Balance Bias Preset 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/capturesettings/whitebiaspreset1
+  Label       : White Balance Bias Preset 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/capturesettings/applicationmode
+  Label       : Application Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Application Mode 0
+  Choices     : ['Application Mode 0', 'Application Mode 1']
+/capturesettings/manualmoviesetting
+  Label       : Manual Movie Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/microphone
+  Label       : Microphone
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto sensitivity
+  Choices     : ['Auto sensitivity', 'High sensitivity', 'Medium sensitivity', 'Low sensitivity', 'Microphone off', 'Unknown value 0005']
+/capturesettings/autodistortioncontrol
+  Label       : Auto Distortion Control
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/videomode
+  Label       : Video Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : PAL
+  Choices     : ['NTSC', 'PAL']
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/5003
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 6000x4000
+  Choices     : ['6000x4000', '4496x3000', '2992x2000']
+/other/5004
+  Label       : Compression Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '4', '5', '6', '7']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4', '5', '6', '7', '32784', '32785', '32787']
+/other/5007
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 350
+  Choices     : ['350', '400', '450', '500', '560', '630', '710', '800', '900', '1000', '1100', '1300', '1400', '1600', '1800', '2000', '2200']
+/other/5008
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1800.0
+  Choices     : min=1800.0, max=5500.0, step=1.0
+/other/500a
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32786
+  Choices     : ['1', '32784', '32785', '32786', '32787']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['2', '3', '4']
+/other/500c
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/500d
+  Label       : Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5000
+  Choices     : ['2', '3', '4', '5', '6', '8', '10', '12', '15', '20', '25', '31', '40', '50', '62', '80', '100', '125', '166', '200', '250', '333', '400', '500', '666', '769', '1000', '1250', '1666', '2000', '2500', '3333', '4000', '5000', '6250', '7692', '10000', '13000', '16000', '20000', '25000', '30000', '40000', '50000', '60000', '80000', '100000', '130000', '150000', '200000', '250000', '300000']
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32790
+  Choices     : ['1', '2', '3', '4', '32784', '32785', '32786', '32787', '32788', '32790', '32791', '32792', '32793']
+/other/500f
+  Label       : Exposure Index (film speed ISO)
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000', '25600']
+/other/5010
+  Label       : Exposure Bias Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-5000', '-4666', '-4333', '-4000', '-3666', '-3333', '-3000', '-2666', '-2333', '-2000', '-1666', '-1333', '-1000', '-666', '-333', '0', '333', '666', '1000', '1333', '1666', '2000', '2333', '2666', '3000', '3333', '3666', '4000', '4333', '4666', '5000']
+/other/5011
+  Label       : Date & Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 20240407T203925
+  Choices     : n/a
+/other/5013
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '32784', '32785', '32788', '32789', '32790']
+/other/5018
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/501c
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32785
+  Choices     : ['2', '32784', '32785', '32786', '32787', '32788']
+/other/d303
+  Label       : UseDeviceStageFlag
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Windows/6.0.5330.0 MTPClassDriver/6.0.5330.0
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d015
+  Label       : Reset Bank 0
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d017
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d018
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d019
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01a
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01b
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01c
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01d
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01f
+  Label       : White Balance Preset Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d025
+  Label       : White Balance Preset Value 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/other/d026
+  Label       : White Balance Preset Value 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 34472293
+  Choices     : n/a
+/other/d032
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d036
+  Label       : Video Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d037
+  Label       : Effect Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8']
+/other/d045
+  Label       : Reset Menu Bank
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d048
+  Label       : PTP_DPC_NIKON_A1AFCModePriority
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d054
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d056
+  Label       : Exposure Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d05d
+  Label       : Live View AF Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d061
+  Label       : Live View AF Focus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '2', '3', '4']
+/other/d066
+  Label       : Auto Off Timers
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3']
+/other/d06a
+  Label       : Exposure delay mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d06b
+  Label       : Long Exposure Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d06c
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d070
+  Label       : High ISO noise reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3']
+/other/d078
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d08a
+  Label       : No CF Card Release
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d08d
+  Label       : AF Area Point
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d08f
+  Label       : Clean Image Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3']
+/other/d090
+  Label       : Image Comment String
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d091
+  Label       : Image Comment Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d092
+  Label       : Image Rotation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d09c
+  Label       : RetractableLensWarning
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a0
+  Label       : Movie Screen Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0a2
+  Label       : Movie Microphone
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0a4
+  Label       : MovRecProhibitCondition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 16384
+  Choices     : n/a
+/other/d0a6
+  Label       : Manual Movie Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a7
+  Label       : Movie Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a8
+  Label       : MovRecordMicrophoneLevelValue
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 15
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']
+/other/d0aa
+  Label       : MovWindNoiseReduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0b5
+  Label       : ISOControlSensitivity
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6400
+  Choices     : n/a
+/other/d0c0
+  Label       : Bracketing Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0c1
+  Label       : Exposure Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d0c2
+  Label       : Exposure Bracketing Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/d0c3
+  Label       : Auto Exposure Bracket Count
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d0c4
+  Label       : White Balance Bracket Step
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d0c5
+  Label       : White Balance Bracket Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/d0c6
+  Label       : ADLBracketingPattern
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0']
+/other/d0e0
+  Label       : Lens ID
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 928
+  Choices     : n/a
+/other/d0e1
+  Label       : Lens Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d0e2
+  Label       : Lens Type
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 383
+  Choices     : n/a
+/other/d0e3
+  Label       : Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1800
+  Choices     : n/a
+/other/d0e4
+  Label       : Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5500
+  Choices     : n/a
+/other/d0e5
+  Label       : Max. Aperture at Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 350
+  Choices     : n/a
+/other/d0e6
+  Label       : Max. Aperture at Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 560
+  Choices     : n/a
+/other/d0f8
+  Label       : Auto Distortion Control
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0f9
+  Label       : Scene Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 18
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d100
+  Label       : Nikon Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 65538
+  Choices     : ['69536', '68736', '68036', '67536', '67136', '66786', '66536', '66336', '66176', '66036', '65936', '65856', '65786', '65736', '65696', '65661', '65636', '65616', '65596', '65586', '65576', '65566', '65561', '65556', '65551', '65549', '65546', '65544', '65542', '65541', '65540', '65539', '655385', '65538', '655376', '655373', '65537', '851978', '1048586', '131073', '1638410', '196609', '262145', '327681', '393217', '524289', '655361', '851969', '983041', '1310721', '1638401', '1966081']
+/other/d101
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d102
+  Label       : Warning Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/other/d104
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d105
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d108
+  Label       : Active AF Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39']
+/other/d109
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/other/d10b
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d10e
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d120
+  Label       : External Flash Attached
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d121
+  Label       : External Flash Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d122
+  Label       : External Flash Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d124
+  Label       : External Flash Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-18', '-17', '-16', '-15', '-14', '-13', '-12', '-11', '-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d125
+  Label       : External Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d126
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-18.0, max=6.0, step=2.0
+/other/d130
+  Label       : HDR Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d149
+  Label       : Raw Bit Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d14e
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d14f
+  Label       : Fluorescent Type
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6']
+/other/d161
+  Label       : Autofocus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d163
+  Label       : AF Assist Lamp
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d164
+  Label       : Auto ISO P/A/DVP Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 24
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24']
+/other/d167
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d16a
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d183
+  Label       : ISO Auto High Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 6
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d1a2
+  Label       : Live View Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1a3
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d1a4
+  Label       : Live View Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : -2147483648
+  Choices     : n/a
+/other/d1ac
+  Label       : LiveViewMovieMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d1b0
+  Label       : Exposure Display Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3']
+/other/d1b1
+  Label       : Exposure Indicate Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-60', '-59', '-58', '-57', '-56', '-55', '-54', '-53', '-52', '-51', '-50', '-49', '-48', '-47', '-46', '-45', '-44', '-43', '-42', '-41', '-40', '-39', '-38', '-37', '-36', '-35', '-34', '-33', '-32', '-31', '-30', '-29', '-28', '-27', '-26', '-25', '-24', '-23', '-22', '-21', '-20', '-19', '-18', '-17', '-16', '-15', '-14', '-13', '-12', '-11', '-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60']
+/other/d1b2
+  Label       : Info Display Error Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1b3
+  Label       : Exposure Indicate Lightup
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1b4
+  Label       : ContinousShootingCount
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 13
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62']
+/other/d1b5
+  Label       : PTP Property 0xd1b5
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '32784', '32785', '32786', '32787', '32800']
+/other/d1c0
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1c1
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1f0
+  Label       : ApplicationMode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1f1
+  Label       : ExposureRemaining
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 3016.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d1f4
+  Label       : ISOAutoShutterCorrectionTime
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-2', '-1', '0', '1', '2']
+/other/d200
+  Label       : Active Pic Ctrl Item
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '201', '202', '203', '204', '205', '206', '207', '208', '209']
+/other/d201
+  Label       : Change Pic Ctrl Item
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Setting option settings/capturetarget="Memory card"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Getting option actions/viewfinder=0
+Setting option actions/viewfinder="1"
+Gphoto2: _get_config [config.c:11188]: Type of property 'Lens Name' expected: 0x0002 got: 0x0004
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Lens Name' failed, trying to see if we have another...
+Gphoto2: _get_config [config.c:11188]: Type of property 'Available Shots' expected: 0x0006 got: 0x0004
+Gphoto2: _get_config [config.c:11188]: Type of property 'Live View AF Mode' expected: 0x0001 got: 0x0002
+Gphoto2: _get_config [config.c:11204]: Widget get of property 'Live View AF Mode' failed, trying to see if we have another...
+Gphoto2: gp_context_error: Liveview cannot start: Exposure Program Mode is not P/A/S/M
+Gphoto2: gp_camera_set_config [gphoto2-camera.c:1099]: 'camera->functions->set_config (camera, window, context)' failed: -1
+   -> unsupported setting actions/viewfinder=1 (nothing configured on DSLR)
+Take capture preview
+Gphoto2: gp_context_error: Liveview cannot start: Exposure Program Mode is not P/A/S/M
+Gphoto2: gp_camera_capture_preview [gphoto2-camera.c:1388]: 'camera->functions->capture_preview ( camera, file, context)' failed: -1
+
+================================================================================
+ABORT   : exception occures: [-1] Unspecified error
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
\ No newline at end of file
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Nikon DSC D90.txt ./tests/dslr_diag/Nikon DSC D90.txt
--- ../pibooth_local_copy/tests/dslr_diag/Nikon DSC D90.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Nikon DSC D90.txt	2025-05-16 14:02:41
@@ -0,0 +1,2102 @@
+Pibooth version installed: 2.0.2
+Installed plugins: extra-lights-1.0.1, qrcode-0.0.3, sound-effects-0.0.3, picture-template-1.0.0, plugin-0.3.0
+Listing all connected DSLR camera
+00 : addr-> usb:020,015  name-> Nikon DSC D90 (PTP mode)
+
+================================================================================
+Stating diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+/actions/autofocusdrive
+  Label       : Drive Nikon DSLR Autofocus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/manualfocusdrive
+  Label       : Drive Nikon DSLR Manual focus
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-32767.0, max=32767.0, step=1.0
+/actions/changeafarea
+  Label       : Set Nikon Autofocus area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x0
+  Choices     : n/a
+/actions/controlmode
+  Label       : Set Nikon Control Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/actions/viewfinder
+  Label       : Nikon Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 0
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/meterofftime
+  Label       : Meter Off Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 6 seconds
+  Choices     : ['4 seconds', '6 seconds', '8 seconds', '16 seconds', '30 seconds', '1 minute', '5 minutes', '10 minutes', '30 minutes']
+/settings/datetime
+  Label       : Camera Date and Time
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Date entering
+  Current     : 1621020914
+  Choices     : n/a
+/settings/imagecomment
+  Label       : Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/settings/imagecommentenable
+  Label       : Enable Image Comment
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/settings/recordingmedia
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Card
+  Choices     : ['Card', 'SDRAM']
+/settings/reversedial
+  Label       : Reverse Command Dial
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/settings/ccdnumber
+  Label       : CCD Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6609365             
+  Choices     : n/a
+/settings/menusandplayback
+  Label       : Menus and Playback
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['Off', 'On', 'On (image review excluded)']
+/settings/thumbsize
+  Label       : Thumb Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 
+  Choices     : ['normal', 'large']
+/settings/fastfs
+  Label       : Fast Filesystem
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 1
+  Choices     : [0, 1]
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Memory card
+  Choices     : ['Internal RAM', 'Memory card']
+/settings/autofocus
+  Label       : Autofocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6572280
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Nikon Corporation
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : D90
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : V1.00
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : microsoft.com: 1.0
+  Choices     : n/a
+/status/acpower
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/externalflash
+  Label       : External Flash
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 40%
+  Choices     : n/a
+/status/orientation
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0'
+  Choices     : ["0'", "270'", "90'", "180'"]
+/status/flashopen
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/flashcharged
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/lensname
+  Label       : Lens Name
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 00a0
+  Choices     : ['Unknown value 00a0']
+/status/minfocallength
+  Label       : Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 50 mm
+  Choices     : n/a
+/status/maxfocallength
+  Label       : Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 50 mm
+  Choices     : n/a
+/status/apertureatminfocallength
+  Label       : Maximum Aperture at Focal Length Minimum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/status/apertureatmaxfocallength
+  Label       : Maximum Aperture at Focal Length Maximum
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/status/lowlight
+  Label       : Low Light
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=8.0, step=1.0
+/status/lightmeter
+  Label       : Light Meter
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-60.0, max=60.0, step=1.0
+/status/aflocked
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/aelocked
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/status/fvlocked
+  Label       : FV Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 4288x2848
+  Choices     : ['4288x2848', '3216x2136', '2144x1424']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 500
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400']
+/imgsettings/isoauto
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/imgsettings/autoiso
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'Daylight', 'Fluorescent', 'Tungsten', 'Flash', 'Cloudy', 'Shade', 'Color Temperature', 'Preset']
+/imgsettings/colorspace
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : sRGB
+  Choices     : ['sRGB', 'AdobeRGB']
+/capturesettings/minimumshutterspeed
+  Label       : Minimum Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/30
+  Choices     : ['1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50', '1/40', '1/30', '1/15', '1/8', '1/4', '1/2', '1']
+/capturesettings/isoautohilimit
+  Label       : ISO Auto Hi Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3200
+  Choices     : ['400', '800', '1600', '3200', 'Hi 1']
+/capturesettings/dlighting
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Extra high', 'High', 'Normal', 'Low', 'Off', 'Auto']
+/capturesettings/imagequality
+  Label       : Image Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : JPEG Fine
+  Choices     : ['JPEG Basic', 'JPEG Normal', 'JPEG Fine', 'NEF (Raw)', 'NEF+Basic', 'NEF+Normal', 'NEF+Fine']
+/capturesettings/shootingspeed
+  Label       : Continuous Shooting Speed Slow
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 fps
+  Choices     : ['4 fps', '3 fps', '2 fps', '1 fps']
+/capturesettings/highisonr
+  Label       : High ISO Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Normal
+  Choices     : ['Off', 'Low', 'Normal', 'High']
+/capturesettings/moviequality
+  Label       : Movie Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 640x424
+  Choices     : ['320x216', '640x424', '1280x720']
+/capturesettings/flashshutterspeed
+  Label       : Flash Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/60s
+  Choices     : ['1/60s', '1/30s', '1/15s', '1/8s', '1/4s', '1/2s', '1s', '2s', '4s', '8s', '15s', '30s']
+/capturesettings/longexpnr
+  Label       : Long Exp Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/assistlight
+  Label       : Assist Light
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['-5', '-4.666', '-4.333', '-4', '-3.666', '-3.333', '-3', '-2.666', '-2.333', '-2', '-1.666', '-1.333', '-1', '-0.666', '-0.333', '0', '0.333', '0.666', '1', '1.333', '1.666', '2', '2.333', '2.666', '3', '3.333', '3.666', '4', '4.333', '4.666', '5']
+/capturesettings/exposurecompensation2
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/flashmode
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Flash off
+  Choices     : ['Flash off']
+/capturesettings/nikonflashmode
+  Label       : Nikon Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : iTTL
+  Choices     : ['iTTL', 'Manual', 'Commander', 'Repeating']
+/capturesettings/flashcommandchannel
+  Label       : Flash Command Channel
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1
+  Choices     : ['1', '2', '3', '4']
+/capturesettings/flashcommandselfmode
+  Label       : Flash Command Self Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : TTL
+  Choices     : ['TTL', 'Manual', 'Off']
+/capturesettings/flashcommandselfcompensation
+  Label       : Flash Command Self Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.0
+  Choices     : ['-3.0', '-2.7', '-2.3', '-2.0', '-1.7', '-1.3', '-1.0', '-0.7', '-0.3', '0.0', '0.3', '0.7', '1.0', '1.3', '1.7', '2.0', '2.3', '2.7', '3.0']
+/capturesettings/flashcommandselfvalue
+  Label       : Flash Command Self Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Full
+  Choices     : ['Full', '1/1.3', '1/1.7', '1/2', '1/2.5', '1/3.2', '1/4', '1/5', '1/6.4', '1/8', '1/10', '1/13', '1/16', '1/20', '1/25', '1/32', '1/40', '1/50', '1/64', '1/80', '1/100', '1/128']
+/capturesettings/flashcommandamode
+  Label       : Flash Command A Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : TTL
+  Choices     : ['TTL', 'Auto Aperture', 'Manual', 'Off']
+/capturesettings/flashcommandacompensation
+  Label       : Flash Command A Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.0
+  Choices     : ['-3.0', '-2.7', '-2.3', '-2.0', '-1.7', '-1.3', '-1.0', '-0.7', '-0.3', '0.0', '0.3', '0.7', '1.0', '1.3', '1.7', '2.0', '2.3', '2.7', '3.0']
+/capturesettings/flashcommandavalue
+  Label       : Flash Command A Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Full
+  Choices     : ['Full', '1/1.3', '1/1.7', '1/2', '1/2.5', '1/3.2', '1/4', '1/5', '1/6.4', '1/8', '1/10', '1/13', '1/16', '1/20', '1/25', '1/32', '1/40', '1/50', '1/64', '1/80', '1/100', '1/128']
+/capturesettings/flashcommandbmode
+  Label       : Flash Command B Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : TTL
+  Choices     : ['TTL', 'Auto Aperture', 'Manual', 'Off']
+/capturesettings/flashcommandbcompensation
+  Label       : Flash Command B Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.0
+  Choices     : ['-3.0', '-2.7', '-2.3', '-2.0', '-1.7', '-1.3', '-1.0', '-0.7', '-0.3', '0.0', '0.3', '0.7', '1.0', '1.3', '1.7', '2.0', '2.3', '2.7', '3.0']
+/capturesettings/flashcommandbvalue
+  Label       : Flash Command B Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Full
+  Choices     : ['Full', '1/1.3', '1/1.7', '1/2', '1/2.5', '1/3.2', '1/4', '1/5', '1/6.4', '1/8', '1/10', '1/13', '1/16', '1/20', '1/25', '1/32', '1/40', '1/50', '1/64', '1/80', '1/100', '1/128']
+/capturesettings/af-area-illumination
+  Label       : AF Area Illumination
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Auto
+  Choices     : ['Auto', 'Off', 'On']
+/capturesettings/afbeep
+  Label       : AF Beep Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : f/2
+  Choices     : ['f/1.4', 'f/1.6', 'f/1.8', 'f/2', 'f/2.2', 'f/2.5', 'f/2.8', 'f/3.2', 'f/3.5', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.3', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16']
+/capturesettings/flexibleprogram
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/capturesettings/focallength
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 50.0
+  Choices     : min=50.0, max=50.0, step=0.009999999776482582
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['Manual', 'AF-S', 'AF-C', 'AF-A']
+/capturesettings/focusmode2
+  Label       : Focus Mode 2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AF-A
+  Choices     : ['AF-S', 'AF-C', 'AF-A', 'MF (fixed)', 'MF (selection)']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Sports
+  Choices     : ['M', 'P', 'A', 'S', 'Auto', 'Portrait', 'Landscape', 'Macro', 'Sports', 'Night Portrait', 'Night Landscape']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Continuous Low Speed
+  Choices     : ['Single Shot', 'Burst', 'Continuous Low Speed', 'Timer', 'Quick Response Remote', 'Delayed Remote']
+/capturesettings/focusmetermode
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Multi-spot
+  Choices     : ['Multi-spot', 'Single Area', 'Closest Subject', 'Group Dynamic']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Multi Spot
+  Choices     : ['Center Weighted', 'Multi Spot', 'Center Spot']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0.0666s
+  Choices     : ['0.0002s', '0.0003s', '0.0004s', '0.0005s', '0.0006s', '0.0008s', '0.0010s', '0.0012s', '0.0015s', '0.0020s', '0.0025s', '0.0031s', '0.0040s', '0.0050s', '0.0062s', '0.0080s', '0.0100s', '0.0125s', '0.0166s', '0.0200s', '0.0250s', '0.0333s', '0.0400s', '0.0500s', '0.0666s', '0.0769s', '0.1000s', '0.1250s', '0.1666s', '0.2000s', '0.2500s', '0.3333s', '0.4000s', '0.5000s', '0.6250s', '0.7692s', '1.0000s', '1.3000s', '1.6000s', '2.0000s', '2.5000s', '3.0000s', '4.0000s', '5.0000s', '6.0000s', '8.0000s', '10.0000s', '13.0000s', '15.0000s', '20.0000s', '25.0000s', '30.0000s']
+/capturesettings/shutterspeed2
+  Label       : Shutter Speed 2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/15
+  Choices     : ['1/4000', '1/3200', '1/2500', '1/2000', '1/1600', '1/1250', '1/1000', '1/800', '1/640', '1/500', '1/400', '1/320', '1/250', '1/200', '1/160', '1/125', '1/100', '1/80', '1/60', '1/50', '1/40', '1/30', '1/25', '1/20', '1/15', '1/13', '1/10', '1/8', '1/6', '1/5', '1/4', '1/3', '10/25', '1/2', '10/16', '10/13', '1', '13/10', '16/10', '2', '25/10', '3', '4', '5', '6', '8', '10', '13', '15', '20', '25', '30']
+/capturesettings/focusareawrap
+  Label       : Focus Area Wrap
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/exposuredelaymode
+  Label       : Exposure Delay Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/exposurelock
+  Label       : Exposure Lock
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/aelaflmode
+  Label       : AE-L/AF-L Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AE/AF Lock
+  Choices     : ['AE/AF Lock', 'AE Lock only', 'AF Lock Only', 'AF Lock Hold', 'AF On', 'Flash Level Lock']
+/capturesettings/liveviewafmode
+  Label       : Live View AF Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Wide-area AF
+  Choices     : ['Face-priority AF', 'Wide-area AF', 'Normal-area AF']
+/capturesettings/liveviewimagezoomratio
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Entire Display
+  Choices     : ['Entire Display', 'Unknown value 0001', '25%', 'Unknown value 0003', '50%', 'Unknown value 0005']
+/capturesettings/filenrsequencing
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/flashsign
+  Label       : Flash Sign
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/modelflash
+  Label       : Modelling Flash
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/viewfindergrid
+  Label       : Viewfinder Grid
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/imagerotationflag
+  Label       : Image Rotation Flag
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/nocfcardrelease
+  Label       : Release without CF card
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/flashmodemanualpower
+  Label       : Flash Mode Manual Power
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Full
+  Choices     : ['Full', '1/2', '1/4', '1/8', '1/16', '1/32', 'Unknown value 0006', 'Unknown value 0007', 'Unknown value 0008', 'Unknown value 0009', 'Unknown value 0010', 'Unknown value 0011', 'Unknown value 0012', 'Unknown value 0013', 'Unknown value 0014', 'Unknown value 0015', 'Unknown value 0016', 'Unknown value 0017', 'Unknown value 0018', 'Unknown value 0019', 'Unknown value 0020', 'Unknown value 0021']
+/capturesettings/autofocusarea
+  Label       : Auto Focus Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Top
+  Choices     : ['Top', 'Bottom', 'Left', 'Right', 'Unknown value 0005', 'Unknown value 0006', 'Unknown value 0007', 'Unknown value 0008', 'Unknown value 0009', 'Unknown value 0010', 'Unknown value 0011']
+/capturesettings/flashexposurecompensation
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-3.0, max=1.0, step=0.3333333432674408
+/capturesettings/bracketing
+  Label       : Bracketing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/capturesettings/evstep
+  Label       : EV Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3
+  Choices     : ['1/3', '1/2', 'Unknown value 0002']
+/capturesettings/bracketset
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : AE & Flash
+  Choices     : ['AE & Flash', 'AE only', 'Flash only', 'WB bracketing', 'ADL bracketing']
+/capturesettings/bracketorder
+  Label       : Bracket Order
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : MTR > Under
+  Choices     : ['MTR > Under', 'Under > MTR']
+/capturesettings/aebracketingstep
+  Label       : AE Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/3 EV
+  Choices     : ['1/3 EV', '1/2 EV', '2/3 EV', '1 EV', '2 EV', '3 EV', 'Unknown value 0006', 'Unknown value 0007']
+/capturesettings/wbbracketingstep
+  Label       : WB Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1 EV
+  Choices     : ['1 EV', '2 EV', '3 EV']
+/capturesettings/aebracketingpattern
+  Label       : AE Bracketing Pattern
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 2 images (normal and under)
+  Choices     : ['2 images (normal and under)', '2 images (normal and over)', '3 images (normal and 2 unders)']
+/capturesettings/wbbracketingpattern
+  Label       : WB Bracketing Pattern
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 3 images (normal and 2 unders)
+  Choices     : ['2 images (normal and under)', '2 images (normal and over)', '3 images (normal and 2 unders)']
+/capturesettings/aebracketingcount
+  Label       : AE Bracketing Count
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=3.0, step=1.0
+/capturesettings/wbpresetcomment1
+  Label       : WB Preset Comment 1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/capturesettings/wbpresetcomment2
+  Label       : WB Preset Comment 2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/capturesettings/wbpresetcomment3
+  Label       : WB Preset Comment 3
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/capturesettings/wbpresetcomment4
+  Label       : WB Preset Comment 4
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/capturesettings/burstnumber
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1.0
+  Choices     : min=1.0, max=100.0, step=1.0
+/capturesettings/maximumshots
+  Label       : Maximum Shots
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 10.0
+  Choices     : min=0.0, max=99.0, step=1.0
+/capturesettings/autowhitebias
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/tungstenwhitebias
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flourescentwhitebias
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/daylightwhitebias
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/flashwhitebias
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/cloudywhitebias
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/shadewhitebias
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/capturesettings/whitebiaspresetno
+  Label       : White Balance Bias Preset Nr
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/capturesettings/whitebiaspreset0
+  Label       : White Balance Bias Preset 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/capturesettings/whitebiaspreset1
+  Label       : White Balance Bias Preset 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/capturesettings/whitebiaspreset2
+  Label       : White Balance Bias Preset 2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/capturesettings/whitebiaspreset3
+  Label       : White Balance Bias Preset 3
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/capturesettings/whitebiaspreset4
+  Label       : White Balance Bias Preset 4
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/capturesettings/selftimerdelay
+  Label       : Selftimer Delay
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 10 seconds
+  Choices     : ['2 seconds', '5 seconds', '10 seconds', '20 seconds']
+/capturesettings/centerweightsize
+  Label       : Center Weight Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 8 mm
+  Choices     : ['6 mm', '8 mm', '10 mm']
+/capturesettings/remotetimeout
+  Label       : Remote Timeout
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1 minute
+  Choices     : ['1 minute', '5 minutes', '10 minutes', '15 minutes']
+/capturesettings/moviesound
+  Label       : Movie Sound
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/capturesettings/reverseindicators
+  Label       : Reverse Indicators
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : On
+  Choices     : ['On', 'Off']
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 40
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/5003
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 4288x2848
+  Choices     : ['4288x2848', '3216x2136', '2144x1424']
+/other/5004
+  Label       : Compression Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '4', '5', '6', '7']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4', '5', '6', '7', '32784', '32785', '32786', '32787']
+/other/5007
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 200
+  Choices     : ['140', '160', '180', '200', '220', '250', '280', '320', '350', '400', '450', '500', '560', '630', '710', '800', '900', '1000', '1100', '1300', '1400', '1600']
+/other/5008
+  Label       : Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5000
+  Choices     : ['5000']
+/other/500a
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32786
+  Choices     : ['1', '32784', '32785', '32786']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['2', '3', '4']
+/other/500c
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2']
+/other/500d
+  Label       : Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 666
+  Choices     : ['2', '3', '4', '5', '6', '8', '10', '12', '15', '20', '25', '31', '40', '50', '62', '80', '100', '125', '166', '200', '250', '333', '400', '500', '666', '769', '1000', '1250', '1666', '2000', '2500', '3333', '4000', '5000', '6250', '7692', '10000', '13000', '16000', '20000', '25000', '30000', '40000', '50000', '60000', '80000', '100000', '130000', '150000', '200000', '250000', '300000']
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32788
+  Choices     : ['1', '2', '3', '4', '32784', '32785', '32786', '32787', '32788', '32789', '32790']
+/other/500f
+  Label       : Exposure Index (film speed ISO)
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 500
+  Choices     : ['100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400']
+/other/5010
+  Label       : Exposure Bias Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-5000', '-4666', '-4333', '-4000', '-3666', '-3333', '-3000', '-2666', '-2333', '-2000', '-1666', '-1333', '-1000', '-666', '-333', '0', '333', '666', '1000', '1333', '1666', '2000', '2333', '2666', '3000', '3333', '3666', '4000', '4333', '4666', '5000']
+/other/5011
+  Label       : Date & Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 20210514T213514
+  Choices     : n/a
+/other/5013
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32784
+  Choices     : ['1', '2', '32784', '32785', '32788', '32789']
+/other/5018
+  Label       : Burst Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/501c
+  Label       : Focus Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '32784', '32785', '32786']
+/other/d406
+  Label       : PTP Property 0xd406
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Windows/6.0.5330.0 MTPClassDriver/6.0.5330.0
+  Choices     : n/a
+/other/d407
+  Label       : PTP Property 0xd407
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d017
+  Label       : Auto White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d018
+  Label       : Tungsten White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d019
+  Label       : Fluorescent White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01a
+  Label       : Daylight White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01b
+  Label       : Flash White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01c
+  Label       : Cloudy White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01d
+  Label       : Shady White Balance Bias
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d01e
+  Label       : White Balance Colour Temperature
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 20
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']
+/other/d01f
+  Label       : White Balance Preset Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d020
+  Label       : White Balance Preset Name 0
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d021
+  Label       : White Balance Preset Name 1
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d022
+  Label       : White Balance Preset Name 2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d023
+  Label       : White Balance Preset Name 3
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d024
+  Label       : White Balance Preset Name 4
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d025
+  Label       : White Balance Preset Value 0
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/other/d026
+  Label       : White Balance Preset Value 1
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/other/d027
+  Label       : White Balance Preset Value 2
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/other/d028
+  Label       : White Balance Preset Value 3
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/other/d029
+  Label       : White Balance Preset Value 4
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 30212431
+  Choices     : n/a
+/other/d032
+  Label       : Color Space
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d045
+  Label       : Reset Menu Bank
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d04f
+  Label       : Focus Area Wrap
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d050
+  Label       : Vertical AF On
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 7
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
+/other/d052
+  Label       : Focus Area Zone
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d054
+  Label       : Auto ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d056
+  Label       : Exposure Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d058
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d059
+  Label       : Centre Weight Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2']
+/other/d05a
+  Label       : Exposure Base Matrix
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6']
+/other/d05b
+  Label       : Exposure Base Center
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6']
+/other/d05c
+  Label       : Exposure Base Spot
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6']
+/other/d05d
+  Label       : Live View AF Area
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2']
+/other/d05e
+  Label       : Exposure Lock
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d05f
+  Label       : Focus Lock
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d062
+  Label       : Auto Meter Off Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8']
+/other/d063
+  Label       : Self Timer Delay
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3']
+/other/d065
+  Label       : Img Conf Time
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d068
+  Label       : Shooting Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3']
+/other/d06a
+  Label       : Exposure delay mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d06b
+  Label       : Long Exposure Noise Reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d06c
+  Label       : File Number Sequencing
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d06f
+  Label       : LCD Illumination
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d070
+  Label       : High ISO noise reduction
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3']
+/other/d071
+  Label       : On screen tips
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d075
+  Label       : Flash Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
+/other/d077
+  Label       : Modeling Flash
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d078
+  Label       : Bracket Set
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d07a
+  Label       : Bracket Order
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d080
+  Label       : Center Button Shooting Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2']
+/other/d084
+  Label       : Assign Func. Button
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/other/d085
+  Label       : Customise Command Dials
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d086
+  Label       : Reverse Command Dial
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d088
+  Label       : Menus and Playback
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2']
+/other/d08a
+  Label       : No CF Card Release
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d090
+  Label       : Image Comment String
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     :                                     
+  Choices     : n/a
+/other/d091
+  Label       : Image Comment Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d092
+  Label       : Image Rotation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0a0
+  Label       : Movie Screen Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2']
+/other/d0a1
+  Label       : Movie Voice
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0c0
+  Label       : Bracketing Enable
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d0c1
+  Label       : Exposure Bracketing Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d0c2
+  Label       : Exposure Bracketing Program
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d0c3
+  Label       : Auto Exposure Bracket Count
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3']
+/other/d0c4
+  Label       : White Balance Bracket Step
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d0c5
+  Label       : White Balance Bracket Program
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2']
+/other/d0e0
+  Label       : Lens ID
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 160
+  Choices     : n/a
+/other/d0e1
+  Label       : Lens Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d0e2
+  Label       : Lens Type
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 3
+  Choices     : n/a
+/other/d0e3
+  Label       : Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5000
+  Choices     : n/a
+/other/d0e4
+  Label       : Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 5000
+  Choices     : n/a
+/other/d0e5
+  Label       : Max. Aperture at Min. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 140
+  Choices     : n/a
+/other/d0e6
+  Label       : Max. Aperture at Max. Focal Length
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 140
+  Choices     : n/a
+/other/d0f0
+  Label       : Finder ISO Display
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2']
+/other/d0f2
+  Label       : Auto Off Photo
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0f3
+  Label       : Auto Off Menu
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0f4
+  Label       : Auto Off Info
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d0f5
+  Label       : Self Timer Shot Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8']
+/other/d100
+  Label       : Nikon Exposure Time
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 65551
+  Choices     : ['69536', '68736', '68036', '67536', '67136', '66786', '66536', '66336', '66176', '66036', '65936', '65856', '65786', '65736', '65696', '65661', '65636', '65616', '65596', '65586', '65576', '65566', '65561', '65556', '65551', '65549', '65546', '65544', '65542', '65541', '65540', '65539', '655385', '65538', '655376', '655373', '65537', '851978', '1048586', '131073', '1638410', '196609', '262145', '327681', '393217', '524289', '655361', '851969', '983041', '1310721', '1638401', '1966081']
+/other/d101
+  Label       : AC Power
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d102
+  Label       : Warning Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0
+  Choices     : n/a
+/other/d103
+  Label       : Maximum Shots
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 10
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99']
+/other/d104
+  Label       : AF Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d105
+  Label       : AE Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d106
+  Label       : FV Locked
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d108
+  Label       : Active AF Sensor
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']
+/other/d109
+  Label       : Flexible Program
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-30.0, max=30.0, step=2.0
+/other/d10b
+  Label       : Recording Media
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d10c
+  Label       : USB Speed
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d10d
+  Label       : CCD Serial Number
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 6609365             
+  Choices     : n/a
+/other/d10e
+  Label       : Camera Orientation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d114
+  Label       : Illum Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d120
+  Label       : External Flash Attached
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d121
+  Label       : External Flash Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d122
+  Label       : External Flash Sort
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d124
+  Label       : External Flash Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-18', '-17', '-16', '-15', '-14', '-13', '-12', '-11', '-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d125
+  Label       : External Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7']
+/other/d126
+  Label       : Flash Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-18.0, max=6.0, step=2.0
+/other/d14e
+  Label       : Active D-Lighting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d14f
+  Label       : Flourescent Type
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5', '6']
+/other/d150
+  Label       : Tune Colour Temperature
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d151
+  Label       : Tune Preset 0
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d152
+  Label       : Tune Preset 1
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d153
+  Label       : Tune Preset 2
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d154
+  Label       : Tune Preset 3
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d155
+  Label       : Tune Preset 4
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 84.0
+  Choices     : min=0.0, max=168.0, step=1.0
+/other/d160
+  Label       : AF Beep Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d161
+  Label       : Autofocus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d163
+  Label       : AF Assist Lamp
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d164
+  Label       : Auto ISO P/A/DVP Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 18
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']
+/other/d166
+  Label       : AF Area Illumination
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d167
+  Label       : Flash Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d169
+  Label       : Flash Sign
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d16a
+  Label       : ISO Auto
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d16b
+  Label       : Remote Timeout
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d16c
+  Label       : Viewfinder Grid Display
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d16d
+  Label       : Flash Mode Manual Power
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']
+/other/d16f
+  Label       : Auto FP
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d181
+  Label       : Warning Display
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d182
+  Label       : Battery Cell Kind
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d183
+  Label       : ISO Auto High Limit
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d187
+  Label       : Info Disp Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d18d
+  Label       : Indicator Display
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1a2
+  Label       : Live View Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1a3
+  Label       : Live View Image Zoom Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d1a4
+  Label       : Live View Prohibit Condition
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1
+  Choices     : n/a
+/other/d1b0
+  Label       : Exposure Display Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8']
+/other/d1b1
+  Label       : Exposure Indicate Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-60', '-59', '-58', '-57', '-56', '-55', '-54', '-53', '-52', '-51', '-50', '-49', '-48', '-47', '-46', '-45', '-44', '-43', '-42', '-41', '-40', '-39', '-38', '-37', '-36', '-35', '-34', '-33', '-32', '-31', '-30', '-29', '-28', '-27', '-26', '-25', '-24', '-23', '-22', '-21', '-20', '-19', '-18', '-17', '-16', '-15', '-14', '-13', '-12', '-11', '-10', '-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60']
+/other/d1b2
+  Label       : Info Display Error Status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d1b3
+  Label       : Exposure Indicate Lightup
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d1c0
+  Label       : Flash Open
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1c1
+  Label       : Flash Charged
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d1d0
+  Label       : Flash MRepeat Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['0', '1', '2', '3', '4', '5']
+/other/d1d1
+  Label       : Flash MRepeat Count
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 8
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
+/other/d1d2
+  Label       : Flash MRepeat Interval
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 9
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']
+/other/d1d3
+  Label       : Flash Command Channel
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d1d4
+  Label       : Flash Command Self Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d1d5
+  Label       : Flash Command Self Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 9
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d1d6
+  Label       : Flash Command Self Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']
+/other/d1d7
+  Label       : Flash Command A Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d1d8
+  Label       : Flash Command A Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 9
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d1d9
+  Label       : Flash Command A Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']
+/other/d1da
+  Label       : Flash Command B Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3']
+/other/d1db
+  Label       : Flash Command B Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 9
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18']
+/other/d1dc
+  Label       : Flash Command B Value
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21']
+/other/d200
+  Label       : Active Pic Ctrl Item
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '4', '5', '6', '101', '102', '103', '104', '201', '202', '203', '204', '205', '206', '207', '208', '209']
+/other/d201
+  Label       : Change Pic Ctrl Item
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Setting option settings/capturetarget="Memory card"
+Getting option actions/viewfinder=0
+Setting option actions/viewfinder="1"
+Gphoto2: b'gp_context_error': b'Liveview cannot start: code 0x00000001'
+Gphoto2: b'gp_camera_set_config [gphoto2-camera.c:1115]': b"'camera->functions->set_config (camera, window, context)' failed: -1"
+   -> unsupported setting actions/viewfinder=1 (nothing configured on DSLR)
+Take capture preview
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x90c8 receiving resp failed: PTP Device Busy (0x2019)'
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x90c8 receiving resp failed: PTP Device Busy (0x2019)'
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x90c8 receiving resp failed: PTP Device Busy (0x2019)'
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x90c8 receiving resp failed: PTP Device Busy (0x2019)'
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x90c8 receiving resp failed: PTP Device Busy (0x2019)'
+Setting option actions/viewfinder="0"
+Take a capture
+Gphoto2: b'ptp_usb_getresp [usb.c:514]': b'PTP_OC 0x100e receiving resp failed: PTP General Error (0x2002)'
+Gphoto2: b'camera_capture [library.c:4992]': b"'ptp_initiatecapture(params, 0x00000000, 0x00000000)' failed: 'PTP General Error' (0x2002)"
+Gphoto2: b'gp_context_error': b'PTP General Error'
+Gphoto2: b'gp_camera_capture [gphoto2-camera.c:1340]': b"'camera->functions->capture (camera, type, path, context)' failed: -1"
+
+================================================================================
+ABORT   : exception occures: [-1] Unspecified error
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Panasonic DC-GH5.txt ./tests/dslr_diag/Panasonic DC-GH5.txt
--- ../pibooth_local_copy/tests/dslr_diag/Panasonic DC-GH5.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Panasonic DC-GH5.txt	2025-05-16 14:02:41
@@ -0,0 +1,171 @@
+Pibooth version installed: 2.0.8
+Installed plugins: 
+GPhoto2 version installed: 2.5.22
+  - all camlibs
+  - gcc (C compiler used)
+  - ltdl (for portable loading of camlibs)
+  - EXIF (for special handling of EXIF files)
+Listing all connected DSLR camera
+00 : addr-> usb:002,002  name-> Panasonic DC-GH5
+
+================================================================================
+Stating diagnostic of connected DSLR camera
+Gphoto2: ptp_usb_getresp [usb.c:514]: PTP_OC 0x1002 receiving resp failed: PTP Session Already Opened (0x201e)
+Gphoto2: camera_init [library.c:8314]: 'ptp_opensession (params, sessionid)' failed: PTP Session Already Opened (0x201e)
+* Preview compatible: True
+* Capture compatible: True
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+/actions/viewfinder
+  Label       : Panasonic Viewfinder
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 000000000000000000XHL1703190045
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Panasonic
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : DC-GH5
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2.7
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : None
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 50%
+  Choices     : n/a
+/other/5001
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 50
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+   -> unsupported setting imgsettings/iso=100 (nothing configured on DSLR)
+Setting option settings/capturetarget="Memory card"
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+   -> unsupported setting settings/capturetarget=Memory card (nothing configured on DSLR)
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Getting option actions/viewfinder=2
+Setting option actions/viewfinder="1"
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Take capture preview
+Setting option actions/viewfinder="0"
+Gphoto2: _get_Panasonic_ImageFormat [config.c:7331]: 'ptp_panasonic_getdevicepropertydesc(params, 0x20000A2, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_ISO [config.c:7073]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000020, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Exposure [config.c:7221]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_Exposure, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Whitebalance [config.c:7163]: 'ptp_panasonic_getdevicepropertydesc(params, PTP_DPC_PANASONIC_WhiteBalance, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_FNumber [config.c:7269]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000040, 2, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Gphoto2: _get_Panasonic_Shutter [config.c:6980]: 'ptp_panasonic_getdevicepropertydesc(params, 0x2000030, 4, &currentVal, &list, &listCount)' failed: '(null)' (0x0000)
+Gphoto2: gp_context_error: (null)
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Sony ILCE-6400.txt ./tests/dslr_diag/Sony ILCE-6400.txt
--- ../pibooth_local_copy/tests/dslr_diag/Sony ILCE-6400.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Sony ILCE-6400.txt	2025-05-16 14:02:41
@@ -0,0 +1,685 @@
+Pibooth version installed: 2.0.2
+Installed plugins: 
+Listing all connected DSLR camera
+00 : addr-> usb:001,030  name-> Sony ILCE-6400 (PC Control)
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Bulb Mode' expected: 0x0000 got: 0x0004"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Capture Target' expected: 0x0000 got: 0x0004"
+/actions/autofocus
+  Label       : Auto-Focus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/manualfocus
+  Label       : Manual-Focus
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=-7.0, max=7.0, step=1.0
+/actions/capture
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/movie
+  Label       : Movie Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : card+sdram
+  Choices     : ['sdram', 'card+sdram']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00000000000000003285031003469392
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Sony Corporation
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : ILCE-6400
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 2.0
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Sony PTP Extensions
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 43%
+  Choices     : n/a
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['Large', 'Medium', 'Small', 'Unknown value 0000']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['Auto ISO', '25', '50', '64', '80', '100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000', '25600', '32000', '40000', '51200', '64000', '80000', '102400', '128000', '160000', '204800', '256000', '320000', '409600', 'Auto ISO Multi Frame Noise Reduction', '25 Multi Frame Noise Reduction', '50 Multi Frame Noise Reduction', '64 Multi Frame Noise Reduction', '80 Multi Frame Noise Reduction', '100 Multi Frame Noise Reduction', '125 Multi Frame Noise Reduction', '160 Multi Frame Noise Reduction', '200 Multi Frame Noise Reduction', '250 Multi Frame Noise Reduction', '320 Multi Frame Noise Reduction', '400 Multi Frame Noise Reduction', '500 Multi Frame Noise Reduction', '640 Multi Frame Noise Reduction', '800 Multi Frame Noise Reduction', '1000 Multi Frame Noise Reduction', '1250 Multi Frame Noise Reduction', '1600 Multi Frame Noise Reduction', '2000 Multi Frame Noise Reduction', '2500 Multi Frame Noise Reduction', '3200 Multi Frame Noise Reduction', '4000 Multi Frame Noise Reduction', '5000 Multi Frame Noise Reduction', '6400 Multi Frame Noise Reduction', '8000 Multi Frame Noise Reduction', '10000 Multi Frame Noise Reduction', '12800 Multi Frame Noise Reduction', '16000 Multi Frame Noise Reduction', '25600 Multi Frame Noise Reduction', '51200 Multi Frame Noise Reduction', '36864 Multi Frame Noise Reduction', '8192 Multi Frame Noise Reduction', '16384 Multi Frame Noise Reduction', '65535 Multi Frame Noise Reduction', '100 Multi Frame Noise Reduction', '200 Multi Frame Noise Reduction', '400 Multi Frame Noise Reduction', '800 Multi Frame Noise Reduction', '1600 Multi Frame Noise Reduction', '3200 Multi Frame Noise Reduction', '6400 Multi Frame Noise Reduction', '12800 Multi Frame Noise Reduction', '25600 Multi Frame Noise Reduction', '51200 Multi Frame Noise Reduction', '36864 Multi Frame Noise Reduction', '8192 Multi Frame Noise Reduction', '16384 Multi Frame Noise Reduction']
+/imgsettings/colortemperature
+  Label       : Color Temperature
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=2500.0, max=9900.0, step=100.0
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['Automatic', 'Daylight', 'Shade', 'Cloudy', 'Tungsten', 'Fluorescent: Warm White', 'Fluorescent: Cold White', 'Fluorescent: Day White', 'Fluorescent: Daylight', 'Flash', 'Underwater: Auto', 'Choose Color Temperature', 'Preset 1', 'Preset 2', 'Preset 3', 'Unknown value 0000']
+/capturesettings/zoom
+  Label       : Zoom
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 34.497535705566406
+  Choices     : min=0.0, max=4294.96728515625, step=1.0
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : ['0', '5', '4.7', '4.5', '4.3', '4', '3.7', '3.5', '3.3', '3', '2.7', '2.5', '2.3', '2', '1.7', '1.5', '1.3', '1', '0.7', '0.5', '0.3', '-0.3', '-0.5', '-0.7', '-1', '-1.3', '-1.5', '-1.7', '-2', '-2.3', '-2.5', '-2.7', '-3', '-3.3', '-3.5', '-3.7', '-4', '-4.3', '-4.5', '-4.7', '-5']
+/capturesettings/flashmode
+  Label       : Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Fill flash
+  Choices     : ['Flash off', 'Automatic Flash', 'Red-eye automatic', 'Fill flash', 'Red-eye fill', 'Unknown value 8001', 'Rear Curtain Sync', 'Unknown value 8031', 'Slow Sync', 'Unknown value 8041', 'Unknown value 8042']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'NoneType'>
+  Widget type : Radio button
+  Current     : None
+  Choices     : ['f/1', 'f/1.1', 'f/1.2', 'f/1.4', 'f/1.6', 'f/1.8', 'f/2', 'f/2.2', 'f/2.5', 'f/2.8', 'f/3.2', 'f/3.5', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.3', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16', 'f/18', 'f/20', 'f/22', 'f/25', 'f/29', 'f/32', 'f/36', 'f/42', 'f/45', 'f/50', 'f/57', 'f/64']
+/capturesettings/imagequality
+  Label       : Image Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : RAW
+  Choices     : ['Standard', 'Fine', 'Extra Fine', 'RAW', 'RAW+JPEG (Fine)', 'RAW+JPEG (X.Fine)', 'RAW+JPEG (Std)']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Undefined
+  Choices     : ['Manual', 'Automatic', 'AF-C', 'AF-A', 'DMF', 'Undefined']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : P
+  Choices     : ['Intelligent Auto', 'Superior Auto', 'P', 'A', 'S', 'M', 'Movie', 'Unknown value 8051', 'Unknown value 8052', 'Unknown value 8053', 'Unknown value 8054', 'Unknown value ffff', 'Unknown value ffff', 'Unknown value ffff', 'Unknown value ffff', 'Unknown value 8080', 'Unknown value 8081', 'Unknown value 8082', 'Unknown value 8055', 'Unknown value 8056', 'Unknown value 8057', 'Unknown value 8058', 'Unknown value 8083', 'S&Q', 'Unknown value 8085', 'Unknown value 8086', 'Unknown value 8087', 'Unknown value 8059', 'Unknown value 805a', 'Unknown value 805b', 'Unknown value 805c', 'Sweep Panorama', 'Portrait', 'Sports Action', 'Macro', 'Landscape', 'Sunset', 'Night Scene', 'Hand-held Twilight', 'Night Portrait', 'Unknown value 8018']
+/capturesettings/aspectratio
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['3:2', '16:9', 'Unknown value 0004', 'Unknown value 0000']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['Single Shot', 'Burst', 'Continuous Med Speed', 'Continuous Low Speed', 'Continuous Hi+ Speed', 'Selftimer 2s', 'Selftimer 5s', 'Selftimer 10s', 'Selftimer 10s 3 Pictures', 'Selftimer 10s 5 Pictures', 'Selftimer 5s 3 Pictures', 'Selftimer 5s 5 Pictures', 'Selftimer 2s 3 Pictures', 'Selftimer 2s 5 Pictures', 'Bracketing C 0.3 Steps 3 Pictures', 'Bracketing C 0.3 Steps 5 Pictures', 'Bracketing C 0.3 Steps 9 Pictures', 'Bracketing C 0.5 Steps 3 Pictures', 'Bracketing C 0.5 Steps 5 Pictures', 'Bracketing C 0.5 Steps 9 Pictures', 'Bracketing C 0.7 Steps 3 Pictures', 'Bracketing C 0.7 Steps 5 Pictures', 'Bracketing C 0.7 Steps 9 Pictures', 'Bracketing C 1.0 Steps 3 Pictures', 'Bracketing C 1.0 Steps 5 Pictures', 'Bracketing C 1.0 Steps 9 Pictures', 'Bracketing C 2.0 Steps 3 Pictures', 'Bracketing C 2.0 Steps 5 Pictures', 'Bracketing C 3.0 Steps 3 Pictures', 'Bracketing C 3.0 Steps 5 Pictures', 'Bracketing S 0.3 Steps 3 Pictures', 'Bracketing S 0.3 Steps 5 Pictures', 'Bracketing S 0.3 Steps 9 Pictures', 'Bracketing S 0.5 Steps 3 Pictures', 'Bracketing S 0.5 Steps 5 Pictures', 'Bracketing S 0.5 Steps 9 Pictures', 'Bracketing S 0.7 Steps 3 Pictures', 'Bracketing S 0.7 Steps 5 Pictures', 'Bracketing S 0.7 Steps 9 Pictures', 'Bracketing S 1.0 Steps 3 Pictures', 'Bracketing S 1.0 Steps 5 Pictures', 'Bracketing S 1.0 Steps 9 Pictures', 'Bracketing S 2.0 Steps 3 Pictures', 'Bracketing S 2.0 Steps 5 Pictures', 'Bracketing S 3.0 Steps 3 Pictures', 'Bracketing S 3.0 Steps 5 Pictures', 'Bracketing WB Lo', 'Bracketing WB Hi', 'Bracketing DRO Lo', 'Bracketing DRO Hi', 'Unknown value 0000']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Unknown value 0000
+  Choices     : ['Center Spot', 'Multi', 'Center', 'Spot Standard', 'Spot Large', 'Entire Screen Avg.', 'Highlight', 'Unknown value 0000']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 65535/65535
+  Choices     : ['30', '25', '20', '15', '13', '10', '8', '6', '5', '4', '32/10', '25/10', '2', '16/10', '13/10', '1', '8/10', '6/10', '5/10', '4/10', '1/3', '1/4', '1/5', '1/6', '1/8', '1/10', '1/13', '1/15', '1/20', '1/25', '1/30', '1/40', '1/50', '1/60', '1/80', '1/100', '1/125', '1/160', '1/200', '1/250', '1/320', '1/400', '1/500', '1/640', '1/800', '1/1000', '1/1250', '1/1600', '1/2000', '1/2500', '1/3200', '1/4000', '1/5000', '1/6400', '1/8000', '1/10000', '1/12500', '1/16000', '1/20000', '1/25000', '1/32000', 'Bulb']
+/capturesettings/sensorcrop
+  Label       : Sensor Crop
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Off
+  Choices     : ['On', 'Off']
+/other/5004
+  Label       : Compression Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 16
+  Choices     : ['2', '3', '4', '16', '19', '20', '18']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['2', '4', '32785', '32784', '6', '32769', '32770', '32771', '32772', '7', '32816', '32786', '32800', '32801', '32802']
+/other/5007
+  Label       : F-Number
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/500a
+  Label       : Focus Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '32772', '32773', '32774']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['4', '32769', '32770', '32772', '32773', '32771', '32774']
+/other/500c
+  Label       : Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['2', '1', '4', '3', '5', '32769', '32771', '32817', '32818', '32833', '32834']
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['32768', '32769', '2', '3', '4', '1', '32848', '32849', '32850', '32851', '32852', '65535', '65535', '65535', '65535', '32896', '32897', '32898', '32853', '32854', '32855', '32856', '32899', '32900', '32901', '32902', '32903', '32857', '32858', '32859', '32860', '32833', '7', '32785', '32789', '32788', '32786', '32787', '32790', '32791', '32792']
+/other/5010
+  Label       : Exposure Bias Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '5000', '4700', '4500', '4300', '4000', '3700', '3500', '3300', '3000', '2700', '2500', '2300', '2000', '1700', '1500', '1300', '1000', '700', '500', '300', '-300', '-500', '-700', '-1000', '-1300', '-1500', '-1700', '-2000', '-2300', '-2500', '-2700', '-3000', '-3300', '-3500', '-3700', '-4000', '-4300', '-4500', '-4700', '-5000']
+/other/5013
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '32789', '32786', '32784', '32773', '32771', '32772', '32776', '32777', '32780', '32781', '32782', '32783', '33591', '34103', '35127', '33623', '34135', '35159', '33655', '34167', '35191', '33553', '34065', '35089', '33569', '34081', '33585', '34097', '33590', '34102', '35126', '33622', '34134', '35158', '33654', '34166', '35190', '33552', '34064', '35088', '33568', '34080', '33584', '34096', '32792', '32808', '32793', '32809']
+/other/d200
+  Label       : DOC Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '3000', '2700', '2500', '2300', '2000', '1700', '1500', '1300', '1000', '700', '500', '300', '-300', '-500', '-700', '-1000', '-1300', '-1500', '-1700', '-2000', '-2300', '-2500', '-2700', '-3000']
+/other/d201
+  Label       : DRangeOptimize
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '31', '17', '18', '19', '20', '21', '32', '33', '34', '35', '36', '37', '38']
+/other/d203
+  Label       : Image size
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '3']
+/other/d20d
+  Label       : Shutter speed
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 4294967296.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d20e
+  Label       : PTP Property 0xd20e
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 13
+  Choices     : ['1', '2', '3', '8', '9', '10', '4', '12', '5', '13', '6', '14', '7', '15', '16']
+/other/d20f
+  Label       : Color temperature
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=2500.0, max=9900.0, step=100.0
+/other/d211
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '4']
+/other/d213
+  Label       : Focus status
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '3', '5', '6', '7']
+/other/d21e
+  Label       : ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['16777215', '25', '50', '64', '80', '100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '16000', '20000', '25600', '32000', '40000', '51200', '64000', '80000', '102400', '128000', '160000', '204800', '256000', '320000', '409600', '33554431', '16777241', '16777266', '16777280', '16777296', '16777316', '16777341', '16777376', '16777416', '16777466', '16777536', '16777616', '16777716', '16777856', '16778016', '16778216', '16778466', '16778816', '16779216', '16779716', '16780416', '16781216', '16782216', '16783616', '16785216', '16787216', '16790016', '16793216', '16802816', '16828416', '16879616', '16982016', '17186816', '50331647', '33554532', '33554632', '33554832', '33555232', '33556032', '33557632', '33560832', '33567232', '33580032', '33605632', '33656832', '33759232', '33964032']
+/other/d21b
+  Label       : Picture Effect
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32768
+  Choices     : ['32768', '32769', '32770', '32771', '32772', '32773', '32784', '32800', '32801', '32816', '32832', '32848', '32849', '32850', '32851', '32864', '32880', '32881', '32882', '32896', '32897', '32898', '32912', '32928', '32929', '32930', '32931', '32932', '32933', '32934', '32944', '32960', '32961', '32962']
+/other/d21d
+  Label       : PTP Property 0xd21d
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d21f
+  Label       : PTP Property 0xd21f
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['2', '1']
+/other/d217
+  Label       : PTP Property 0xd217
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['2', '1']
+/other/d218
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 43
+  Choices     : ['-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/d219
+  Label       : Sensor Crop
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['2', '1']
+/other/d212
+  Label       : PTP Property 0xd212
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']
+/other/d210
+  Label       : CC Filter
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 192
+  Choices     : ['164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220']
+/other/d21c
+  Label       : AB Filter
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 192.0
+  Choices     : min=164.0, max=220.0, step=2.0
+/other/d222
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 17
+  Choices     : ['1', '17']
+/other/d22c
+  Label       : PTP Property 0xd22c
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['1', '2', '3', '257', '258', '259', '260']
+/other/d22d
+  Label       : PTP Property 0xd22d
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d22e
+  Label       : PTP Property 0xd22e
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 59
+  Choices     : []
+/other/d22f
+  Label       : PTP Property 0xd22f
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d230
+  Label       : PTP Property 0xd230
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 20971760
+  Choices     : []
+/other/d231
+  Label       : PTP Property 0xd231
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d232
+  Label       : PTP Property 0xd232
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d233
+  Label       : PTP Property 0xd233
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d235
+  Label       : PTP Property 0xd235
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d236
+  Label       : PTP Property 0xd236
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d24e
+  Label       : PTP Property 0xd24e
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['2', '1']
+/other/d24f
+  Label       : PTP Property 0xd24f
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['2', '1']
+/other/d250
+  Label       : PTP Property 0xd250
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d221
+  Label       : PTP Property 0xd221
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d214
+  Label       : Zoom
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 34497536.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d215
+  Label       : Objects in memory
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d2c1
+  Label       : Autofocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c2
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c3
+  Label       : PTP Property 0xd2c3
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c9
+  Label       : PTP Property 0xd2c9
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c8
+  Label       : Movie
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d9
+  Label       : PTP Property 0xd2d9
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c5
+  Label       : PTP Property 0xd2c5
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c7
+  Label       : Still Image
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2cb
+  Label       : PTP Property 0xd2cb
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2cc
+  Label       : PTP Property 0xd2cc
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2cd
+  Label       : PTP Property 0xd2cd
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2ce
+  Label       : PTP Property 0xd2ce
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2cf
+  Label       : PTP Property 0xd2cf
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d0
+  Label       : PTP Property 0xd2d0
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d2
+  Label       : PTP Property 0xd2d2
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d3
+  Label       : PTP Property 0xd2d3
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d4
+  Label       : PTP Property 0xd2d4
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d1
+  Label       : Near Far
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Bulb Mode' expected: 0x0000 got: 0x0004"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Capture Target' expected: 0x0000 got: 0x0004"
+Setting option settings/capturetarget="Memory card"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Bulb Mode' expected: 0x0000 got: 0x0004"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Capture Target' expected: 0x0000 got: 0x0004"
+   -> invalid value 'Memory card' for option capturetarget (possible choices: ['sdram', 'card+sdram'])
+Gphoto2: b'_set_config [config.c:10736]': b"Type of property 'Capture Target' expected: 0x0000 got: 0x0004"
+Gphoto2: b'_put_Genericu16Table [config.c:876]': b'failed to find value Memory card in list'
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Bulb Mode' expected: 0x0000 got: 0x0004"
+Gphoto2: b'_get_config [config.c:10350]': b"Type of property 'Capture Target' expected: 0x0000 got: 0x0004"
+Unknown option actions/viewfinder
+Take capture preview
+Gphoto2: b'gp_libusb1_read [libusb1.c:609]': b"'libusb_bulk_transfer (port->pl->dh, port->settings.usb.inep, (unsigned char*)bytes, size, &curread, port->timeout)' failed: Pipe error (-9)"
+Gphoto2: b'gp_port_read [gphoto2-port.c:441]': b'Reading 1024 = 0x400 bytes from port failed: Error reading from the port (-34)'
+Gphoto2: b'gp_libusb1_read [libusb1.c:609]': b"'libusb_bulk_transfer (port->pl->dh, port->settings.usb.inep, (unsigned char*)bytes, size, &curread, port->timeout)' failed: Operation timed out (-7)"
+Gphoto2: b'gp_port_read [gphoto2-port.c:441]': b'Reading 1024 = 0x400 bytes from port failed: Timeout reading from or writing to the port (-10)'
+Gphoto2: b'ptp_usb_getdata [usb.c:480]': b'PTP_OC 0x1008 receiving data failed: PTP Timeout (0x02fa)'
+Gphoto2: b'gp_libusb1_write [libusb1.c:595]': b"'libusb_bulk_transfer (port->pl->dh, port->settings.usb.outep, (unsigned char*)bytes, size, &curwritten, port->timeout)' failed: Pipe error (-9)"
+Gphoto2: b'gp_port_write [gphoto2-port.c:406]': b'Writing 16 = 0x10 bytes to port failed: Error writing to the port (-35)'
+Gphoto2: b'ptp_usb_sendreq [usb.c:109]': b'PTP_OC 0x1009 sending req failed: Error writing to the port (-35)'
+Take a capture
+Gphoto2: b'ptp_usb_event [usb.c:588]': b'Reading PTP event failed: Timeout reading from or writing to the port (-10)'
+Gphoto2: b'ptp_usb_event [usb.c:588]': b'Reading PTP event failed: Timeout reading from or writing to the port (-10)'
+Gphoto2: b'ptp_usb_event [usb.c:588]': b'Reading PTP event failed: Timeout reading from or writing to the port (-10)'
+Gphoto2: b'ptp_usb_event [usb.c:588]': b'Reading PTP event failed: Timeout reading from or writing to the port (-10)'
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/dslr_diag/Sony ZV-1.txt ./tests/dslr_diag/Sony ZV-1.txt
--- ../pibooth_local_copy/tests/dslr_diag/Sony ZV-1.txt	1969-12-31 19:00:00
+++ ./tests/dslr_diag/Sony ZV-1.txt	2025-05-16 14:02:41
@@ -0,0 +1,788 @@
+Pibooth version installed: 2.0.1
+Listing all connected DSLR camera
+00 : addr-> usb:001,006  name-> Sony ZV-1 (PC Control)
+
+================================================================================
+Starting diagnostic of connected DSLR camera
+* Preview compatible: True
+* Capture compatible: True
+/actions/autofocus
+  Label       : Auto-Focus
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/capture
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/bulb
+  Label       : Bulb Mode
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/movie
+  Label       : Movie Capture
+  Readonly    : no
+  Data type   : <class 'int'>
+  Widget type : Toggle button (or check box)
+  Current     : 2
+  Choices     : [0, 1]
+/actions/opcode
+  Label       : PTP Opcode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 0x1001,0xparam1,0xparam2
+  Choices     : n/a
+/settings/capturetarget
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : card+sdram
+  Choices     : ['sdram', 'card+sdram', 'card']
+/status/serialnumber
+  Label       : Serial Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 00000000000000008081901004890870
+  Choices     : n/a
+/status/manufacturer
+  Label       : Camera Manufacturer
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Sony Corporation
+  Choices     : n/a
+/status/cameramodel
+  Label       : Camera Model
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : ZV-1
+  Choices     : n/a
+/status/deviceversion
+  Label       : Device Version
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 1.00
+  Choices     : n/a
+/status/vendorextension
+  Label       : Vendor Extension
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : Sony PTP Extensions
+  Choices     : n/a
+/status/batterylevel
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 50%
+  Choices     : n/a
+/imgsettings/imagesize
+  Label       : Image Size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Small
+  Choices     : ['Large', 'Medium', 'Small']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 200
+  Choices     : ['Auto ISO', '80', '100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', 'Auto ISO Multi Frame Noise Reduction', '200 Multi Frame Noise Reduction', '400 Multi Frame Noise Reduction', '800 Multi Frame Noise Reduction', '1600 Multi Frame Noise Reduction', '3200 Multi Frame Noise Reduction', '6400 Multi Frame Noise Reduction', '12800 Multi Frame Noise Reduction', '25600 Multi Frame Noise Reduction']
+/imgsettings/iso
+  Label       : ISO Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 200
+  Choices     : []
+/imgsettings/colortemperature
+  Label       : Color Temperature
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 5500.0
+  Choices     : min=2500.0, max=9900.0, step=100.0
+/imgsettings/whitebalance
+  Label       : WhiteBalance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'Daylight', 'Shade', 'Cloudy', 'Tungsten', 'Fluorescent: Warm White', 'Fluorescent: Cold White', 'Fluorescent: Day White', 'Fluorescent: Daylight', 'Flash', 'Underwater: Auto', 'Choose Color Temperature', 'Preset 1', 'Preset 2', 'Preset 3']
+/capturesettings/zoom
+  Label       : Zoom
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 23.46291160583496
+  Choices     : min=0.0, max=4294.96728515625, step=1.0
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : []
+/capturesettings/exposurecompensation
+  Label       : Exposure Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 0
+  Choices     : []
+/capturesettings/flashmode
+  Label       : Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Fill flash
+  Choices     : ['Automatic Flash', 'Flash off', 'Fill flash', 'Red-eye automatic', 'Red-eye fill', 'External sync', 'Rear Curtain Sync', 'Wireless Sync', 'Slow Sync']
+/capturesettings/f-number
+  Label       : F-Number
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : f/1.8
+  Choices     : ['f/1', 'f/1.1', 'f/1.2', 'f/1.4', 'f/1.6', 'f/1.8', 'f/2', 'f/2.2', 'f/2.5', 'f/2.8', 'f/3.2', 'f/3.5', 'f/4', 'f/4.5', 'f/5', 'f/5.6', 'f/6.3', 'f/7.1', 'f/8', 'f/9', 'f/10', 'f/11', 'f/13', 'f/14', 'f/16', 'f/18', 'f/20', 'f/22', 'f/25', 'f/29', 'f/32', 'f/36', 'f/42', 'f/45', 'f/50', 'f/57', 'f/64']
+/capturesettings/imagequality
+  Label       : Image Quality
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Extra Fine
+  Choices     : ['RAW', 'RAW+JPEG (X.Fine)', 'RAW+JPEG (Fine)', 'RAW+JPEG (Std)', 'Extra Fine', 'Fine', 'Standard']
+/capturesettings/focusmode
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Automatic
+  Choices     : ['Automatic', 'AF-A', 'AF-C', 'DMF', 'Manual']
+/capturesettings/expprogram
+  Label       : Exposure Program
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : M
+  Choices     : ['P', 'A', 'S', 'M', 'Movie', 'Unknown value 8051', 'Unknown value 8052', 'Unknown value 8053', 'Unknown value 8054', 'Intelligent Auto', 'Unknown value 8080', 'Unknown value 8081', 'Unknown value 8082', 'Unknown value 8083', 'Sweep Panorama', 'Portrait', 'Sports Action', 'Macro', 'Landscape', 'Sunset', 'Night Scene', 'Hand-held Twilight', 'Night Portrait', 'Unknown value 8018', 'Unknown value 8019', 'Unknown value 801a', 'Unknown value 801b', 'Unknown value 801c']
+/capturesettings/aspectratio
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 16:9
+  Choices     : ['3:2', 'Unknown value 0003', '16:9', 'Unknown value 0004']
+/capturesettings/capturemode
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Single Shot
+  Choices     : ['Single Shot', 'Continuous Low Speed', 'Continuous Med Speed', 'Selftimer 10s', 'Selftimer 5s', 'Selftimer 2s', 'Selftimer 10s 3 Pictures', 'Selftimer 10s 5 Pictures', 'Selftimer 5s 3 Pictures', 'Selftimer 5s 5 Pictures', 'Selftimer 2s 3 Pictures', 'Selftimer 2s 5 Pictures', 'Bracketing C 0.3 Steps 3 Pictures', 'Bracketing C 0.3 Steps 5 Pictures', 'Bracketing C 0.3 Steps 9 Pictures', 'Bracketing C 0.7 Steps 3 Pictures', 'Bracketing C 0.7 Steps 5 Pictures', 'Bracketing C 0.7 Steps 9 Pictures', 'Bracketing C 1.0 Steps 3 Pictures', 'Bracketing C 1.0 Steps 5 Pictures', 'Bracketing C 1.0 Steps 9 Pictures', 'Bracketing C 2.0 Steps 3 Pictures', 'Bracketing C 2.0 Steps 5 Pictures', 'Bracketing C 3.0 Steps 3 Pictures', 'Bracketing C 3.0 Steps 5 Pictures', 'Bracketing S 0.3 Steps 3 Pictures', 'Bracketing S 0.3 Steps 5 Pictures', 'Bracketing S 0.3 Steps 9 Pictures', 'Bracketing S 0.7 Steps 3 Pictures', 'Bracketing S 0.7 Steps 5 Pictures', 'Bracketing S 0.7 Steps 9 Pictures', 'Bracketing S 1.0 Steps 3 Pictures', 'Bracketing S 1.0 Steps 5 Pictures', 'Bracketing S 1.0 Steps 9 Pictures', 'Bracketing S 2.0 Steps 3 Pictures', 'Bracketing S 2.0 Steps 5 Pictures', 'Bracketing S 3.0 Steps 3 Pictures', 'Bracketing S 3.0 Steps 5 Pictures', 'Bracketing WB Hi', 'Bracketing WB Lo', 'Bracketing DRO Hi', 'Bracketing DRO Lo']
+/capturesettings/exposuremetermode
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : Multi
+  Choices     : ['Multi', 'Center', 'Spot Standard', 'Spot Large', 'Entire Screen Avg.', 'Highlight']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/20
+  Choices     : ['0/0', '300/10', '250/10', '200/10', '150/10', '130/10', '100/10', '80/10', '60/10', '50/10', '40/10', '32/10', '25/10', '20/10', '16/10', '13/10', '10/10', '8/10', '6/10', '5/10', '4/10', '1/3', '1/4', '1/5', '1/6', '1/8', '1/10', '1/13', '1/15', '1/20', '1/25', '1/30', '1/40', '1/50', '1/60', '1/80', '1/100', '1/125', '1/160', '1/200', '1/250', '1/320', '1/400', '1/500', '1/640', '1/800', '1/1000', '1/1250', '1/1600', '1/2000', 'Bulb']
+/capturesettings/shutterspeed
+  Label       : Shutter Speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Radio button
+  Current     : 1/20
+  Choices     : ['0/0', '300/10', '250/10', '200/10', '150/10', '130/10', '100/10', '80/10', '60/10', '50/10', '40/10', '32/10', '25/10', '20/10', '16/10', '13/10', '10/10', '8/10', '6/10', '5/10', '4/10', '1/3', '1/4', '1/5', '1/6', '1/8', '1/10', '1/13', '1/15', '1/20', '1/25', '1/30', '1/40', '1/50', '1/60', '1/80', '1/100', '1/125', '1/160', '1/200', '1/250', '1/320', '1/400', '1/500', '1/640', '1/800', '1/1000', '1/1250', '1/1600', '1/2000', 'Bulb']
+/other/5004
+  Label       : Compression Setting
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 4
+  Choices     : ['16', '20', '19', '18', '4', '3', '2']
+/other/5005
+  Label       : White Balance
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4', '32785', '32784', '6', '32769', '32770', '32771', '32772', '7', '32816', '32786', '32800', '32801', '32802']
+/other/5007
+  Label       : F-Number
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 180.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/500a
+  Label       : Focus Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '32773', '32772', '32774', '1']
+/other/500b
+  Label       : Exposure Metering Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32769
+  Choices     : ['32769', '32770', '32772', '32773', '32771', '32774']
+/other/500c
+  Label       : Flash Mode
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : []
+/other/500e
+  Label       : Exposure Program Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['2', '3', '4', '1', '32848', '32849', '32850', '32851', '32852', '32768', '32896', '32897', '32898', '32899', '32833', '7', '32785', '32789', '32788', '32786', '32787', '32790', '32791', '32792', '32793', '32794', '32795', '32796']
+/other/5010
+  Label       : Exposure Bias Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/5013
+  Label       : Still Capture Mode
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '32786', '32789', '32772', '32771', '32773', '32776', '32777', '32780', '32781', '32782', '32783', '33591', '34103', '35127', '33655', '34167', '35191', '33553', '34065', '35089', '33569', '34081', '33585', '34097', '33590', '34102', '35126', '33654', '34166', '35190', '33552', '34064', '35088', '33568', '34080', '33584', '34096', '32808', '32792', '32809', '32793']
+/other/d200
+  Label       : DOC Compensation
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d201
+  Label       : DRangeOptimize
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 31
+  Choices     : ['1', '31', '17', '18', '19', '20', '21', '32', '33', '34', '35', '36', '37', '38']
+/other/d203
+  Label       : Image size
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['1', '2', '3']
+/other/d20d
+  Label       : Shutter speed
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 65556.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d20e
+  Label       : PTP Property 0xd20e
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 14
+  Choices     : []
+/other/d20f
+  Label       : Color temperature
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 5500.0
+  Choices     : min=2500.0, max=9900.0, step=100.0
+/other/d210
+  Label       : CC Filter
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 192
+  Choices     : ['164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210', '211', '212', '213', '214', '215', '216', '217', '218', '219', '220']
+/other/d211
+  Label       : Aspect Ratio
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '3', '2', '4']
+/other/d213
+  Label       : Focus status
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d214
+  Label       : Zoom
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 23462912.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d215
+  Label       : Objects in memory
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=65535.0, step=1.0
+/other/d217
+  Label       : PTP Property 0xd217
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d218
+  Label       : Battery Level
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 50
+  Choices     : ['-1', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100']
+/other/d21b
+  Label       : Picture Effect
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 32768
+  Choices     : ['32768', '32769', '32770', '32771', '32772', '32773', '32784', '32800', '32801', '32816', '32832', '32848', '32849', '32850', '32851', '32864', '32912', '32880', '32881', '32882', '32896', '32897', '32898', '32928', '32929', '32930', '32931', '32932', '32933', '32934', '32944', '32960', '32961', '32962']
+/other/d21c
+  Label       : AB Filter
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 192.0
+  Choices     : min=164.0, max=220.0, step=2.0
+/other/d21d
+  Label       : PTP Property 0xd21d
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2']
+/other/d21e
+  Label       : ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 200
+  Choices     : []
+/other/d220
+  Label       : PTP Property 0xd220
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d221
+  Label       : PTP Property 0xd221
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d222
+  Label       : Capture Target
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 17
+  Choices     : ['1', '17', '16']
+/other/d224
+  Label       : Exposure Bias Compensation
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d226
+  Label       : ISO
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 200
+  Choices     : ['16777215', '80', '100', '125', '160', '200', '250', '320', '400', '500', '640', '800', '1000', '1250', '1600', '2000', '2500', '3200', '4000', '5000', '6400', '8000', '10000', '12800', '33554431', '16777416', '16777616', '16778016', '16778816', '16780416', '16783616', '16790016', '16802816']
+/other/d227
+  Label       : PTP Property 0xd227
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d228
+  Label       : PTP Property 0xd228
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 5
+  Choices     : ['4', '5']
+/other/d229
+  Label       : Shutter speed
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 65556
+  Choices     : ['0', '19660810', '16384010', '13107210', '9830410', '8519690', '6553610', '5242890', '3932170', '3276810', '2621450', '2097162', '1638410', '1310730', '1048586', '851978', '655370', '524298', '393226', '327690', '262154', '65539', '65540', '65541', '65542', '65544', '65546', '65549', '65551', '65556', '65561', '65566', '65576', '65586', '65596', '65616', '65636', '65661', '65696', '65736', '65786', '65856', '65936', '66036', '66176', '66336', '66536', '66786', '67136', '67536']
+/other/d22a
+  Label       : PTP Property 0xd22a
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d22b
+  Label       : PTP Property 0xd22b
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d235
+  Label       : PTP Property 0xd235
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d23e
+  Label       : PTP Property 0xd23e
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d23f
+  Label       : PTP Property 0xd23f
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
+/other/d240
+  Label       : PTP Property 0xd240
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']
+/other/d241
+  Label       : PTP Property 0xd241
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 9
+  Choices     : ['8', '9', '3']
+/other/d242
+  Label       : PTP Property 0xd242
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 29
+  Choices     : ['4', '25', '5', '27', '29', '31']
+/other/d243
+  Label       : PTP Property 0xd243
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['2', '4']
+/other/d244
+  Label       : PTP Property 0xd244
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 6
+  Choices     : ['2', '4', '6']
+/other/d245
+  Label       : PTP Property 0xd245
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d246
+  Label       : PTP Property 0xd246
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2', '4']
+/other/d247
+  Label       : PTP Property 0xd247
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '17', '18', '19', '20']
+/other/d248
+  Label       : PTP Property 0xd248
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d249
+  Label       : PTP Property 0xd249
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 11572.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d24a
+  Label       : PTP Property 0xd24a
+  Readonly    : yes
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 0.0
+  Choices     : min=0.0, max=4294967296.0, step=1.0
+/other/d24b
+  Label       : PTP Property 0xd24b
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d24c
+  Label       : PTP Property 0xd24c
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 100
+  Choices     : ['0']
+/other/d24d
+  Label       : PTP Property 0xd24d
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1', '2', '3', '4']
+/other/d24e
+  Label       : PTP Property 0xd24e
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d24f
+  Label       : PTP Property 0xd24f
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d250
+  Label       : PTP Property 0xd250
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d25b
+  Label       : PTP Property 0xd25b
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['0', '1']
+/other/d25c
+  Label       : PTP Property 0xd25c
+  Readonly    : no
+  Data type   : <class 'float'>
+  Widget type : Slider
+  Current     : 1000.0
+  Choices     : min=1000.0, max=2000.0, step=100.0
+/other/d25d
+  Label       : PTP Property 0xd25d
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Text
+  Current     : 33554432
+  Choices     : n/a
+/other/d25f
+  Label       : PTP Property 0xd25f
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '3', '4']
+/other/d260
+  Label       : PTP Property 0xd260
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : []
+/other/d265
+  Label       : PTP Property 0xd265
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : []
+/other/d266
+  Label       : PTP Property 0xd266
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 0
+  Choices     : ['0', '1']
+/other/d2c1
+  Label       : Autofocus
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2c2
+  Label       : Capture
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2c3
+  Label       : PTP Property 0xd2c3
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2c5
+  Label       : PTP Property 0xd2c5
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c7
+  Label       : Still Image
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2c8
+  Label       : Movie
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2c9
+  Label       : PTP Property 0xd2c9
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2ca
+  Label       : PTP Property 0xd2ca
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2d1
+  Label       : Near Far
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 3
+  Choices     : ['-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '1', '2', '3', '4', '5', '6', '7']
+/other/d2d5
+  Label       : PTP Property 0xd2d5
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d6
+  Label       : PTP Property 0xd2d6
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+/other/d2d7
+  Label       : PTP Property 0xd2d7
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2d8
+  Label       : PTP Property 0xd2d8
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2d9
+  Label       : PTP Property 0xd2d9
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['1', '2']
+/other/d2dd
+  Label       : PTP Property 0xd2dd
+  Readonly    : no
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 2
+  Choices     : ['-1', '0', '1']
+/other/d2de
+  Label       : PTP Property 0xd2de
+  Readonly    : yes
+  Data type   : <class 'str'>
+  Widget type : Menu widget (same as Radio)
+  Current     : 1
+  Choices     : ['1', '2']
+
+================================================================================
+Testing commands used by pibooth
+Setting option imgsettings/iso="100"
+Setting option settings/capturetarget="Memory card"
+   -> invalid value 'Memory card' for option capturetarget (possible choices: ['sdram', 'card+sdram', 'card'])
+Unknown option actions/viewfinder
+Take capture preview
+Take a capture
+Download file from DSLR
+Save capture locally from memory buffer
+
+================================================================================
+SUCCESS : diagnostic completed
+If you are investigating why pibooth does not work with your DSLR camera,
+please paste the content of generated file 'diagnostic.log'
+on https://github.com/pibooth/pibooth/issues
diff -ruN ../pibooth_local_copy/tests/mocks/pibooth.cfg ./tests/mocks/pibooth.cfg
--- ../pibooth_local_copy/tests/mocks/pibooth.cfg	1969-12-31 19:00:00
+++ ./tests/mocks/pibooth.cfg	2025-05-16 14:02:41
@@ -0,0 +1,43 @@
+[GENERAL]
+
+# Test string
+language = fr
+
+# Test path
+directory = ~/Pictures/pibooth
+
+# Test list of path
+plugins = ('plugin1.py', 'plugin2.py')
+
+[WINDOW]
+
+# Text RGB color
+text_color = (255, 255, 255)
+
+# Test boolean
+animate = False
+
+[PICTURE]
+
+# Test tuple of integers
+captures = (4, 1)
+
+# Test list of colors
+text_colors = ((0, 0, 0), (234, 45, 2))
+
+# Test list of strings
+text_fonts = ('Amatic-Bold', 'AmaticSC-Regular')
+
+# Test empty key
+overlays =
+
+# Test list with one element
+backgrounds = ('fond1.jpg','fond2.jpg')
+
+[CONTROLS]
+
+# Test floats
+debounce_delay = 0.3
+
+# Test integer
+picture_btn_pin = 11
diff -ruN ../pibooth_local_copy/tests/test_camera.py ./tests/test_camera.py
--- ../pibooth_local_copy/tests/test_camera.py	1969-12-31 19:00:00
+++ ./tests/test_camera.py	2025-05-16 14:02:41
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+
+import os
+import pytest
+
+
+@pytest.mark.skipif("CAM_VIDEODRIVER" in os.environ, reason="No camera")
+def test_rpi_capture(camera_rpi):
+    camera_rpi.capture()
+    assert camera_rpi.get_captures()
+
+
+@pytest.mark.skipif("CAM_VIDEODRIVER" in os.environ, reason="No camera")
+def test_cv_capture(camera_cv):
+    camera_cv.capture()
+    assert camera_cv.get_captures()
+
+
+@pytest.mark.skipif("CAM_VIDEODRIVER" in os.environ, reason="No camera")
+def test_gp_capture(camera_gp):
+    camera_gp.capture()
+    assert camera_gp.get_captures()
+
+
+@pytest.mark.skipif("CAM_VIDEODRIVER" in os.environ, reason="No camera")
+def test_hybridr_capture(camera_rpi_gp):
+    camera_rpi_gp.capture()
+    assert camera_rpi_gp.get_captures()
+
+
+@pytest.mark.skipif("CAM_VIDEODRIVER" in os.environ, reason="No camera")
+def test_hybridc_capture(camera_cv_gp):
+    camera_cv_gp.capture()
+    assert camera_cv_gp.get_captures()
diff -ruN ../pibooth_local_copy/tests/test_config.py ./tests/test_config.py
--- ../pibooth_local_copy/tests/test_config.py	1969-12-31 19:00:00
+++ ./tests/test_config.py	2025-05-16 14:02:41
@@ -0,0 +1,67 @@
+# -*- coding: utf-8 -*-
+
+import os.path as osp
+import pytest
+
+
+def test_join_path_to_config_directory(cfg):
+    assert cfg.join_path() == osp.dirname(cfg.filename)
+    assert cfg.join_path('test') == osp.join(osp.dirname(cfg.filename), 'test')
+
+
+def test_not_in_config_option(cfg):
+    assert cfg.get('GENERAL', 'autostart') == 'False'
+
+
+def test_not_existing_option(cfg):
+    with pytest.raises(KeyError):
+        cfg.get('GENERAL', 'toto')
+
+
+def test_string(cfg):
+    assert cfg.get('GENERAL', 'language') == 'fr'
+
+
+def test_color(cfg):
+    assert cfg.gettyped('WINDOW', 'text_color') == (255, 255, 255)
+
+
+def test_boolean(cfg):
+    assert cfg.getboolean('WINDOW', 'animate') is False
+
+
+def test_integer(cfg):
+    assert cfg.getint('CONTROLS', 'picture_btn_pin') == 11
+
+
+def test_float(cfg):
+    assert cfg.getfloat('CONTROLS', 'debounce_delay') == 0.3
+
+
+def test_tuple(cfg):
+    assert cfg.gettuple('PICTURE', 'captures', int) == (4, 1)
+
+
+def test_empty(cfg):
+    assert cfg.get('PICTURE', 'overlays') == ''
+
+
+def test_path_list(cfg):
+    dirname = osp.dirname(cfg.filename)
+    fullpath = (osp.join(dirname, 'plugin1.py'), osp.join(dirname, 'plugin2.py'))
+    assert cfg.gettuple('GENERAL', 'plugins', 'path') == fullpath
+
+
+def test_color_list(cfg):
+    assert cfg.gettuple('PICTURE', 'text_colors', 'color') == ((0, 0, 0), (234, 45, 2))
+
+
+def test_string_list(cfg):
+    assert cfg.gettuple('PICTURE', 'overlays', str) == ()
+    assert cfg.gettuple('PICTURE', 'text_fonts', str) == ('Amatic-Bold', 'AmaticSC-Regular')
+
+
+def test_string_list_extended(cfg):
+    assert cfg.gettuple('PICTURE', 'overlays', str, 1) == ('',)
+    assert cfg.gettuple('PICTURE', 'backgrounds', str) == ('fond1.jpg', 'fond2.jpg')
+    assert cfg.gettuple('PICTURE', 'backgrounds', str, 3) == ('fond1.jpg', 'fond2.jpg', 'fond2.jpg')
diff -ruN ../pibooth_local_copy/tests/test_counters.py ./tests/test_counters.py
--- ../pibooth_local_copy/tests/test_counters.py	1969-12-31 19:00:00
+++ ./tests/test_counters.py	2025-05-16 14:02:41
@@ -0,0 +1,46 @@
+# -*- coding: utf-8 -*-
+
+import pytest
+
+
+def test_iter(counters):
+    for name in counters:
+        assert name
+
+
+def test_getitem(counters):
+    assert counters['nbr_printed'] == 0
+
+
+def test_names(counters):
+    assert len(counters.names()) == 1
+    assert 'nbr_printed' in counters.names()
+
+
+def test_set(counters):
+    assert counters.nbr_printed == 0
+    counters.nbr_printed += 2
+    assert counters.nbr_printed == 2
+
+
+def test_reset(counters):
+    counters.nbr_printed = 5
+    assert counters.nbr_printed == 5
+    counters.reset()
+    assert counters.nbr_printed == 0
+
+
+def test_invalid_counter(counters):
+    with pytest.raises(AttributeError):
+        counters.invalid
+
+
+def test_save(counters):
+    counters.nbr_printed = 5
+    counters.data['nbr_printed'] = 0
+    assert counters.nbr_printed == 0
+    counters.load()
+    assert counters.nbr_printed == 5
+    counters.reset()
+    counters.load()
+    assert counters.nbr_printed == 0
diff -ruN ../pibooth_local_copy/tests/test_factory.py ./tests/test_factory.py
--- ../pibooth_local_copy/tests/test_factory.py	1969-12-31 19:00:00
+++ ./tests/test_factory.py	2025-05-16 14:02:41
@@ -0,0 +1,81 @@
+# -*- coding: utf-8 -*-
+
+import pytest
+from pibooth.pictures.factory import PilPictureFactory, OpenCvPictureFactory
+
+footer_texts = ('This is the main title', 'Footer text 2', 'Footer text 3')
+footer_fonts = ('Amatic-Bold', 'DancingScript-Regular', 'Roboto-LightItalic')
+footer_colors = ((10, 0, 0), (0, 50, 0), (0, 50, 50))
+
+
+def setup_factory(m, fond_path, overlay=''):
+    m.add_text(footer_texts[0], footer_fonts[0], footer_colors[0], 'left')
+    m.add_text(footer_texts[1], footer_fonts[1], footer_colors[1], 'center')
+    m.add_text(footer_texts[2], footer_fonts[2], footer_colors[2], 'right')
+    m.set_background(fond_path)
+    if overlay:
+        m.set_overlay(overlay)
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_cv2_portrait(captures_nbr, captures_portrait, fond_path, tmpdir):
+    factory = OpenCvPictureFactory(2400, 3600, *captures_portrait[:captures_nbr])
+    setup_factory(factory, fond_path)
+    path = tmpdir.join("OpenCV-portrait-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_cv2_landscape(captures_nbr, captures_landscape, fond_path, tmpdir):
+    factory = OpenCvPictureFactory(3600, 2400, *captures_landscape[:captures_nbr])
+    setup_factory(factory, fond_path)
+    path = tmpdir.join("OpenCV-landscape-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_pil_portrait(captures_nbr, captures_portrait, fond_path, tmpdir):
+    factory = PilPictureFactory(2400, 3600, *captures_portrait[:captures_nbr])
+    setup_factory(factory, fond_path)
+    path = tmpdir.join("PIL-portrait-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_pil_landscape(captures_nbr, captures_landscape, fond_path, tmpdir):
+    factory = PilPictureFactory(3600, 2400, *captures_landscape[:captures_nbr])
+    setup_factory(factory, fond_path)
+    path = tmpdir.join("PIL-landscape-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_pil_overlay_portrait(captures_nbr, captures_portrait, fond_path, overlays_portrait_path, tmpdir):
+    factory = PilPictureFactory(2400, 3600, *captures_portrait[:captures_nbr])
+    setup_factory(factory, fond_path, overlays_portrait_path[captures_nbr - 1])
+    path = tmpdir.join("PIL-portrait-overlay-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_pil_overlay_landscape(captures_nbr, captures_landscape, fond_path, overlays_landscape_path, tmpdir):
+    factory = PilPictureFactory(3600, 2400, *captures_landscape[:captures_nbr])
+    setup_factory(factory, fond_path, overlays_landscape_path[captures_nbr - 1])
+    path = tmpdir.join("PIL-landscape-overlay-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_cv2_overlay_portrait(captures_nbr, captures_portrait, fond_path, overlays_portrait_path, tmpdir):
+    factory = OpenCvPictureFactory(2400, 3600, *captures_portrait[:captures_nbr])
+    setup_factory(factory, fond_path, overlays_portrait_path[captures_nbr - 1])
+    path = tmpdir.join("OpenCV-portrait-overlay-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
+
+
+@pytest.mark.parametrize('captures_nbr', [1, 2, 3, 4])
+def test_save_cv2_overlay_landscape(captures_nbr, captures_landscape, fond_path, overlays_landscape_path, tmpdir):
+    factory = OpenCvPictureFactory(3600, 2400, *captures_landscape[:captures_nbr])
+    setup_factory(factory, fond_path, overlays_landscape_path[captures_nbr - 1])
+    path = tmpdir.join("OpenCV-landscape-overlay-{}.jpg".format(captures_nbr))
+    factory.save(str(path))
diff -ruN ../pibooth_local_copy/tests/test_sizing.py ./tests/test_sizing.py
--- ../pibooth_local_copy/tests/test_sizing.py	1969-12-31 19:00:00
+++ ./tests/test_sizing.py	2025-05-16 14:02:41
@@ -0,0 +1,64 @@
+# -*- coding: utf-8 -*-
+
+
+from pibooth.pictures import sizing
+
+
+def test_resize_original_small_inner():
+    size = sizing.new_size_keep_aspect_ratio((600, 200), (900, 600))
+    assert size == (900, 300)
+
+
+def test_resize_original_small_outer():
+    size = sizing.new_size_keep_aspect_ratio((600, 200), (900, 600), 'outer')
+    assert size == (1800, 600)
+
+
+def test_resize_original_big_inner():
+    size = sizing.new_size_keep_aspect_ratio((1000, 1200), (800, 600))
+    assert size == (500, 600)
+
+
+def test_resize_original_big_outer():
+    size = sizing.new_size_keep_aspect_ratio((1000, 1200), (800, 600), 'outer')
+    assert size == (800, 960)
+
+
+def test_crop_original_small_left():
+    coordinates = sizing.new_size_by_croping((600, 200), (900, 600), 'top-left')
+    assert coordinates == (0, 0, 900, 600)
+
+
+def test_crop_original_small_middle():
+    coordinates = sizing.new_size_by_croping((600, 200), (900, 600))
+    assert coordinates == (-150, -200, 750, 400)
+
+
+def test_crop_original_big_topleft():
+    coordinates = sizing.new_size_by_croping((1000, 1200), (800, 600), 'top-left')
+    assert coordinates == (0, 0, 800, 600)
+
+
+def test_crop_original_big_middle():
+    coordinates = sizing.new_size_by_croping((1000, 1200), (800, 600))
+    assert coordinates == (100, 300, 900, 900)
+
+
+def test_crop_ratio_original_small_left():
+    coordinates = sizing.new_size_by_croping_ratio((600, 200), (900, 600), 'top-left')
+    assert coordinates == (0, 0, 300, 200)
+
+
+def test_crop_ratio_original_small_middle():
+    coordinates = sizing.new_size_by_croping_ratio((600, 200), (900, 600))
+    assert coordinates == (150, 0, 450, 200)
+
+
+def test_crop_ratio_original_big_topleft():
+    coordinates = sizing.new_size_by_croping_ratio((1000, 1200), (800, 600), 'top-left')
+    assert coordinates == (0, 0, 1000, 750)
+
+
+def test_crop_ratio_original_big_middle():
+    coordinates = sizing.new_size_by_croping_ratio((1000, 1200), (800, 600))
+    assert coordinates == (0, 225, 1000, 975)
diff -ruN ../pibooth_local_copy/tests/test_window.py ./tests/test_window.py
--- ../pibooth_local_copy/tests/test_window.py	1969-12-31 19:00:00
+++ ./tests/test_window.py	2025-05-16 14:02:41
@@ -0,0 +1,89 @@
+# -*- coding: utf-8 -*-
+
+import os
+import pytest
+import pygame
+from pibooth.view.window import PiWindow
+
+
+WIN = PiWindow("Test", debug=True)
+
+
+def loop(func, *args, **kwargs):
+    fps = 40
+    clock = pygame.time.Clock()
+
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                WIN.drop_cache()
+                return
+            if event.type == pygame.VIDEORESIZE:
+                WIN.resize(event.size)
+
+        func(*args, **kwargs)
+
+        pygame.display.update()
+        clock.tick(fps)
+
+        if os.environ.get('SDL_VIDEODRIVER') == "dummy":
+            # Automatic tests without video device available
+            break
+
+
+def test_oops(init):
+    loop(WIN.show_oops)
+
+
+def test_intro(init):
+    loop(WIN.show_intro)
+
+
+def test_intro_portrait(init, captures_portrait):
+    loop(WIN.show_intro, captures_portrait[0])
+
+
+def test_intro_landscape(init, captures_landscape):
+    loop(WIN.show_intro, captures_landscape[0])
+
+
+@pytest.mark.parametrize('choices', [(1, 2), (1, 3), (1, 4)])
+def test_choice(init, choices):
+    loop(WIN.show_choice, choices)
+
+
+@pytest.mark.parametrize('selected', [1, 2, 3, 4])
+def test_choice_selected(init, selected):
+    loop(WIN.show_choice, (0, 0), selected)
+
+
+def test_preview(init):
+    loop(WIN.set_capture_number, 3, 5)
+
+
+def test_work_in_progress(init):
+    loop(WIN.show_work_in_progress)
+
+
+def test_print(init):
+    loop(WIN.show_print)
+
+
+def test_print_portrait(init, captures_portrait):
+    loop(WIN.show_print, captures_portrait[0])
+
+
+def test_print_landscape(init, captures_landscape):
+    loop(WIN.show_print, captures_landscape[0])
+
+
+def test_finished(init):
+    loop(WIN.show_finished)
+
+
+def test_finished_portrait(init, captures_portrait):
+    loop(WIN.show_finished, captures_portrait[0])
+
+
+def test_finished_landscape(init, captures_landscape):
+    loop(WIN.show_finished, captures_landscape[0])
diff -ruN ../pibooth_local_copy/utils.py ./utils.py
--- ../pibooth_local_copy/utils.py	2025-05-16 13:26:45
+++ ./utils.py	1969-12-31 19:00:00
@@ -1,296 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth utilities.
-"""
-
-import os
-import sys
-import time
-import os.path as osp
-import logging
-import psutil
-import platform
-from fnmatch import fnmatchcase
-import contextlib
-import errno
-import subprocess
-import pygame
-
-
-LOGGER = logging.getLogger("pibooth")
-
-
-class BlockConsoleHandler(logging.StreamHandler):
-
-    default_level = logging.INFO
-    pattern_indent = '+< '
-    pattern_blocks = '|  '
-    pattern_dedent = '+> '
-    current_indent = ''
-
-    def emit(self, record):
-        cls = self.__class__
-        if cls.is_debug():
-            record.msg = '{}{}'.format(cls.current_indent, record.msg)
-        logging.StreamHandler.emit(self, record)
-
-        if cls.current_indent.endswith(cls.pattern_indent):
-            cls.current_indent = (cls.current_indent[:-len(cls.pattern_indent)] + cls.pattern_blocks)
-        elif cls.current_indent.endswith(cls.pattern_dedent):
-            cls.current_indent = cls.current_indent[:-len(cls.pattern_dedent)]
-
-    @classmethod
-    def is_debug(cls):
-        """Return True if this handler is set to DEBUG level on the root logger.
-        """
-        for hdlr in logging.getLogger().handlers:
-            if isinstance(hdlr, cls):
-                return hdlr.level < logging.INFO
-        return False
-
-    @classmethod
-    def indent(cls):
-        """Begin a new log block.
-        """
-        if cls.is_debug():
-            cls.current_indent += cls.pattern_indent
-
-    @classmethod
-    def dedent(cls):
-        """End the current log block.
-        """
-        if cls.is_debug():
-            cls.current_indent = (cls.current_indent[:-len(cls.pattern_blocks)] + cls.pattern_dedent)
-
-
-class PoolingTimer(object):
-
-    """
-    Timer to be used in a pooling loop to check if timeout has been exceed.
-    """
-
-    def __init__(self, timeout, start=True):
-        self.timeout = timeout
-        self.time = None
-        self._paused_total = 0
-        self._paused_time = None
-        if start:
-            self.start()
-
-    def __enter__(self):
-        """Start timer if used as context manager.
-        """
-        self.start()
-        return self
-
-    def __exit__(self, *args):
-        """Stop timer if used as context manager.
-        """
-        self.time = None
-
-    def reset(self):
-        """Reset timer to its initial state.
-        """
-        self.time = None
-        self._paused_total = 0
-        self._paused_time = None
-
-    def start(self):
-        """Start the timer.
-        """
-        if self.timeout < 0:
-            raise ValueError("PoolingTimer cannot be started if timeout is lower than zero")
-        if self._paused_time:
-            self._paused_total += time.time() - self._paused_time
-            self._paused_time = None
-        else:
-            self._paused_total = 0
-            self.time = time.time()
-
-    def freeze(self):
-        """Pause the timer.
-        """
-        if not self._paused_time:
-            self._paused_time = time.time()
-
-    def remaining(self):
-        """Return the remaining seconds.
-        """
-        if self.time is None:
-            remain = float(self.timeout)
-        else:
-            remain = self.timeout + self.paused() - (time.time() - self.time)
-            if remain < 0.0:
-                remain = 0.0
-        return remain
-
-    def paused(self):
-        """Return the pause duration in seconds.
-        """
-        if self._paused_time:
-            return self._paused_total + time.time() - self._paused_time
-        return self._paused_total
-
-    def elapsed(self):
-        """Return the elapsed seconds.
-        """
-        if self.time is None:
-            return 0.0
-        return time.time() - self.time - self.paused()
-
-    def is_timeout(self):
-        """Return True if the timer is in timeout.
-        """
-        if self.time is None:
-            raise RuntimeError("PoolingTimer has never been started")
-        return (time.time() - self.time - self.paused()) > self.timeout
-
-
-def configure_logging(level=logging.INFO, msgfmt=logging.BASIC_FORMAT, datefmt=None, filename=None):
-    """Configure root logger for console printing.
-    """
-    root = logging.getLogger()
-
-    if not root.handlers:
-        # Set lower level to be sure that all handlers receive the logs
-        root.setLevel(logging.DEBUG)
-
-        if filename:
-            # Create a file handler, all levels are logged
-            filename = osp.abspath(osp.expanduser(filename))
-            dirname = osp.dirname(filename)
-            if not osp.isdir(dirname):
-                os.makedirs(dirname)
-            hdlr = logging.FileHandler(filename, mode='w')
-            hdlr.setFormatter(logging.Formatter(msgfmt, datefmt))
-            hdlr.setLevel(logging.DEBUG)
-            root.addHandler(hdlr)
-
-        # Create a console handler
-        hdlr = BlockConsoleHandler(sys.stdout)
-        hdlr.setFormatter(logging.Formatter(msgfmt, datefmt))
-        if level is not None:
-            hdlr.setLevel(level)
-            BlockConsoleHandler.default_level = level
-        root.addHandler(hdlr)
-
-
-def set_logging_level(level=None):
-    """Set/restore the log level of the concole.
-
-    :param level: level as defined in the logging package
-    :type level: int
-    """
-    for hdlr in logging.getLogger().handlers:
-        if isinstance(hdlr, BlockConsoleHandler):
-            if level is None:
-                # Restore the default level
-                level = BlockConsoleHandler.default_level
-            hdlr.setLevel(level)
-
-
-def get_logging_filename():
-    """Return the absolute path to the logs filename if set.
-    """
-    for hdlr in logging.getLogger().handlers:
-        if isinstance(hdlr, logging.FileHandler):
-            return hdlr.baseFilename
-    return None
-
-
-def get_crash_message():
-    msg = "system='{}', node='{}', release='{}', version='{}', machine='{}', processor='{}'\n".format(*platform.uname())
-    msg += " " + "*" * 83 + "\n"
-    msg += " * " + "Oops! It seems that pibooth has crached".center(80) + "*\n"
-    msg += " * " + "You can report an issue on https://github.com/pibooth/pibooth/issues/new".center(80) + "*\n"
-    if get_logging_filename():
-        msg += " * " + ("and post the file: {}".format(get_logging_filename())).center(80) + "*\n"
-    msg += " " + "*" * 83
-    return msg
-
-
-@contextlib.contextmanager
-def timeit(description):
-    """Measure time execution.
-    """
-    BlockConsoleHandler.indent()
-    LOGGER.info(description)
-    start = time.time()
-    try:
-        yield
-    finally:
-        BlockConsoleHandler.dedent()
-        LOGGER.debug("took %0.3f seconds", time.time() - start)
-
-
-def pkill(pattern):
-    """Kill all process matching the given pattern.
-
-    :param pattern: pattern used to match processes
-    :type pattern: str
-    """
-    for proc in psutil.process_iter():
-        if fnmatchcase(proc.name(), pattern):
-            LOGGER.debug("Try to kill process '%s'", proc.name())
-            try:
-                proc.kill()
-            except psutil.AccessDenied:
-                raise EnvironmentError("Can not kill '{}', root access is required. "
-                                       "(kill it manually before starting pibooth)".format(proc.name()))
-
-
-def open_text_editor(filename):
-    """Open a text editor to edit the configuration file.
-    """
-    editors = ['leafpad', 'mousepad', 'vi', 'emacs']
-    for editor in editors:
-        try:
-            process = subprocess.Popen([editor, filename])
-            process.communicate()
-            return True
-        except OSError as e:
-            if e.errno != errno.ENOENT:
-                # Something else went wrong while trying to run the editor
-                raise
-    LOGGER.critical("Can't find installed text editor among %s", editors)
-    return False
-
-
-def load_module(path):
-    """Load a Python module dynamically.
-    """
-    if not osp.isfile(path):
-        raise ValueError("Invalid Python module path '{}'".format(path))
-
-    dirname, filename = osp.split(path)
-    modname = osp.splitext(filename)[0]
-
-    if dirname not in sys.path:
-        sys.path.append(dirname)
-
-    for hook in sys.meta_path:
-        if hasattr(hook, 'find_module'):
-            # Deprecated since Python 3.4
-            loader = hook.find_module(modname, [dirname])
-            if loader:
-                return loader.load_module(modname)
-        else:
-            spec = hook.find_spec(modname, [dirname])
-            if spec:
-                return spec.loader.load_module(modname)
-
-    LOGGER.warning("Can not load Python module '%s' from '%s'", modname, path)
-
-
-def get_event_pos(display_size, event):
-    """
-    Return the position from finger or mouse event on x-axis and y-axis (x, y).
-
-    :param display_size: size of display for relative positioning in finger events
-    :param event: pygame event object
-    :return: position (x, y) in px
-    """
-    if event.type in (pygame.FINGERDOWN, pygame.FINGERMOTION, pygame.FINGERUP):
-        finger_pos = (event.x * display_size[0], event.y * display_size[1])
-        return finger_pos
-    return event.pos
diff -ruN ../pibooth_local_copy/view/__init__.py ./view/__init__.py
--- ../pibooth_local_copy/view/__init__.py	2025-05-16 13:26:44
+++ ./view/__init__.py	1969-12-31 19:00:00
@@ -1,3 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from pibooth.view.window import PiWindow
Binary files ../pibooth_local_copy/view/__pycache__/__init__.cpython-37.pyc and ./view/__pycache__/__init__.cpython-37.pyc differ
Binary files ../pibooth_local_copy/view/__pycache__/background.cpython-37.pyc and ./view/__pycache__/background.cpython-37.pyc differ
Binary files ../pibooth_local_copy/view/__pycache__/window.cpython-37.pyc and ./view/__pycache__/window.cpython-37.pyc differ
diff -ruN ../pibooth_local_copy/view/background.py ./view/background.py
--- ../pibooth_local_copy/view/background.py	2025-05-16 13:26:44
+++ ./view/background.py	1969-12-31 19:00:00
@@ -1,681 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import os.path as osp
-import pygame
-
-from pibooth import fonts, pictures
-from pibooth.language import get_translated_text
-
-ARROW_TOP = 'top'
-ARROW_BOTTOM = 'bottom'
-ARROW_HIDDEN = 'hidden'
-ARROW_TOUCH = 'touchscreen'
-
-
-def multiline_text_to_surfaces(text, color, rect, align='center'):
-    """Return a list of surfaces corresponding to each line of the text.
-    The surfaces are next to each others in order to fit the given rect.
-
-    The ``align`` parameter can be one of:
-       * top-left
-       * top-center
-       * top-right
-       * center-left
-       * center
-       * center-right
-       * bottom-left
-       * bottom-center
-       * bottom-right
-    """
-    surfaces = []
-    lines = text.splitlines()
-
-    font = fonts.get_pygame_font(max(lines, key=len), fonts.CURRENT,
-                                 rect.width, rect.height / len(lines))
-    for i, line in enumerate(lines):
-        surface = font.render(line, True, color)
-
-        if align.endswith('left'):
-            x = rect.left
-        elif align.endswith('center'):
-            x = rect.centerx - surface.get_rect().width / 2
-        elif align.endswith('right'):
-            x = rect.right - surface.get_rect().width / 2
-        else:
-            raise ValueError("Invalid horizontal alignment '{}'".format(align))
-
-        height = surface.get_rect().height
-        if align.startswith('top'):
-            y = rect.top + i * height
-        elif align.startswith('center'):
-            y = rect.centery - len(lines) * height / 2 + i * height
-        elif align.startswith('bottom'):
-            y = rect.bottom - (len(lines) - i) * height
-        else:
-            raise ValueError("Invalid vertical alignment '{}'".format(align))
-
-        surfaces.append((surface, surface.get_rect(x=x, y=y)))
-    return surfaces
-
-
-class Background(object):
-
-    def __init__(self, image_name, color=(0, 0, 0), text_color=(255, 255, 255)):
-        self._rect = None
-        self._name = image_name
-        self._need_update = False
-
-        self._background = None
-        self._background_color = color
-        self._background_image = None
-
-        self._overlay = None
-
-        self._texts = []  # List of (surface, rect)
-        self._text_border = 20  # Distance to other elements
-        self._text_color = text_color
-
-        # Build rectangles around some areas for debuging purpose
-        self._show_outlines = True
-        self._outlines = []
-
-    def __str__(self):
-        """Return background final name.
-
-        It is used in the main window to distinguish backgrounds in the cache
-        thus each background string shall be uniq.
-        """
-        return "{}({})".format(self.__class__.__name__, self._name)
-
-    def _make_outlines(self, size):
-        """Return a red rectangle surface.
-        """
-        outlines = pygame.Surface(size, pygame.SRCALPHA, 32)
-        pygame.draw.rect(outlines, pygame.Color(255, 0, 0), outlines.get_rect(), 2)
-        return outlines
-
-    def _write_text(self, text, rect=None, align='center'):
-        """Write a text in the given rectangle.
-        """
-        if not rect:
-            rect = self._rect.inflate(-self._text_border, -self._text_border)
-        if self._show_outlines:
-            self._outlines.append((self._make_outlines(rect.size), rect))
-        self._texts.extend(multiline_text_to_surfaces(text, self._text_color, rect, align))
-
-    def set_color(self, color_or_path):
-        """Set background color (RGB tuple) or path to an image that used to
-        fill the background.
-
-        :param color_or_path: RGB color tuple or image path
-        :type color_or_path: tuple or str
-        """
-        if isinstance(color_or_path, (tuple, list)):
-            assert len(color_or_path) == 3, "Length of 3 is required for RGB tuple"
-            if color_or_path != self._background_color:
-                self._background_color = color_or_path
-                self._need_update = True
-        else:
-            assert osp.isfile(color_or_path), "Invalid image for window background: '{}'".format(color_or_path)
-            if color_or_path != self._background_image:
-                self._background_image = color_or_path
-                self._background_color = (0, 0, 0)
-                self._need_update = True
-
-    def get_color(self):
-        """Return the background color (RGB tuple).
-        """
-        return self._background_color
-
-    def set_text_color(self, color):
-        """Set text color (RGB tuple) used to write the texts.
-
-        :param color: RGB color tuple
-        :type color: tuple
-        """
-        assert len(color) == 3, "Length of 3 is required for RGB tuple"
-        if color != self._text_color:
-            self._text_color = color
-            self._need_update = True
-
-    def set_outlines(self, outlines=True):
-        """Draw outlines for each rectangle available for drawing
-        texts.
-
-        :param outlines: enable / disable outlines
-        :type outlines: bool
-        """
-        if outlines != self._show_outlines:
-            self._show_outlines = outlines
-            self._need_update = True
-
-    def resize(self, screen):
-        """Resize objects to fit to the screen.
-        """
-        if self._rect != screen.get_rect():
-            self._rect = screen.get_rect()
-            self._outlines = []
-
-            if self._background_image:
-                self._background = pictures.get_pygame_image(
-                    self._background_image, (self._rect.width, self._rect.height), crop=True, color=None)
-                self._background_color = pictures.get_pygame_main_color(self._background)
-
-            overlay_name = "{}.png".format(self._name)
-            if osp.isfile(pictures.get_filename(overlay_name)):
-                self._overlay = pictures.get_pygame_image(
-                    pictures.get_filename(overlay_name), (self._rect.width, self._rect.height), color=self._text_color, bg_color=self._background_color)
-
-            self.resize_texts()
-            self._need_update = True
-
-    def resize_texts(self, rect=None, align='center'):
-        """Update text surfaces.
-        """
-        self._texts = []
-        text = get_translated_text(self._name)
-        if text:
-            self._write_text(text, rect, align)
-
-    def paint(self, screen):
-        """Paint and animate the surfaces on the screen.
-        """
-        if self._background:
-            screen.blit(self._background, (0, 0))
-        else:
-            screen.fill(self._background_color)
-        if self._overlay:
-            screen.blit(self._overlay, self._overlay.get_rect(center=self._rect.center))
-        for text_surface, pos in self._texts:
-            screen.blit(text_surface, pos)
-        for outline_surface, pos in self._outlines:
-            screen.blit(outline_surface, pos)
-        self._need_update = False
-
-
-class IntroBackground(Background):
-
-    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
-        Background.__init__(self, "intro")
-        self.arrow_location = arrow_location
-        self.arrow_offset = arrow_offset
-        self.left_arrow = None
-        self.left_arrow_pos = None
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update and self.arrow_location != ARROW_HIDDEN:
-            if self.arrow_location == ARROW_TOUCH:
-                size = (self._rect.width * 0.2, self._rect.height * 0.2)
-
-                self.left_arrow = pictures.get_pygame_image("camera.png", size, vflip=False, color=self._text_color)
-
-                x = int(self._rect.width * 0.2)
-                y = int(self._rect.height // 2)
-            else:
-                size = (self._rect.width * 0.3, self._rect.height * 0.3)
-
-                vflip = True if self.arrow_location == ARROW_TOP else False
-                self.left_arrow = pictures.get_pygame_image("arrow.png", size, vflip=vflip, color=self._text_color)
-
-                x = int(self._rect.left + self._rect.width // 4
-                        - self.left_arrow.get_rect().width // 2)
-                if self.arrow_location == ARROW_TOP:
-                    y = self._rect.top + 10
-                else:
-                    y = int(self._rect.top + 2 * self._rect.height // 3)
-
-            self.left_arrow_pos = (x - self.arrow_offset, y)
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        if self.arrow_location == ARROW_HIDDEN:
-            rect = pygame.Rect(self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height - 2 * self._text_border)
-            align = 'center'
-        elif self.arrow_location == ARROW_BOTTOM:
-            rect = pygame.Rect(self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.6 - self._text_border)
-            align = 'bottom-center'
-        elif self.arrow_location == ARROW_TOUCH:
-            rect = pygame.Rect(self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.4 - self._text_border)
-            align = 'bottom-center'
-        else:
-            rect = pygame.Rect(self._text_border, self._rect.height * 0.4,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.6 - self._text_border)
-            align = 'top-center'
-        Background.resize_texts(self, rect, align)
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        if self.arrow_location != ARROW_HIDDEN:
-            screen.blit(self.left_arrow, self.left_arrow_pos)
-
-
-class IntroWithPrintBackground(IntroBackground):
-
-    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
-        IntroBackground.__init__(self, arrow_location, arrow_offset)
-        self.right_arrow = None
-        self.right_arrow_pos = None
-
-    def __str__(self):
-        """Return background final name.
-
-        It is used in the main window to distinguish backgrounds in the cache
-        thus each background string shall be uniq.
-        """
-        return "{}({})".format(self.__class__.__name__, "intro_print")
-
-    def resize(self, screen):
-        IntroBackground.resize(self, screen)
-        if self._need_update and self.arrow_location != ARROW_HIDDEN:
-            size = (self._rect.width * 0.1, self._rect.height * 0.1)
-            if self.arrow_location == ARROW_TOUCH:
-                self.right_arrow = pictures.get_pygame_image("hand.png", size, hflip=False,
-                                                             vflip=False, angle=-70, color=self._text_color)
-            else:
-                vflip = True if self.arrow_location == ARROW_TOP else False
-                angle = -70 if self.arrow_location == ARROW_TOP else 70
-                self.right_arrow = pictures.get_pygame_image("arrow.png", size, hflip=False,
-                                                             vflip=vflip, angle=angle, color=self._text_color)
-
-            x = int(self._rect.left + self._rect.width // 2
-                    - self.right_arrow.get_rect().width // 2)
-            if self.arrow_location == ARROW_TOP:
-                y = self._rect.top + 10
-            else:
-                y = int(self._rect.bottom - self.right_arrow.get_rect().height * 1.1)
-            self.right_arrow_pos = (x - self.arrow_offset, y)
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        IntroBackground.resize_texts(self)
-        text = get_translated_text("intro_print")
-        if text:
-            rect = pygame.Rect(self._rect.width * 0.30 + self._text_border, 0,
-                               self._rect.width * 0.20 - 2 * self._text_border,
-                               self._rect.height * 0.3 - 2 * self._text_border)
-            if self.arrow_location == ARROW_TOP:
-                rect.top = self._rect.height * 0.08
-            else:
-                rect.bottom = self._rect.height - self._rect.height * 0.08
-            self._write_text(text, rect)
-
-    def paint(self, screen):
-        IntroBackground.paint(self, screen)
-        if self.arrow_location != ARROW_HIDDEN:
-            screen.blit(self.right_arrow, self.right_arrow_pos)
-
-
-class ChooseBackground(Background):
-
-    def __init__(self, choices, arrow_location=ARROW_BOTTOM, arrow_offset=0):
-        Background.__init__(self, "choose")
-        self.arrow_location = arrow_location
-        self.arrow_offset = arrow_offset
-        self.choices = choices
-        self.layout0 = None
-        self.layout0_pos = None
-        self.layout1 = None
-        self.layout1_pos = None
-        self.left_arrow = None
-        self.left_arrow_pos = None
-        self.right_arrow = None
-        self.right_arrow_pos = None
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update:
-            size = (self._rect.width * 0.45, self._rect.height * 0.6)
-            self.layout0 = pictures.get_pygame_layout_image(
-                self._text_color, self._background_color, self.choices[0], size)
-            self.layout1 = pictures.get_pygame_layout_image(
-                self._text_color, self._background_color, self.choices[1], size)
-
-            inter = (self._rect.width - 2 * self.layout0.get_rect().width) // 3
-
-            x0 = int(self._rect.left + inter)
-            x1 = int(self._rect.left + 2 * inter + self.layout0.get_rect().width)
-            y = int(self._rect.top + self._rect.height * 0.3)
-
-            self.layout0_pos = (x0, y)
-            self.layout1_pos = (x1, y)
-
-            if self.arrow_location in [ARROW_TOP, ARROW_BOTTOM]:
-                if self.arrow_location == ARROW_TOP:
-                    y = 5
-                    x_offset = 30
-                    size = (self._rect.width * 0.1, self._rect.top + y + 30)
-                else:
-                    x_offset = 0
-                    y = self.layout0_pos[1] + self.layout0.get_rect().height + 5
-                    size = (self._rect.width * 0.1, self._rect.bottom - y - 5)
-
-                vflip = True if self.arrow_location == ARROW_TOP else False
-                self.left_arrow = pictures.get_pygame_image("arrow.png", size, vflip=vflip,
-                                                            color=self._text_color)
-                self.right_arrow = pictures.get_pygame_image("arrow.png", size, hflip=True,
-                                                             vflip=vflip, color=self._text_color)
-
-                inter = (self._rect.width - 2 * self.left_arrow.get_rect().width) // 4
-
-                x0 = int(self._rect.left + inter) - x_offset
-                x1 = int(self._rect.left + 3 * inter + self.left_arrow.get_rect().width) + x_offset
-
-                self.left_arrow_pos = (x0 - self.arrow_offset, y)
-                self.right_arrow_pos = (x1 + self.arrow_offset, y)
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        rect = pygame.Rect(self._text_border, self._text_border,
-                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
-        Background.resize_texts(self, rect)
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        screen.blit(self.layout0, self.layout0_pos)
-        screen.blit(self.layout1, self.layout1_pos)
-        if self.arrow_location in [ARROW_TOP, ARROW_BOTTOM]:
-            screen.blit(self.left_arrow, self.left_arrow_pos)
-            screen.blit(self.right_arrow, self.right_arrow_pos)
-
-
-class ChosenBackground(Background):
-
-    def __init__(self, choices, selected):
-        Background.__init__(self, "chosen")
-        self.choices = choices
-        self.selected = selected
-        self.layout = None
-        self.layout_pos = None
-
-    def __str__(self):
-        """Return background final name.
-        It is used in the main window to distinguish background in the cache.
-        """
-        return "{}({}{})".format(self.__class__.__name__, self._name, self.selected)
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update:
-            size = (self._rect.width * 0.6, self._rect.height * 0.6)
-
-            self.layout = pictures.get_pygame_layout_image(
-                self._text_color, self._background_color, self.selected, size)
-
-            x = self.layout.get_rect(center=self._rect.center).left
-            y = int(self._rect.top + self._rect.height * 0.3)
-
-            self.layout_pos = (x, y)
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        rect = pygame.Rect(self._text_border, self._text_border,
-                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
-        Background.resize_texts(self, rect)
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        screen.blit(self.layout, self.layout_pos)
-
-
-class CaptureBackground(Background):
-
-    def __init__(self):
-        Background.__init__(self, "capture")
-        self.left_people = None
-        self.left_people_pos = None
-        self.right_people = None
-        self.right_people_pos = None
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update:
-            images_height = self._rect.height / 4
-            size = (images_height * 2, images_height)
-
-            self.left_people = pictures.get_pygame_image("capture_left.png", size=size,
-                                                         color=self._text_color)
-            self.right_people = pictures.get_pygame_image("capture_right.png", size=size,
-                                                          color=self._text_color)
-
-            x = int(self._rect.right - size[0])
-            y = int(self._rect.bottom - images_height)
-
-            self.left_people_pos = (0, y)
-            self.right_people_pos = (x + size[0] - 1.5 * self.right_people.get_rect().width, y)
-
-            if self._show_outlines:
-                self._outlines.append((self._make_outlines(size), (0, y)))
-                self._outlines.append((self._make_outlines(size), (x, y)))
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        screen.blit(self.left_people, self.left_people_pos)
-        screen.blit(self.right_people, self.right_people_pos)
-
-
-class ProcessingBackground(Background):
-
-    def __init__(self):
-        Background.__init__(self, "processing")
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        rect = pygame.Rect(self._text_border, self._rect.height * 0.8 - self._text_border,
-                           self._rect.width - 2 * self._text_border, self._rect.height * 0.2)
-        Background.resize_texts(self, rect)
-
-
-class PrintBackground(Background):
-
-    def __init__(self, arrow_location=ARROW_BOTTOM, arrow_offset=0):
-        Background.__init__(self, "print")
-        self.arrow_location = arrow_location
-        self.arrow_offset = arrow_offset
-        self.right_arrow = None
-        self.right_arrow_pos = None
-        self.left_arrow = None
-        self.left_arrow_pos = None
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update and self.arrow_location != ARROW_HIDDEN:
-
-            if self.arrow_location == ARROW_TOUCH:
-                size = (self._rect.width // 4, self._rect.height // 4)
-                # Right arrow
-                self.right_arrow = pictures.get_pygame_image(
-                    "printer_touch.png", size, hflip=False, vflip=False, color=self._text_color)
-                x = int(self._rect.left + self._rect.width * 0.70
-                        - self.right_arrow.get_rect().width // 2)
-                y = int(self._rect.top + self._rect.height * 0.45)
-            else:
-                size = (self._rect.width * 0.3, self._rect.height * 0.3)
-
-                vflip = True if self.arrow_location == ARROW_TOP else False
-
-                # Right arrow
-                self.right_arrow = pictures.get_pygame_image(
-                    "arrow.png", size, hflip=True, vflip=vflip, color=self._text_color)
-
-                x = int(self._rect.left + self._rect.width * 0.75
-                        - self.right_arrow.get_rect().width // 2)
-                if self.arrow_location == ARROW_TOP:
-                    y = self._rect.top + 10
-                else:
-                    y = int(self._rect.top + 2 * self._rect.height // 3)
-
-            self.right_arrow_pos = (x + self.arrow_offset, y)
-
-            # Left arrow
-            size = (self._rect.width * 0.1, self._rect.height * 0.1)
-
-            if self.arrow_location == ARROW_TOUCH:
-                self.left_arrow = pictures.get_pygame_image(
-                    "hand.png", size, hflip=False, vflip=False, angle=70, color=self._text_color)
-            else:
-                vflip = True if self.arrow_location == ARROW_TOP else False
-                angle = 70 if self.arrow_location == ARROW_TOP else -70
-                self.left_arrow = pictures.get_pygame_image(
-                    "arrow.png", size, hflip=False, vflip=vflip, angle=angle, color=self._text_color)
-
-            x = int(self._rect.left + self._rect.width // 2
-                    - self.left_arrow.get_rect().width // 2)
-
-            if self.arrow_location == ARROW_TOP:
-                y = self._rect.top + 10
-            else:
-                y = int(self._rect.bottom - self.left_arrow.get_rect().height * 1.1)
-
-            self.left_arrow_pos = (x - self.arrow_offset, y)
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        if self.arrow_location == ARROW_HIDDEN:
-            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height - 2 * self._text_border)
-            align = 'center'
-        elif self.arrow_location == ARROW_BOTTOM:
-            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.6 - self._text_border)
-            align = 'bottom-center'
-        elif self.arrow_location == ARROW_TOUCH:
-            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._text_border,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.4 - self._text_border)
-            align = 'bottom-center'
-        else:
-            rect = pygame.Rect(self._rect.width / 2 + self._text_border, self._rect.height * 0.4,
-                               self._rect.width / 2 - 2 * self._text_border,
-                               self._rect.height * 0.6 - self._text_border)
-            align = 'top-center'
-        Background.resize_texts(self, rect, align)
-
-        text = get_translated_text("print_forget")
-        if text:
-            rect = pygame.Rect(self._rect.width // 2, 0,
-                               self._rect.width // 5 - 2 * self._text_border,
-                               self._rect.height * 0.3 - 2 * self._text_border)
-            if self.arrow_location == ARROW_TOP:
-                rect.top = self._rect.height * 0.08
-            else:
-                rect.bottom = self._rect.height - self._rect.height * 0.08
-
-            self._write_text(text, rect)
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        if self.arrow_location != ARROW_HIDDEN:
-            screen.blit(self.right_arrow, self.right_arrow_pos)
-            screen.blit(self.left_arrow, self.left_arrow_pos)
-
-
-class FinishedBackground(Background):
-
-    def __init__(self):
-        Background.__init__(self, "finished")
-        self.left_people = None
-        self.left_people_pos = None
-        self.right_people = None
-        self.right_people_pos = None
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update:
-            left_rect = pygame.Rect(10, 0, self._rect.width * 0.4, self._rect.height * 0.5)
-            left_rect.top = self._rect.centery - left_rect.centery
-            right_rect = pygame.Rect(0, 0, self._rect.width * 0.3, self._rect.height * 0.5)
-            right_rect.top = self._rect.centery - right_rect.centery
-            right_rect.right = self._rect.right - 10
-
-            self.left_people = pictures.get_pygame_image("finished_left.png", size=left_rect.size,
-                                                         color=self._text_color)
-            self.right_people = pictures.get_pygame_image("finished_right.png", size=right_rect.size,
-                                                          color=self._text_color)
-
-            self.left_people_pos = self.left_people.get_rect(center=left_rect.center).topleft
-            self.right_people_pos = self.right_people.get_rect(center=right_rect.center).topleft
-
-            if self._show_outlines:
-                self._outlines.append((self._make_outlines(left_rect.size), left_rect.topleft))
-                self._outlines.append((self._make_outlines(right_rect.size), right_rect.topleft))
-
-    def resize_texts(self):
-        """Update text surfaces.
-        """
-        rect = pygame.Rect(0, 0, self._rect.width * 0.35, self._rect.height * 0.4)
-        rect.center = self._rect.center
-        rect.bottom = self._rect.bottom - 10
-        Background.resize_texts(self, rect)
-
-    def paint(self, screen):
-        Background.paint(self, screen)
-        if self.left_people:
-            screen.blit(self.left_people, self.left_people_pos)
-        if self.right_people:
-            screen.blit(self.right_people, self.right_people_pos)
-
-
-class FinishedWithImageBackground(FinishedBackground):
-
-    def __init__(self, foreground_size):
-        FinishedBackground.__init__(self)
-        self._name = "finishedwithimage"
-        self.foreground_size = foreground_size
-
-    def resize(self, screen):
-        Background.resize(self, screen)
-        if self._need_update:
-            # Note: '0.9' ratio comes from PiWindow._update_foreground() method which
-            # lets a margin between window borders and fullscreen foreground picture
-            frgnd_rect = pygame.Rect(0, 0, *pictures.sizing.new_size_keep_aspect_ratio(
-                self.foreground_size, (self._rect.size[0] * 0.9, self._rect.size[1]*0.9)))
-            xmargin = abs(self._rect.width - frgnd_rect.width) // 2
-            ymargin = abs(self._rect.height - frgnd_rect.height) // 2
-
-            if xmargin > 50:
-                margin = min(xmargin, self._rect.height // 3)
-            elif ymargin > 50:
-                margin = min(ymargin, self._rect.width // 3)
-            else:  # Too small
-                self.left_people = None
-                self.right_people = None
-                return
-
-            left_rect = pygame.Rect(0, 0, margin, margin)
-            right_rect = pygame.Rect(0, 0, margin, margin)
-            left_rect.bottom = self._rect.bottom
-            right_rect.right = self._rect.right
-
-            self.left_people = pictures.get_pygame_image("finished_left.png", size=left_rect.size,
-                                                         color=self._text_color)
-            self.right_people = pictures.get_pygame_image("finished_right.png", size=right_rect.size,
-                                                          color=self._text_color)
-
-            self.left_people_pos = self.left_people.get_rect(center=left_rect.center).topleft
-            self.right_people_pos = self.right_people.get_rect(center=right_rect.center).topleft
-
-            if self._show_outlines and left_rect and right_rect:
-                self._outlines.append((self._make_outlines(left_rect.size), left_rect.topleft))
-                self._outlines.append((self._make_outlines(right_rect.size), right_rect.topleft))
-
-
-class OopsBackground(Background):
-
-    def __init__(self):
-        Background.__init__(self, "oops")
diff -ruN ../pibooth_local_copy/view/window.py ./view/window.py
--- ../pibooth_local_copy/view/window.py	2025-05-16 13:26:44
+++ ./view/window.py	1969-12-31 19:00:00
@@ -1,387 +0,0 @@
-# -*- coding: utf-8 -*-
-
-"""Pibooth view management.
-"""
-
-import os
-import time
-import contextlib
-import pygame
-from pygame import gfxdraw
-from PIL import Image
-from pibooth import pictures, fonts
-from pibooth.view import background
-from pibooth.utils import LOGGER
-from pibooth.pictures import sizing
-
-
-class PiWindow(object):
-
-    """Class to handle the window.
-    The following attributes are available for use in plugins:
-
-    :attr surface: surface on which sprites are displayed
-    :type surface: :py:class:`pygame.Surface`
-    :attr is_fullscreen: set to True if the window is display in full screen
-    :type is_fullscreen: bool
-    :attr display_size: tuple (width, height) represneting the size of the screen
-    :type display_size: tuple
-    """
-
-    CENTER = 'center'
-    RIGHT = 'right'
-    LEFT = 'left'
-    FULLSCREEN = 'fullscreen'
-
-    def __init__(self, title,
-                 size=(800, 480),
-                 color=(0, 0, 0),
-                 text_color=(255, 255, 255),
-                 arrow_location=background.ARROW_BOTTOM,
-                 arrow_offset=0,
-                 debug=False):
-        self.__size = size
-        self.debug = debug
-        self.bg_color = color
-        self.text_color = text_color
-        self.arrow_location = arrow_location
-        self.arrow_offset = arrow_offset
-
-        # Prepare the pygame module for use
-        if 'SDL_VIDEO_WINDOW_POS' not in os.environ:
-            os.environ['SDL_VIDEO_CENTERED'] = '1'
-        pygame.init()
-
-        # Save the desktop mode, shall be done before `setmode` (SDL 1.2.10, and pygame 1.8.0)
-        info = pygame.display.Info()
-
-        pygame.display.set_caption(title)
-        self.is_fullscreen = False
-        self.display_size = (info.current_w, info.current_h)
-        self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
-
-        self._buffered_images = {}
-        self._current_background = None
-        self._current_foreground = None
-        self._print_number = 0
-        self._print_failure = False
-        self._capture_number = (0, 4)  # (current, max)
-
-        self._pos_map = {self.CENTER: self._center_pos,
-                         self.RIGHT: self._right_pos,
-                         self.LEFT: self._left_pos,
-                         self.FULLSCREEN: self._center_pos}
-
-        # Don't use pygame.mouse.get_cursor() because will be removed in pygame2
-        self._cursor = ((16, 16), (0, 0),
-                        (0, 0, 64, 0, 96, 0, 112, 0, 120, 0, 124, 0, 126, 0, 127, 0,
-                         127, 128, 124, 0, 108, 0, 70, 0, 6, 0, 3, 0, 3, 0, 0, 0),
-                        (192, 0, 224, 0, 240, 0, 248, 0, 252, 0, 254, 0, 255, 0, 255,
-                         128, 255, 192, 255, 224, 254, 0, 239, 0, 207, 0, 135, 128, 7, 128, 3, 0))
-
-    def _update_foreground(self, pil_image, pos=CENTER, resize=True):
-        """Show a PIL image on the foreground.
-        Only one is bufferized to avoid memory leak.
-        """
-        image_name = id(pil_image)
-
-        if pos == self.FULLSCREEN:
-            image_size_max = (self.surface.get_size()[0] * 0.9, self.surface.get_size()[1] * 0.9)
-        else:
-            image_size_max = (self.surface.get_size()[0] * 0.48, self.surface.get_size()[1])
-
-        buff_size, buff_image = self._buffered_images.get(image_name, (None, None))
-        if buff_image and image_size_max == buff_size:
-            image = buff_image
-        else:
-            if resize:
-                image = pil_image.resize(sizing.new_size_keep_aspect_ratio(
-                    pil_image.size, image_size_max), Image.ANTIALIAS)
-            else:
-                image = pil_image
-            image = pygame.image.frombuffer(image.tobytes(), image.size, image.mode)
-            if self._current_foreground:
-                self._buffered_images.pop(id(self._current_foreground[0]), None)
-            LOGGER.debug("Add to buffer the image '%s'", image_name)
-            self._buffered_images[image_name] = (image_size_max, image)
-
-        self._current_foreground = (pil_image, pos, resize)
-
-        if self.debug and resize:
-            # Build rectangle around picture area for debuging purpose
-            outlines = pygame.Surface(image_size_max, pygame.SRCALPHA, 32)
-            pygame.draw.rect(outlines, pygame.Color(255, 0, 0), outlines.get_rect(), 2)
-            self.surface.blit(outlines, self._pos_map[pos](outlines))
-
-        return self.surface.blit(image, self._pos_map[pos](image))
-
-    def _update_background(self, bkgd):
-        """Show image on the background.
-        """
-        self._current_background = self._buffered_images.setdefault(str(bkgd), bkgd)
-        self._current_background.set_color(self.bg_color)
-        self._current_background.set_outlines(self.debug)
-        self._current_background.set_text_color(self.text_color)
-        self._current_background.resize(self.surface)
-        self._current_background.paint(self.surface)
-        self._update_capture_number()
-        self._update_print_number()
-
-    def _update_capture_number(self):
-        """Update the captures counter displayed.
-        """
-        if not self._capture_number[0]:
-            return  # Dont show counter: no picture taken
-
-        center = self.surface.get_rect().center
-        radius = 10
-        border = 20
-        x = center[0] - (2 * radius * self._capture_number[1] + border * (self._capture_number[1] - 1)) // 2
-        y = self.surface.get_size()[1] - radius - border
-        for nbr in range(self._capture_number[1]):
-            gfxdraw.aacircle(self.surface, x, y, radius, self.text_color)
-            if self._capture_number[0] > nbr:
-                # Because anti-aliased filled circle doesn't exist
-                gfxdraw.aacircle(self.surface, x, y, radius - 3, self.text_color)
-                gfxdraw.filled_circle(self.surface, x, y, radius - 3, self.text_color)
-            x += (2 * radius + border)
-
-    def _update_print_number(self):
-        """Update the number of files in the printer queue.
-        """
-        if not self._print_number and not self._print_failure:
-            return  # Dont show counter: no file in queue, no failure
-
-        smaller = self.surface.get_size()[1] if self.surface.get_size(
-        )[1] < self.surface.get_size()[0] else self.surface.get_size()[0]
-        side = int(smaller * 0.05)  # 5% of the window
-
-        if side > 0:
-            if self._print_failure:
-                image = pictures.get_pygame_image('printer_failure.png', (side, side), color=self.text_color)
-            else:
-                image = pictures.get_pygame_image('printer.png', (side, side), color=self.text_color)
-            font = pygame.font.Font(fonts.CURRENT, side)
-            label = font.render(str(self._print_number), True, self.text_color)
-
-            height = max((image.get_rect().height, label.get_rect().height)) + 20
-            bg = pygame.Surface((image.get_rect().width + label.get_rect().width + side + 10, height))
-            bg.fill(self._current_background.get_color())
-            rect = bg.get_rect()
-            rect.bottomleft = self.get_rect().bottomleft
-            rect_image = image.get_rect(left=10, centery=rect.centery)
-            rect_label = label.get_rect(centerx=rect_image.right + (rect.width -
-                                        rect_image.right) // 2, centery=rect.centery)
-            self.surface.blit(bg, rect.topleft)
-            self.surface.blit(image, rect_image.topleft)
-            self.surface.blit(label, rect_label.topleft)
-
-    def _center_pos(self, image):
-        """
-        Return the position of the given image to be centered on window.
-        """
-        pos = self.surface.get_rect().center
-        return image.get_rect(center=pos) if image else pos
-
-    def _left_pos(self, image):
-        """
-        Return the position of the given image to be put on the left of the screen
-        """
-        pos = (self.surface.get_rect().centerx // 2, self.surface.get_rect().centery)
-        return image.get_rect(center=pos) if image else pos
-
-    def _right_pos(self, image):
-        """
-        Return the position of the given image to be put on the right of the screen
-        """
-        pos = (self.surface.get_rect().centerx + self.surface.get_rect().centerx // 2, self.surface.get_rect().centery)
-        return image.get_rect(center=pos) if image else pos
-
-    def get_rect(self, absolute=False):
-        """Return a Rect object (as defined in pygame) for this window.
-
-        :param absolute: absolute position considering the window centered on screen
-        :type absolute: bool
-        """
-        if absolute:
-            return self.surface.get_rect(center=(self.display_size[0] / 2, self.display_size[1] / 2))
-        return self.surface.get_rect()
-
-    def get_image(self):
-        """Return the currently displayed foreground image.
-        """
-        if self._current_foreground:
-            return self._current_foreground[0]
-        return None
-
-    def resize(self, size):
-        """Resize the window keeping aspect ratio.
-        """
-        if not self.is_fullscreen:
-            self.__size = size  # Manual resizing
-            self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
-        self.update()
-
-    def update(self):
-        """Repaint the window with currently displayed images.
-        """
-        if self._current_background:
-            self._update_background(self._current_background)
-        else:
-            self._update_capture_number()
-            self._update_print_number()
-        if self._current_foreground:
-            self._update_foreground(*self._current_foreground)
-
-    def show_oops(self):
-        """Show failure view in case of exception.
-        """
-        self._capture_number = (0, self._capture_number[1])
-        self._update_background(background.OopsBackground())
-
-    def show_intro(self, pil_image=None, with_print=True):
-        """Show introduction view.
-        """
-        self._capture_number = (0, self._capture_number[1])
-        if with_print and pil_image:
-            self._update_background(background.IntroWithPrintBackground(self.arrow_location, self.arrow_offset))
-        else:
-            self._update_background(background.IntroBackground(self.arrow_location, self.arrow_offset))
-
-        if pil_image:
-            self._update_foreground(pil_image, self.RIGHT)
-        elif self._current_foreground:
-            self._buffered_images.pop(id(self._current_foreground[0]), None)
-            self._current_foreground = None
-
-    def show_choice(self, choices, selected=None):
-        """Show the choice view.
-        """
-        self._capture_number = (0, self._capture_number[1])
-        if not selected:
-            self._update_background(background.ChooseBackground(choices, self.arrow_location, self.arrow_offset))
-        else:
-            self._update_background(background.ChosenBackground(choices, selected))
-
-    def show_image(self, pil_image=None, pos=CENTER):
-        """Show PIL image as it (no resize).
-        """
-        if not pil_image:
-            # Clear the currently displayed image
-            if self._current_foreground:
-                _, image = self._buffered_images.pop(id(self._current_foreground[0]))
-                _, pos, _ = self._current_foreground
-                self._current_foreground = None
-                image.fill((0, 0, 0))
-                return self.surface.blit(image, self._pos_map[pos](image))
-        else:
-            return self._update_foreground(pil_image, pos, False)
-
-    def show_work_in_progress(self):
-        """Show wait view.
-        """
-        self._capture_number = (0, self._capture_number[1])
-        self._update_background(background.ProcessingBackground())
-
-    def show_print(self, pil_image=None):
-        """Show print view (image resized on the left).
-        """
-        self._capture_number = (0, self._capture_number[1])
-        self._update_background(background.PrintBackground(self.arrow_location,
-                                                           self.arrow_offset))
-        if pil_image:
-            self._update_foreground(pil_image, self.LEFT)
-
-    def show_finished(self, pil_image=None):
-        """Show finished view (image resized fullscreen).
-        """
-        self._capture_number = (0, self._capture_number[1])
-        if pil_image:
-            bg = background.FinishedWithImageBackground(pil_image.size)
-            if self._buffered_images.get(str(bg), bg).foreground_size != pil_image.size:
-                self._buffered_images.pop(str(bg))  # Drop cache, foreground size ratio has changed
-            self._update_background(background.FinishedWithImageBackground(pil_image.size))
-            self._update_foreground(pil_image, self.FULLSCREEN)
-        else:
-            self._update_background(background.FinishedBackground())
-
-    @contextlib.contextmanager
-    def flash(self, count):
-        """Flash the window content.
-        """
-        if count < 1:
-            raise ValueError("The flash counter shall be greater than 0")
-
-        for i in range(count):
-            self.surface.fill((255, 255, 255))
-            if self._current_foreground:
-                # Flash only the background, keep foreground at the top
-                self._update_foreground(*self._current_foreground)
-            pygame.event.pump()
-            pygame.display.update()
-            time.sleep(0.02)
-            if i == count - 1:
-                yield  # Let's do actions before end of flash
-                self.update()
-                pygame.event.pump()
-                pygame.display.update()
-            else:
-                self.update()
-                pygame.event.pump()
-                pygame.display.update()
-                time.sleep(0.02)
-
-    def set_capture_number(self, current_nbr, total_nbr):
-        """Set the current number of captures taken.
-        """
-        if total_nbr < 1:
-            raise ValueError("Total number of captures shall be greater than 0")
-
-        self._capture_number = (current_nbr, total_nbr)
-        self._update_background(background.CaptureBackground())
-        if self._current_foreground:
-            self._update_foreground(*self._current_foreground)
-        pygame.display.update()
-
-    def set_print_number(self, current_nbr=None, failure=None):
-        """Set the current number of tasks in the printer queue.
-        """
-        update = False
-
-        if current_nbr is not None and self._print_number != current_nbr:
-            self._print_number = current_nbr
-            update = True
-
-        if failure is not None and self._print_failure != failure:
-            self._print_failure = failure
-            update = True
-
-        if update:
-            self._update_background(self._current_background)
-            if self._current_foreground:
-                self._update_foreground(*self._current_foreground)
-            pygame.display.update()
-
-    def toggle_fullscreen(self):
-        """Set window to full screen or initial size.
-        """
-        if self.is_fullscreen:
-            self.is_fullscreen = False  # Set before resize
-            pygame.mouse.set_cursor(*self._cursor)
-            self.surface = pygame.display.set_mode(self.__size, pygame.RESIZABLE)
-        else:
-            self.is_fullscreen = True  # Set before resize
-            # Make an invisible cursor (don't use pygame.mouse.set_visible(False) because
-            # the mouse event will always return the window bottom-right coordinate)
-            pygame.mouse.set_cursor((8, 8), (0, 0), (0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0))
-            self.surface = pygame.display.set_mode(self.display_size, pygame.FULLSCREEN)
-
-        self.update()
-
-    def drop_cache(self):
-        """Drop all cached background and foreground to force
-        refreshing the view.
-        """
-        self._current_background = None
-        self._current_foreground = None
-        self._buffered_images = {}
